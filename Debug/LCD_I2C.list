
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800867c  0800867c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008684  08008684  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800868c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001602b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003892  00000000  00000000  000360eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006aa4  00000000  00000000  0003baa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178ed  00000000  00000000  00042544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5f8  00000000  00000000  00059e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125429  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004988  00000000  00000000  0012547c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008628 	.word	0x08008628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008628 	.word	0x08008628

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LCD_SendInternal>:
#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;


HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr << 1, 1, HAL_MAX_DELAY);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	b299      	uxth	r1, r3
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2201      	movs	r2, #1
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <LCD_SendInternal+0xb0>)
 80004ee:	f002 fe5b 	bl	80031a8 <HAL_I2C_IsDeviceReady>
 80004f2:	4603      	mov	r3, r0
 80004f4:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d000      	beq.n	80004fe <LCD_SendInternal+0x32>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr << 1, 1, HAL_MAX_DELAY);
 80004fc:	e7ef      	b.n	80004de <LCD_SendInternal+0x12>
            break;
 80004fe:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	f023 030f 	bic.w	r3, r3, #15
 8000506:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800050e:	7bba      	ldrb	r2, [r7, #14]
 8000510:	797b      	ldrb	r3, [r7, #5]
 8000512:	4313      	orrs	r3, r2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f043 030c 	orr.w	r3, r3, #12
 800051a:	b2db      	uxtb	r3, r3
 800051c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800051e:	7bba      	ldrb	r2, [r7, #14]
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	4313      	orrs	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	b2db      	uxtb	r3, r3
 800052c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800052e:	7b7a      	ldrb	r2, [r7, #13]
 8000530:	797b      	ldrb	r3, [r7, #5]
 8000532:	4313      	orrs	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	f043 030c 	orr.w	r3, r3, #12
 800053a:	b2db      	uxtb	r3, r3
 800053c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800053e:	7b7a      	ldrb	r2, [r7, #13]
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	4313      	orrs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	b2db      	uxtb	r3, r3
 800054c:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr << 1, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	b29b      	uxth	r3, r3
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	b299      	uxth	r1, r3
 8000556:	f107 0208 	add.w	r2, r7, #8
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2304      	movs	r3, #4
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <LCD_SendInternal+0xb0>)
 8000564:	f002 fd22 	bl	8002fac <HAL_I2C_Master_Transmit>
 8000568:	4603      	mov	r3, r0
 800056a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800056c:	2005      	movs	r0, #5
 800056e:	f000 fce3 	bl	8000f38 <HAL_Delay>
    return res;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000ac 	.word	0x200000ac

08000580 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000590:	79b9      	ldrb	r1, [r7, #6]
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2200      	movs	r2, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff98 	bl	80004cc <LCD_SendInternal>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80005b4:	79b9      	ldrb	r1, [r7, #6]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff86 	bl	80004cc <LCD_SendInternal>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2130      	movs	r1, #48	; 0x30
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffd2 	bl	8000580 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffcd 	bl	8000580 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	210c      	movs	r1, #12
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ffc8 	bl	8000580 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc3 	bl	8000580 <LCD_SendCommand>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	6039      	str	r1, [r7, #0]
 800060c:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 800060e:	e009      	b.n	8000624 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffc3 	bl	80005a4 <LCD_SendData>
        str++;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f1      	bne.n	8000610 <LCD_SendString+0xe>
    }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063c:	f000 fc0a 	bl	8000e54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000640:	f000 f828 	bl	8000694 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000644:	f000 f924 	bl	8000890 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000648:	f000 f88e 	bl	8000768 <MX_I2C1_Init>
	MX_I2S3_Init();
 800064c:	f000 f8ba 	bl	80007c4 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000650:	f000 f8e8 	bl	8000824 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000654:	f007 fba0 	bl	8007d98 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */



	LCD_Init(LCD_ADDR);
 8000658:	2027      	movs	r0, #39	; 0x27
 800065a:	f7ff ffb5 	bl	80005c8 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	2027      	movs	r0, #39	; 0x27
 8000662:	f7ff ff8d 	bl	8000580 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <main+0x54>)
 8000668:	2027      	movs	r0, #39	; 0x27
 800066a:	f7ff ffca 	bl	8000602 <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800066e:	21c0      	movs	r1, #192	; 0xc0
 8000670:	2027      	movs	r0, #39	; 0x27
 8000672:	f7ff ff85 	bl	8000580 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000676:	4906      	ldr	r1, [pc, #24]	; (8000690 <main+0x58>)
 8000678:	2027      	movs	r0, #39	; 0x27
 800067a:	f7ff ffc2 	bl	8000602 <LCD_SendString>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800067e:	f007 fbb1 	bl	8007de4 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */

		HAL_Delay(100);
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f000 fc58 	bl	8000f38 <HAL_Delay>
		MX_USB_HOST_Process();
 8000688:	e7f9      	b.n	800067e <main+0x46>
 800068a:	bf00      	nop
 800068c:	08008640 	.word	0x08008640
 8000690:	08008650 	.word	0x08008650

08000694 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 feba 	bl	800841c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fd1c 	bl	8004158 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
		Error_Handler();
 8000726:	f000 f9b1 	bl	8000a8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f003 ff7d 	bl	8004648 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc4>
		Error_Handler();
 8000754:	f000 f99a 	bl	8000a8c <Error_Handler>
	}
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f002 fabd 	bl	8002d24 <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80007b0:	f000 f96c 	bl	8000a8c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000ac 	.word	0x200000ac
 80007bc:	40005400 	.word	0x40005400
 80007c0:	000186a0 	.word	0x000186a0

080007c4 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f003 f808 	bl	8003818 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
		Error_Handler();
 800080e:	f000 f93d 	bl	8000a8c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f004 fa33 	bl	8004ce0 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000880:	f000 f904 	bl	8000a8c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000148 	.word	0x20000148
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b72      	ldr	r3, [pc, #456]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a71      	ldr	r2, [pc, #452]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a6a      	ldr	r2, [pc, #424]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b68      	ldr	r3, [pc, #416]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a63      	ldr	r2, [pc, #396]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a5c      	ldr	r2, [pc, #368]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b5a      	ldr	r3, [pc, #360]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a55      	ldr	r2, [pc, #340]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4c      	ldr	r3, [pc, #304]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4849      	ldr	r0, [pc, #292]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000954:	f000 fdc2 	bl	80014dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4847      	ldr	r0, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fdbd 	bl	80014dc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000962:	2200      	movs	r2, #0
 8000964:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000968:	4845      	ldr	r0, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 800096a:	f000 fdb7 	bl	80014dc <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096e:	2308      	movs	r3, #8
 8000970:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	483c      	ldr	r0, [pc, #240]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000986:	f000 fc0d 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009a2:	f000 fbff 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	482e      	ldr	r0, [pc, #184]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fbef 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	482a      	ldr	r0, [pc, #168]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80009dc:	f000 fbe2 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80009e0:	2304      	movs	r3, #4
 80009e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4825      	ldr	r0, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 80009f4:	f000 fbd6 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000a16:	f000 fbc5 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000a1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a34:	f000 fbb6 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a4c:	f000 fbaa 	bl	80011a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a66:	f000 fb9d 	bl	80011a4 <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fb22 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b44:	f000 fb2e 	bl	80011a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_I2S_MspInit+0xf0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d15a      	bne.n	8000c5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bac:	23c0      	movs	r3, #192	; 0xc0
 8000bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 ff51 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bc4:	f7ff ff62 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <HAL_I2S_MspInit+0xf8>)
 8000c38:	f000 fab4 	bl	80011a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <HAL_I2S_MspInit+0xfc>)
 8000c5a:	f000 faa3 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3738      	adds	r7, #56	; 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40003c00 	.word	0x40003c00
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_SPI_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cd2:	23e0      	movs	r3, #224	; 0xe0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_SPI_MspInit+0x8c>)
 8000cee:	f000 fa59 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8d0 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <OTG_FS_IRQHandler+0x10>)
 8000d62:	f000 fe3f 	bl	80019e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000584 	.word	0x20000584

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f007 fb02 	bl	80083a8 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20020000 	.word	0x20020000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	200001a0 	.word	0x200001a0
 8000dd8:	20000898 	.word	0x20000898

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f007 fac1 	bl	80083b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fc01 	bl	8000638 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e44:	0800868c 	.word	0x0800868c
  ldr r2, =_sbss
 8000e48:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e4c:	20000898 	.word	0x20000898

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f94f 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe06 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f967 	bl	800118a <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f92f 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	200001a4 	.word	0x200001a4

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200001a4 	.word	0x200001a4

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	e16b      	b.n	8001498 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 815a 	bne.w	8001492 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d005      	beq.n	80011f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d130      	bne.n	8001258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 0201 	and.w	r2, r3, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b03      	cmp	r3, #3
 8001262:	d017      	beq.n	8001294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d123      	bne.n	80012e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	69b9      	ldr	r1, [r7, #24]
 80012e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0203 	and.w	r2, r3, #3
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80b4 	beq.w	8001492 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <HAL_GPIO_Init+0x30c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a5f      	ldr	r2, [pc, #380]	; (80014b0 <HAL_GPIO_Init+0x30c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_GPIO_Init+0x30c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <HAL_GPIO_Init+0x310>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <HAL_GPIO_Init+0x314>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d02b      	beq.n	80013ca <HAL_GPIO_Init+0x226>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a51      	ldr	r2, [pc, #324]	; (80014bc <HAL_GPIO_Init+0x318>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x222>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a50      	ldr	r2, [pc, #320]	; (80014c0 <HAL_GPIO_Init+0x31c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x21e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4f      	ldr	r2, [pc, #316]	; (80014c4 <HAL_GPIO_Init+0x320>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x21a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_GPIO_Init+0x324>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x216>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <HAL_GPIO_Init+0x328>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x212>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x32c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x20e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_GPIO_Init+0x330>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x20a>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e00e      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00c      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e00a      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e008      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013ba:	2304      	movs	r3, #4
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013be:	2303      	movs	r3, #3
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x228>
 80013ca:	2300      	movs	r3, #0
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x310>)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_GPIO_Init+0x334>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_GPIO_Init+0x334>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_GPIO_Init+0x334>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <HAL_GPIO_Init+0x334>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <HAL_GPIO_Init+0x334>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_GPIO_Init+0x334>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_GPIO_Init+0x334>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_GPIO_Init+0x334>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	f67f ae90 	bls.w	80011c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021800 	.word	0x40021800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800150e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001510:	b08f      	sub	sp, #60	; 0x3c
 8001512:	af0a      	add	r7, sp, #40	; 0x28
 8001514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e054      	b.n	80015ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f006 fc8a 	bl	8007e54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fcb9 	bl	8004ed6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	687e      	ldr	r6, [r7, #4]
 800156c:	466d      	mov	r5, sp
 800156e:	f106 0410 	add.w	r4, r6, #16
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001582:	1d33      	adds	r3, r6, #4
 8001584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f003 fc33 	bl	8004df2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fcb0 	bl	8004ef8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	687e      	ldr	r6, [r7, #4]
 80015a0:	466d      	mov	r5, sp
 80015a2:	f106 0410 	add.w	r4, r6, #16
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b6:	1d33      	adds	r3, r6, #4
 80015b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f003 fe38 	bl	8005230 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b089      	sub	sp, #36	; 0x24
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	4608      	mov	r0, r1
 80015dc:	4611      	mov	r1, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70bb      	strb	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_HCD_HC_Init+0x28>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e076      	b.n	80016e8 <HAL_HCD_HC_Init+0x116>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	333d      	adds	r3, #61	; 0x3d
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	787a      	ldrb	r2, [r7, #1]
 8001624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	212c      	movs	r1, #44	; 0x2c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	3340      	adds	r3, #64	; 0x40
 8001634:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001636:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	3339      	adds	r3, #57	; 0x39
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	333f      	adds	r3, #63	; 0x3f
 8001658:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	78ba      	ldrb	r2, [r7, #2]
 8001662:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001666:	b2d0      	uxtb	r0, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	333a      	adds	r3, #58	; 0x3a
 8001674:	4602      	mov	r2, r0
 8001676:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da09      	bge.n	8001694 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	333b      	adds	r3, #59	; 0x3b
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e008      	b.n	80016a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	333b      	adds	r3, #59	; 0x3b
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	333c      	adds	r3, #60	; 0x3c
 80016b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	787c      	ldrb	r4, [r7, #1]
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	78f9      	ldrb	r1, [r7, #3]
 80016c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4623      	mov	r3, r4
 80016d6:	f003 ff31 	bl	800553c <USB_HC_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}

080016f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_HCD_HC_Halt+0x1e>
 800170a:	2302      	movs	r3, #2
 800170c:	e00f      	b.n	800172e <HAL_HCD_HC_Halt+0x3e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f004 f981 	bl	8005a26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	70fb      	strb	r3, [r7, #3]
 800174a:	460b      	mov	r3, r1
 800174c:	70bb      	strb	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	333b      	adds	r3, #59	; 0x3b
 8001760:	78ba      	ldrb	r2, [r7, #2]
 8001762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	333f      	adds	r3, #63	; 0x3f
 8001772:	787a      	ldrb	r2, [r7, #1]
 8001774:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001776:	7c3b      	ldrb	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d112      	bne.n	80017a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2203      	movs	r2, #3
 800178c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	333d      	adds	r3, #61	; 0x3d
 800179c:	7f3a      	ldrb	r2, [r7, #28]
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e008      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	3342      	adds	r3, #66	; 0x42
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	f200 80c6 	bhi.w	8001948 <HAL_HCD_HC_SubmitRequest+0x210>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	08001935 	.word	0x08001935
 80017cc:	08001839 	.word	0x08001839
 80017d0:	080018b7 	.word	0x080018b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017d4:	7c3b      	ldrb	r3, [r7, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f040 80b8 	bne.w	800194c <HAL_HCD_HC_SubmitRequest+0x214>
 80017dc:	78bb      	ldrb	r3, [r7, #2]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80b4 	bne.w	800194c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017e4:	8b3b      	ldrh	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	212c      	movs	r1, #44	; 0x2c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3355      	adds	r3, #85	; 0x55
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3355      	adds	r3, #85	; 0x55
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001822:	e093      	b.n	800194c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e089      	b.n	800194c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001838:	78bb      	ldrb	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11d      	bne.n	800187a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	3355      	adds	r3, #85	; 0x55
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3342      	adds	r3, #66	; 0x42
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001864:	e073      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3342      	adds	r3, #66	; 0x42
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
      break;
 8001878:	e069      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3354      	adds	r3, #84	; 0x54
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3342      	adds	r3, #66	; 0x42
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
      break;
 80018a0:	e055      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3342      	adds	r3, #66	; 0x42
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	e04b      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11d      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	3355      	adds	r3, #85	; 0x55
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	3342      	adds	r3, #66	; 0x42
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018e2:	e034      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3342      	adds	r3, #66	; 0x42
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e02a      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3354      	adds	r3, #84	; 0x54
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e016      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e00c      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
      break;
 8001946:	e002      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001948:	bf00      	nop
 800194a:	e000      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800194c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3344      	adds	r3, #68	; 0x44
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	8b3a      	ldrh	r2, [r7, #24]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	202c      	movs	r0, #44	; 0x2c
 8001968:	fb00 f303 	mul.w	r3, r0, r3
 800196c:	440b      	add	r3, r1
 800196e:	334c      	adds	r3, #76	; 0x4c
 8001970:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3360      	adds	r3, #96	; 0x60
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3350      	adds	r3, #80	; 0x50
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3339      	adds	r3, #57	; 0x39
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3361      	adds	r3, #97	; 0x61
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	222c      	movs	r2, #44	; 0x2c
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	3338      	adds	r3, #56	; 0x38
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	18d1      	adds	r1, r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	f003 fed4 	bl	8005780 <USB_HC_StartXfer>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop

080019e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fbd5 	bl	80051aa <USB_GetMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80f6 	bne.w	8001bf4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fbb9 	bl	8005184 <USB_ReadInterrupts>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ec 	beq.w	8001bf2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fbb0 	bl	8005184 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a2e:	d104      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fba0 	bl	8005184 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a4e:	d104      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fb90 	bl	8005184 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a6e:	d104      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fb80 	bl	8005184 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d103      	bne.n	8001a96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fb72 	bl	8005184 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aaa:	d11c      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ab4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6938      	ldr	r0, [r7, #16]
 8001aca:	f003 fa61 	bl	8004f90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f003 fa92 	bl	8004ff8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fc68 	bl	80053b0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f006 fa35 	bl	8007f50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fb4a 	bl	8005184 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afa:	d102      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f001 f89e 	bl	8002c3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fb3c 	bl	8005184 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d106      	bne.n	8001b24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f006 f9fe 	bl	8007f18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2208      	movs	r2, #8
 8001b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fb2b 	bl	8005184 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d101      	bne.n	8001b3c <HAL_HCD_IRQHandler+0x158>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_HCD_IRQHandler+0x15a>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d012      	beq.n	8001b68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0210 	bic.w	r2, r2, #16
 8001b50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 ffa1 	bl	8002a9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fb09 	bl	8005184 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b7c:	d13a      	bne.n	8001bf4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ff3e 	bl	8005a04 <USB_HC_ReadInterrupt>
 8001b88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e025      	b.n	8001bdc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d018      	beq.n	8001bd6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bba:	d106      	bne.n	8001bca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8ab 	bl	8001d1e <HCD_HC_IN_IRQHandler>
 8001bc8:	e005      	b.n	8001bd6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fbf9 	bl	80023c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3d4      	bcc.n	8001b90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	e000      	b.n	8001bf4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001bf2:	bf00      	nop
    }
  }
}
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_HCD_Start+0x16>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e013      	b.n	8001c38 <HAL_HCD_Start+0x3e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fc2a 	bl	8005478 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 f943 	bl	8004eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_HCD_Stop+0x16>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e00d      	b.n	8001c72 <HAL_HCD_Stop+0x32>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f818 	bl	8005c98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fbcc 	bl	8005424 <USB_ResetPort>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3360      	adds	r3, #96	; 0x60
 8001cb0:	781b      	ldrb	r3, [r3, #0]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3350      	adds	r3, #80	; 0x50
 8001cd8:	681b      	ldr	r3, [r3, #0]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fc10 	bl	8005518 <USB_GetCurrentFrame>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fbeb 	bl	80054ea <USB_GetHostSpeed>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d11a      	bne.n	8001d84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3361      	adds	r3, #97	; 0x61
 8001d6e:	2206      	movs	r2, #6
 8001d70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fe52 	bl	8005a26 <USB_HC_Halt>
 8001d82:	e0af      	b.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9a:	d11b      	bne.n	8001dd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	461a      	mov	r2, r3
 8001daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3361      	adds	r3, #97	; 0x61
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe2a 	bl	8005a26 <USB_HC_Halt>
 8001dd2:	e087      	b.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d109      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2320      	movs	r3, #32
 8001dfa:	6093      	str	r3, [r2, #8]
 8001dfc:	e072      	b.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d11a      	bne.n	8001e4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	2308      	movs	r3, #8
 8001e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3361      	adds	r3, #97	; 0x61
 8001e34:	2205      	movs	r2, #5
 8001e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fdef 	bl	8005a26 <USB_HC_Halt>
 8001e48:	e04c      	b.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e60:	d11b      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2208      	movs	r2, #8
 8001e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fdc7 	bl	8005a26 <USB_HC_Halt>
 8001e98:	e024      	b.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d119      	bne.n	8001ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3361      	adds	r3, #97	; 0x61
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fda1 	bl	8005a26 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efa:	d112      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fd8d 	bl	8005a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f20:	e24e      	b.n	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f040 80df 	bne.w	80020f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d019      	beq.n	8001f76 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3348      	adds	r3, #72	; 0x48
 8001f50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0159      	lsls	r1, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	202c      	movs	r0, #44	; 0x2c
 8001f6c:	fb00 f303 	mul.w	r3, r0, r3
 8001f70:	440b      	add	r3, r1
 8001f72:	3350      	adds	r3, #80	; 0x50
 8001f74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	333f      	adds	r3, #63	; 0x3f
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d111      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fd21 	bl	8005a26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e03a      	b.n	800206e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	333f      	adds	r3, #63	; 0x3f
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d009      	beq.n	8002020 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	333f      	adds	r3, #63	; 0x3f
 800201a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800201c:	2b01      	cmp	r3, #1
 800201e:	d126      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800203e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3360      	adds	r3, #96	; 0x60
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b2d9      	uxtb	r1, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	202c      	movs	r0, #44	; 0x2c
 800205c:	fb00 f303 	mul.w	r3, r0, r3
 8002060:	4413      	add	r3, r2
 8002062:	3360      	adds	r3, #96	; 0x60
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f005 ff7f 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d12b      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3348      	adds	r3, #72	; 0x48
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	202c      	movs	r0, #44	; 0x2c
 800208c:	fb00 f202 	mul.w	r2, r0, r2
 8002090:	440a      	add	r2, r1
 8002092:	3240      	adds	r2, #64	; 0x40
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	fbb3 f3f2 	udiv	r3, r3, r2
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 818e 	beq.w	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3354      	adds	r3, #84	; 0x54
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2d8      	uxtb	r0, r3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3354      	adds	r3, #84	; 0x54
 80020c8:	4602      	mov	r2, r0
 80020ca:	701a      	strb	r2, [r3, #0]
}
 80020cc:	e178      	b.n	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3354      	adds	r3, #84	; 0x54
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2d8      	uxtb	r0, r3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3354      	adds	r3, #84	; 0x54
 80020f2:	4602      	mov	r2, r0
 80020f4:	701a      	strb	r2, [r3, #0]
}
 80020f6:	e163      	b.n	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	f040 80f6 	bne.w	80022fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3361      	adds	r3, #97	; 0x61
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d109      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3360      	adds	r3, #96	; 0x60
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e0c9      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3361      	adds	r3, #97	; 0x61
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d109      	bne.n	8002160 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	2205      	movs	r2, #5
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e0b5      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3361      	adds	r3, #97	; 0x61
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b06      	cmp	r3, #6
 8002172:	d009      	beq.n	8002188 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3361      	adds	r3, #97	; 0x61
 8002182:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002184:	2b08      	cmp	r3, #8
 8002186:	d150      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	335c      	adds	r3, #92	; 0x5c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	202c      	movs	r0, #44	; 0x2c
 80021a0:	fb00 f303 	mul.w	r3, r0, r3
 80021a4:	440b      	add	r3, r1
 80021a6:	335c      	adds	r3, #92	; 0x5c
 80021a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d912      	bls.n	80021e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3360      	adds	r3, #96	; 0x60
 80021de:	2204      	movs	r2, #4
 80021e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e2:	e073      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800220c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002214:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002228:	e050      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3361      	adds	r3, #97	; 0x61
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d122      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3360      	adds	r3, #96	; 0x60
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002266:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800226e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e023      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d119      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	335c      	adds	r3, #92	; 0x5c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	fb00 f303 	mul.w	r3, r0, r3
 80022b4:	440b      	add	r3, r1
 80022b6:	335c      	adds	r3, #92	; 0x5c
 80022b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3360      	adds	r3, #96	; 0x60
 80022c8:	2204      	movs	r2, #4
 80022ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	2302      	movs	r3, #2
 80022dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	b2d9      	uxtb	r1, r3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	202c      	movs	r0, #44	; 0x2c
 80022e8:	fb00 f303 	mul.w	r3, r0, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3360      	adds	r3, #96	; 0x60
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f005 fe39 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022fa:	e061      	b.n	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b10      	cmp	r3, #16
 8002310:	d156      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	333f      	adds	r3, #63	; 0x3f
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d111      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	335c      	adds	r3, #92	; 0x5c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fb6f 	bl	8005a26 <USB_HC_Halt>
 8002348:	e031      	b.n	80023ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	333f      	adds	r3, #63	; 0x3f
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	333f      	adds	r3, #63	; 0x3f
 800236c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236e:	2b02      	cmp	r3, #2
 8002370:	d11d      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d110      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3361      	adds	r3, #97	; 0x61
 800239a:	2203      	movs	r2, #3
 800239c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fb3c 	bl	8005a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	461a      	mov	r2, r3
 80023bc:	2310      	movs	r3, #16
 80023be:	6093      	str	r3, [r2, #8]
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11a      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2304      	movs	r3, #4
 8002408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3361      	adds	r3, #97	; 0x61
 8002418:	2206      	movs	r2, #6
 800241a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fafd 	bl	8005a26 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800242c:	e331      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b20      	cmp	r3, #32
 8002442:	d12e      	bne.n	80024a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	461a      	mov	r2, r3
 8002452:	2320      	movs	r3, #32
 8002454:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	333d      	adds	r3, #61	; 0x3d
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f040 8313 	bne.w	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	333d      	adds	r3, #61	; 0x3d
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3360      	adds	r3, #96	; 0x60
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fac3 	bl	8005a26 <USB_HC_Halt>
}
 80024a0:	e2f7      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b8:	d112      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 faa4 	bl	8005a26 <USB_HC_Halt>
}
 80024de:	e2d8      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d140      	bne.n	8002578 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	335c      	adds	r3, #92	; 0x5c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d111      	bne.n	8002542 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	333d      	adds	r3, #61	; 0x3d
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	2301      	movs	r3, #1
 8002552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fa58 	bl	8005a26 <USB_HC_Halt>
}
 8002576:	e28c      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d12c      	bne.n	80025e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2204      	movs	r2, #4
 800259e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	333d      	adds	r3, #61	; 0x3d
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fa29 	bl	8005a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	6093      	str	r3, [r2, #8]
}
 80025e6:	e254      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11a      	bne.n	8002634 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	2308      	movs	r3, #8
 800260e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3361      	adds	r3, #97	; 0x61
 800261e:	2205      	movs	r2, #5
 8002620:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f003 f9fa 	bl	8005a26 <USB_HC_Halt>
}
 8002632:	e22e      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d140      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	335c      	adds	r3, #92	; 0x5c
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3361      	adds	r3, #97	; 0x61
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	333d      	adds	r3, #61	; 0x3d
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d112      	bne.n	80026a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	333c      	adds	r3, #60	; 0x3c
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	333d      	adds	r3, #61	; 0x3d
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 f9b7 	bl	8005a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2310      	movs	r3, #16
 80026c8:	6093      	str	r3, [r2, #8]
}
 80026ca:	e1e2      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d164      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d111      	bne.n	800270e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3361      	adds	r3, #97	; 0x61
 80026f8:	2206      	movs	r2, #6
 80026fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 f98d 	bl	8005a26 <USB_HC_Halt>
 800270c:	e044      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	202c      	movs	r0, #44	; 0x2c
 8002726:	fb00 f303 	mul.w	r3, r0, r3
 800272a:	440b      	add	r3, r1
 800272c:	335c      	adds	r3, #92	; 0x5c
 800272e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	335c      	adds	r3, #92	; 0x5c
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d920      	bls.n	8002786 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	335c      	adds	r3, #92	; 0x5c
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	2204      	movs	r2, #4
 8002766:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	b2d9      	uxtb	r1, r3
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	202c      	movs	r0, #44	; 0x2c
 8002772:	fb00 f303 	mul.w	r3, r0, r3
 8002776:	4413      	add	r3, r2
 8002778:	3360      	adds	r3, #96	; 0x60
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f005 fbf4 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002784:	e008      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3360      	adds	r3, #96	; 0x60
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	6093      	str	r3, [r2, #8]
}
 80027aa:	e172      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d11b      	bne.n	80027fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3361      	adds	r3, #97	; 0x61
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 f920 	bl	8005a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f8:	6093      	str	r3, [r2, #8]
}
 80027fa:	e14a      	b.n	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	f040 813f 	bne.w	8002a92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3361      	adds	r3, #97	; 0x61
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d17d      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	333f      	adds	r3, #63	; 0x3f
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d00a      	beq.n	8002864 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	333f      	adds	r3, #63	; 0x3f
 800285c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800285e:	2b03      	cmp	r3, #3
 8002860:	f040 8100 	bne.w	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d113      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3355      	adds	r3, #85	; 0x55
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f083 0301 	eor.w	r3, r3, #1
 8002880:	b2d8      	uxtb	r0, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3355      	adds	r3, #85	; 0x55
 8002890:	4602      	mov	r2, r0
 8002892:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80e3 	bne.w	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	334c      	adds	r3, #76	; 0x4c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80d8 	beq.w	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	334c      	adds	r3, #76	; 0x4c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	202c      	movs	r0, #44	; 0x2c
 80028ca:	fb00 f202 	mul.w	r2, r0, r2
 80028ce:	440a      	add	r2, r1
 80028d0:	3240      	adds	r2, #64	; 0x40
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	202c      	movs	r0, #44	; 0x2c
 80028de:	fb00 f202 	mul.w	r2, r0, r2
 80028e2:	440a      	add	r2, r1
 80028e4:	3240      	adds	r2, #64	; 0x40
 80028e6:	8812      	ldrh	r2, [r2, #0]
 80028e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80b5 	beq.w	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3355      	adds	r3, #85	; 0x55
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2d8      	uxtb	r0, r3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3355      	adds	r3, #85	; 0x55
 800291e:	4602      	mov	r2, r0
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e09f      	b.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d109      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3360      	adds	r3, #96	; 0x60
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e08b      	b.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d109      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e077      	b.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d109      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2205      	movs	r2, #5
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e063      	b.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d009      	beq.n	80029c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3361      	adds	r3, #97	; 0x61
 80029be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d14f      	bne.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	335c      	adds	r3, #92	; 0x5c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	202c      	movs	r0, #44	; 0x2c
 80029dc:	fb00 f303 	mul.w	r3, r0, r3
 80029e0:	440b      	add	r3, r1
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d912      	bls.n	8002a20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	335c      	adds	r3, #92	; 0x5c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3360      	adds	r3, #96	; 0x60
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e021      	b.n	8002a64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	2302      	movs	r3, #2
 8002a74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	b2d9      	uxtb	r1, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	202c      	movs	r0, #44	; 0x2c
 8002a80:	fb00 f303 	mul.w	r3, r0, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3360      	adds	r3, #96	; 0x60
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f005 fa6d 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b08a      	sub	sp, #40	; 0x28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	0c5b      	lsrs	r3, r3, #17
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ace:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d004      	beq.n	8002ae0 <HCD_RXQLVL_IRQHandler+0x46>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	f000 80a9 	beq.w	8002c30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ade:	e0aa      	b.n	8002c36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a6 	beq.w	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3344      	adds	r3, #68	; 0x44
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 809b 	beq.w	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3350      	adds	r3, #80	; 0x50
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	441a      	add	r2, r3
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d87a      	bhi.n	8002c1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f002 fac8 	bl	80050d4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3344      	adds	r3, #68	; 0x44
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	441a      	add	r2, r3
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	202c      	movs	r0, #44	; 0x2c
 8002b5e:	fb00 f303 	mul.w	r3, r0, r3
 8002b62:	440b      	add	r3, r1
 8002b64:	3344      	adds	r3, #68	; 0x44
 8002b66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3350      	adds	r3, #80	; 0x50
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	440b      	add	r3, r1
 8002b88:	3350      	adds	r3, #80	; 0x50
 8002b8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	0cdb      	lsrs	r3, r3, #19
 8002b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3340      	adds	r3, #64	; 0x40
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d13c      	bne.n	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d039      	beq.n	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bde:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3354      	adds	r3, #84	; 0x54
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3354      	adds	r3, #84	; 0x54
 8002c16:	4602      	mov	r2, r0
 8002c18:	701a      	strb	r2, [r3, #0]
      break;
 8002c1a:	e00b      	b.n	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3360      	adds	r3, #96	; 0x60
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	701a      	strb	r2, [r3, #0]
      break;
 8002c2e:	e001      	b.n	8002c34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c34:	bf00      	nop
  }
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d10b      	bne.n	8002c8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 f957 	bl	8007f34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d132      	bne.n	8002cfe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d126      	bne.n	8002cf8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d113      	bne.n	8002cda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cbc:	d106      	bne.n	8002ccc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fb73 	bl	80053b0 <USB_InitFSLSPClkSel>
 8002cca:	e011      	b.n	8002cf0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fb6c 	bl	80053b0 <USB_InitFSLSPClkSel>
 8002cd8:	e00a      	b.n	8002cf0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f005 f949 	bl	8007f88 <HAL_HCD_PortEnabled_Callback>
 8002cf6:	e002      	b.n	8002cfe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f005 f953 	bl	8007fa4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d103      	bne.n	8002d10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f043 0320 	orr.w	r3, r3, #32
 8002d0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd fecc 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f001 fe56 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7fd ffae 	bl	8000f20 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	f040 80e0 	bne.w	8003194 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4970      	ldr	r1, [pc, #448]	; (80031a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa92 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0d3      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_I2C_Master_Transmit+0x50>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0cc      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d007      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2221      	movs	r2, #33	; 0x21
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2210      	movs	r2, #16
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a50      	ldr	r2, [pc, #320]	; (80031a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003064:	8979      	ldrh	r1, [r7, #10]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f9ca 	bl	8003404 <I2C_MasterRequestWrite>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003090:	e066      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fb0c 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06b      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11b      	bne.n	8003134 <HAL_I2C_Master_Transmit+0x188>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6a39      	ldr	r1, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fafc 	bl	8003736 <I2C_WaitOnBTFFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2b04      	cmp	r3, #4
 800314a:	d107      	bne.n	800315c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01a      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d194      	bne.n	8003092 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7fd feb2 	bl	8000f20 <HAL_GetTick>
 80031bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	f040 8111 	bne.w	80033f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2319      	movs	r3, #25
 80031d6:	2201      	movs	r2, #1
 80031d8:	4988      	ldr	r1, [pc, #544]	; (80033fc <HAL_I2C_IsDeviceReady+0x254>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f994 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	e104      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2C_IsDeviceReady+0x50>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0fd      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d007      	beq.n	800321e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2224      	movs	r2, #36	; 0x24
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a70      	ldr	r2, [pc, #448]	; (8003400 <HAL_I2C_IsDeviceReady+0x258>)
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003250:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f952 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d103      	bne.n	8003282 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0b6      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003294:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003296:	f7fd fe43 	bl	8000f20 <HAL_GetTick>
 800329a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032ca:	e025      	b.n	8003318 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032cc:	f7fd fe28 	bl	8000f20 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <HAL_I2C_IsDeviceReady+0x13a>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	22a0      	movs	r2, #160	; 0xa0
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2ba0      	cmp	r3, #160	; 0xa0
 8003322:	d005      	beq.n	8003330 <HAL_I2C_IsDeviceReady+0x188>
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <HAL_I2C_IsDeviceReady+0x188>
 800332a:	7dbb      	ldrb	r3, [r7, #22]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0cd      	beq.n	80032cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d129      	bne.n	800339a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2319      	movs	r3, #25
 8003372:	2201      	movs	r2, #1
 8003374:	4921      	ldr	r1, [pc, #132]	; (80033fc <HAL_I2C_IsDeviceReady+0x254>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8c6 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e036      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e02c      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2201      	movs	r2, #1
 80033bc:	490f      	ldr	r1, [pc, #60]	; (80033fc <HAL_I2C_IsDeviceReady+0x254>)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f8a2 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e012      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f4ff af32 	bcc.w	8003242 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	00100002 	.word	0x00100002
 8003400:	ffff0000 	.word	0xffff0000

08003404 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d006      	beq.n	800342e <I2C_MasterRequestWrite+0x2a>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d003      	beq.n	800342e <I2C_MasterRequestWrite+0x2a>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800342c:	d108      	bne.n	8003440 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e00b      	b.n	8003458 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	2b12      	cmp	r3, #18
 8003446:	d107      	bne.n	8003458 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f84f 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347e:	d103      	bne.n	8003488 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e035      	b.n	80034f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003494:	d108      	bne.n	80034a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	e01b      	b.n	80034e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	11db      	asrs	r3, r3, #7
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f003 0306 	and.w	r3, r3, #6
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f063 030f 	orn	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <I2C_MasterRequestWrite+0xfc>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f875 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e010      	b.n	80034f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <I2C_MasterRequestWrite+0x100>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f865 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	00010008 	.word	0x00010008
 8003504:	00010002 	.word	0x00010002

08003508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003518:	e025      	b.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d021      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fd fcfd 	bl	8000f20 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e023      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10d      	bne.n	800358c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	e00c      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0b6      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c4:	e051      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d123      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e046      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d021      	beq.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fd fc7b 	bl	8000f20 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e020      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e00b      	b.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d18d      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c0:	e02d      	b.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f878 	bl	80037b8 <I2C_IsAcknowledgeFailed>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e02d      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fd fc21 	bl	8000f20 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e007      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d1ca      	bne.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003742:	e02d      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f837 	bl	80037b8 <I2C_IsAcknowledgeFailed>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e02d      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d021      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7fd fbe0 	bl	8000f20 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d1ca      	bne.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d11b      	bne.n	8003808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e128      	b.n	8003a7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a90      	ldr	r2, [pc, #576]	; (8003a84 <HAL_I2S_Init+0x26c>)
 8003842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd f997 	bl	8000b78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d060      	beq.n	8003938 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800387e:	2310      	movs	r3, #16
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e001      	b.n	8003888 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b20      	cmp	r3, #32
 800388e:	d802      	bhi.n	8003896 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003896:	2001      	movs	r0, #1
 8003898:	f001 f9c4 	bl	8004c24 <HAL_RCCEx_GetPeriphCLKFreq>
 800389c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a6:	d125      	bne.n	80038f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	3305      	adds	r3, #5
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	e01f      	b.n	8003912 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	3305      	adds	r3, #5
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e00e      	b.n	8003912 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	3305      	adds	r3, #5
 8003910:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_I2S_Init+0x270>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003938:	2302      	movs	r3, #2
 800393a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d902      	bls.n	800394c <HAL_I2S_Init+0x134>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2bff      	cmp	r3, #255	; 0xff
 800394a:	d907      	bls.n	800395c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	f043 0210 	orr.w	r2, r3, #16
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e08f      	b.n	8003a7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	ea42 0103 	orr.w	r1, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	430a      	orrs	r2, r1
 800396e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800397a:	f023 030f 	bic.w	r3, r3, #15
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6851      	ldr	r1, [r2, #4]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68d2      	ldr	r2, [r2, #12]
 800398c:	4311      	orrs	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6992      	ldr	r2, [r2, #24]
 8003992:	430a      	orrs	r2, r1
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d161      	bne.n	8003a6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_I2S_Init+0x274>)
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a37      	ldr	r2, [pc, #220]	; (8003a90 <HAL_I2S_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_I2S_Init+0x1a4>
 80039b8:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_I2S_Init+0x27c>)
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x1a8>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	4932      	ldr	r1, [pc, #200]	; (8003a90 <HAL_I2S_Init+0x278>)
 80039c8:	428a      	cmp	r2, r1
 80039ca:	d101      	bne.n	80039d0 <HAL_I2S_Init+0x1b8>
 80039cc:	4a31      	ldr	r2, [pc, #196]	; (8003a94 <HAL_I2S_Init+0x27c>)
 80039ce:	e001      	b.n	80039d4 <HAL_I2S_Init+0x1bc>
 80039d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <HAL_I2S_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_I2S_Init+0x1d4>
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_I2S_Init+0x27c>)
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x1d8>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	2202      	movs	r2, #2
 80039f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <HAL_I2S_Init+0x278>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_I2S_Init+0x1ea>
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_I2S_Init+0x27c>)
 8003a00:	e001      	b.n	8003a06 <HAL_I2S_Init+0x1ee>
 8003a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d003      	beq.n	8003a1c <HAL_I2S_Init+0x204>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e001      	b.n	8003a28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a32:	4313      	orrs	r3, r2
 8003a34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a46:	4313      	orrs	r3, r2
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <HAL_I2S_Init+0x278>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2S_Init+0x24c>
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_I2S_Init+0x27c>)
 8003a62:	e001      	b.n	8003a68 <HAL_I2S_Init+0x250>
 8003a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a68:	897a      	ldrh	r2, [r7, #10]
 8003a6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08003b8f 	.word	0x08003b8f
 8003a88:	cccccccd 	.word	0xcccccccd
 8003a8c:	08003ca5 	.word	0x08003ca5
 8003a90:	40003800 	.word	0x40003800
 8003a94:	40003400 	.word	0x40003400

08003a98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffb8 	bl	8003a98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	b292      	uxth	r2, r2
 8003b44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10e      	bne.n	8003b86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff93 	bl	8003aac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d13a      	bne.n	8003c20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d109      	bne.n	8003bc8 <I2S_IRQHandler+0x3a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d102      	bne.n	8003bc8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffb4 	bl	8003b30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d126      	bne.n	8003c20 <I2S_IRQHandler+0x92>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d11f      	bne.n	8003c20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff50 	bl	8003ac0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d136      	bne.n	8003c9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d109      	bne.n	8003c4a <I2S_IRQHandler+0xbc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d102      	bne.n	8003c4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff45 	bl	8003ad4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d122      	bne.n	8003c9a <I2S_IRQHandler+0x10c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d11b      	bne.n	8003c9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0204 	orr.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff13 	bl	8003ac0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a92      	ldr	r2, [pc, #584]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cbe:	4b92      	ldr	r3, [pc, #584]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cc0:	e001      	b.n	8003cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cdc:	4b8a      	ldr	r3, [pc, #552]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cde:	e001      	b.n	8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf0:	d004      	beq.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8099 	bne.w	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d107      	bne.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f925 	bl	8003f60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9c8 	bl	80040c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d13a      	bne.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d035      	beq.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6e      	ldr	r2, [pc, #440]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d4e:	4b6e      	ldr	r3, [pc, #440]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4969      	ldr	r1, [pc, #420]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d5e:	428b      	cmp	r3, r1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d62:	4b69      	ldr	r3, [pc, #420]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fe88 	bl	8003ac0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	f040 80c3 	bne.w	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80bd 	beq.w	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a49      	ldr	r2, [pc, #292]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003de2:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4944      	ldr	r1, [pc, #272]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003df6:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df8:	e001      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fe4a 	bl	8003ac0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e2c:	e089      	b.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d107      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8be 	bl	8003fc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8fd 	bl	800405c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d12f      	bne.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02a      	beq.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e92:	e001      	b.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4919      	ldr	r1, [pc, #100]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea6:	e001      	b.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fdfa 	bl	8003ac0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d136      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d031      	beq.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eec:	e001      	b.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4902      	ldr	r1, [pc, #8]	; (8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efa:	428b      	cmp	r3, r1
 8003efc:	d106      	bne.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003efe:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f00:	e006      	b.n	8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f02:	bf00      	nop
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40003400 	.word	0x40003400
 8003f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fdc0 	bl	8003ac0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f40:	e000      	b.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f42:	bf00      	nop
}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	1c99      	adds	r1, r3, #2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6251      	str	r1, [r2, #36]	; 0x24
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ffc9 	bl	8003f4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c99      	adds	r1, r3, #2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6251      	str	r1, [r2, #36]	; 0x24
 8003fd6:	8819      	ldrh	r1, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <I2SEx_TxISR_I2SExt+0x90>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <I2SEx_TxISR_I2SExt+0x22>
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <I2SEx_TxISR_I2SExt+0x94>)
 8003fe4:	e001      	b.n	8003fea <I2SEx_TxISR_I2SExt+0x26>
 8003fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fea:	460a      	mov	r2, r1
 8003fec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d121      	bne.n	800404a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <I2SEx_TxISR_I2SExt+0x90>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <I2SEx_TxISR_I2SExt+0x50>
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <I2SEx_TxISR_I2SExt+0x94>)
 8004012:	e001      	b.n	8004018 <I2SEx_TxISR_I2SExt+0x54>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	490d      	ldr	r1, [pc, #52]	; (8004054 <I2SEx_TxISR_I2SExt+0x90>)
 8004020:	428b      	cmp	r3, r1
 8004022:	d101      	bne.n	8004028 <I2SEx_TxISR_I2SExt+0x64>
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <I2SEx_TxISR_I2SExt+0x94>)
 8004026:	e001      	b.n	800402c <I2SEx_TxISR_I2SExt+0x68>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004030:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff81 	bl	8003f4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40003800 	.word	0x40003800
 8004058:	40003400 	.word	0x40003400

0800405c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68d8      	ldr	r0, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	1c99      	adds	r1, r3, #2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004074:	b282      	uxth	r2, r0
 8004076:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d113      	bne.n	80040b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800409e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff4a 	bl	8003f4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a20      	ldr	r2, [pc, #128]	; (8004150 <I2SEx_RxISR_I2SExt+0x90>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <I2SEx_RxISR_I2SExt+0x16>
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <I2SEx_RxISR_I2SExt+0x94>)
 80040d4:	e001      	b.n	80040da <I2SEx_RxISR_I2SExt+0x1a>
 80040d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040da:	68d8      	ldr	r0, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	1c99      	adds	r1, r3, #2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040e6:	b282      	uxth	r2, r0
 80040e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d121      	bne.n	8004146 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a12      	ldr	r2, [pc, #72]	; (8004150 <I2SEx_RxISR_I2SExt+0x90>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <I2SEx_RxISR_I2SExt+0x50>
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <I2SEx_RxISR_I2SExt+0x94>)
 800410e:	e001      	b.n	8004114 <I2SEx_RxISR_I2SExt+0x54>
 8004110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	490d      	ldr	r1, [pc, #52]	; (8004150 <I2SEx_RxISR_I2SExt+0x90>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d101      	bne.n	8004124 <I2SEx_RxISR_I2SExt+0x64>
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <I2SEx_RxISR_I2SExt+0x94>)
 8004122:	e001      	b.n	8004128 <I2SEx_RxISR_I2SExt+0x68>
 8004124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004128:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff03 	bl	8003f4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40003800 	.word	0x40003800
 8004154:	40003400 	.word	0x40003400

08004158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e267      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d075      	beq.n	8004262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004176:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00c      	beq.n	800419c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4b85      	ldr	r3, [pc, #532]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418a:	2b08      	cmp	r3, #8
 800418c:	d112      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419a:	d10b      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05b      	beq.n	8004260 <HAL_RCC_OscConfig+0x108>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d157      	bne.n	8004260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e242      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_OscConfig+0x74>
 80041be:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a75      	ldr	r2, [pc, #468]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e01d      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x98>
 80041d6:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b6d      	ldr	r3, [pc, #436]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041f0:	4b69      	ldr	r3, [pc, #420]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a68      	ldr	r2, [pc, #416]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fc fe86 	bl	8000f20 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004218:	f7fc fe82 	bl	8000f20 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e207      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0xc0>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fc fe72 	bl	8000f20 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fc fe6e 	bl	8000f20 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1f3      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	4b51      	ldr	r3, [pc, #324]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0xe8>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d063      	beq.n	8004336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426e:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b44      	ldr	r3, [pc, #272]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1c7      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4937      	ldr	r1, [pc, #220]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e03a      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x244>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fc fe27 	bl	8000f20 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fc fe23 	bl	8000f20 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1a8      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x244>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fc fe06 	bl	8000f20 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004318:	f7fc fe02 	bl	8000f20 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e187      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d036      	beq.n	80043b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x248>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fc fde6 	bl	8000f20 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004358:	f7fc fde2 	bl	8000f20 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e167      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x240>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x200>
 8004376:	e01b      	b.n	80043b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_OscConfig+0x248>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fc fdcf 	bl	8000f20 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	e00e      	b.n	80043a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004386:	f7fc fdcb 	bl	8000f20 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d907      	bls.n	80043a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e150      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
 8004398:	40023800 	.word	0x40023800
 800439c:	42470000 	.word	0x42470000
 80043a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8097 	beq.w	80044ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	4b7d      	ldr	r3, [pc, #500]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a7c      	ldr	r2, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b77      	ldr	r3, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x474>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b74      	ldr	r3, [pc, #464]	; (80045cc <HAL_RCC_OscConfig+0x474>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a73      	ldr	r2, [pc, #460]	; (80045cc <HAL_RCC_OscConfig+0x474>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fc fd8b 	bl	8000f20 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fc fd87 	bl	8000f20 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e10c      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x474>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x2ea>
 8004434:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a63      	ldr	r2, [pc, #396]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x324>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x30c>
 800444a:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	4b5c      	ldr	r3, [pc, #368]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a5b      	ldr	r2, [pc, #364]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0x324>
 8004464:	4b58      	ldr	r3, [pc, #352]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a57      	ldr	r2, [pc, #348]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
 8004470:	4b55      	ldr	r3, [pc, #340]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a54      	ldr	r2, [pc, #336]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc fd4c 	bl	8000f20 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fc fd48 	bl	8000f20 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0cb      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCC_OscConfig+0x334>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7fc fd36 	bl	8000f20 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fc fd32 	bl	8000f20 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0b5      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ee      	bne.n	80044b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a1 	beq.w	8004638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f6:	4b34      	ldr	r3, [pc, #208]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d05c      	beq.n	80045bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d141      	bne.n	800458e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_OscConfig+0x478>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fc fd06 	bl	8000f20 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004518:	f7fc fd02 	bl	8000f20 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e087      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	491b      	ldr	r1, [pc, #108]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_RCC_OscConfig+0x478>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fc fcdb 	bl	8000f20 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456e:	f7fc fcd7 	bl	8000f20 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e05c      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x416>
 800458c:	e054      	b.n	8004638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_RCC_OscConfig+0x478>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fc fcc4 	bl	8000f20 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459c:	f7fc fcc0 	bl	8000f20 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e045      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_OscConfig+0x470>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x444>
 80045ba:	e03d      	b.n	8004638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e038      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40007000 	.word	0x40007000
 80045d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4ec>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d028      	beq.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d121      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d11a      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800460a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	4293      	cmp	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	3b01      	subs	r3, #1
 800461e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fc fbf2 	bl	8000f20 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fc fbee 	bl	8000f20 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f821 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fb52 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	08008664 	.word	0x08008664
 800480c:	20000000 	.word	0x20000000
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004818:	b094      	sub	sp, #80	; 0x50
 800481a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	647b      	str	r3, [r7, #68]	; 0x44
 8004820:	2300      	movs	r3, #0
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004824:	2300      	movs	r3, #0
 8004826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482c:	4b79      	ldr	r3, [pc, #484]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d00d      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x40>
 8004838:	2b08      	cmp	r3, #8
 800483a:	f200 80e1 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x34>
 8004842:	2b04      	cmp	r3, #4
 8004844:	d003      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x3a>
 8004846:	e0db      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004848:	4b73      	ldr	r3, [pc, #460]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800484c:	e0db      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800484e:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004852:	e0d8      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800485e:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d063      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	2200      	movs	r2, #0
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
 8004874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
 8004882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	f04f 0000 	mov.w	r0, #0
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	0159      	lsls	r1, r3, #5
 8004894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004898:	0150      	lsls	r0, r2, #5
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4621      	mov	r1, r4
 80048a0:	1a51      	subs	r1, r2, r1
 80048a2:	6139      	str	r1, [r7, #16]
 80048a4:	4629      	mov	r1, r5
 80048a6:	eb63 0301 	sbc.w	r3, r3, r1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b8:	4659      	mov	r1, fp
 80048ba:	018b      	lsls	r3, r1, #6
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048c2:	4651      	mov	r1, sl
 80048c4:	018a      	lsls	r2, r1, #6
 80048c6:	4651      	mov	r1, sl
 80048c8:	ebb2 0801 	subs.w	r8, r2, r1
 80048cc:	4659      	mov	r1, fp
 80048ce:	eb63 0901 	sbc.w	r9, r3, r1
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048e6:	4690      	mov	r8, r2
 80048e8:	4699      	mov	r9, r3
 80048ea:	4623      	mov	r3, r4
 80048ec:	eb18 0303 	adds.w	r3, r8, r3
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	462b      	mov	r3, r5
 80048f4:	eb49 0303 	adc.w	r3, r9, r3
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004906:	4629      	mov	r1, r5
 8004908:	024b      	lsls	r3, r1, #9
 800490a:	4621      	mov	r1, r4
 800490c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004910:	4621      	mov	r1, r4
 8004912:	024a      	lsls	r2, r1, #9
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491a:	2200      	movs	r2, #0
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 800491e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004924:	f7fb fc50 	bl	80001c8 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	e058      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b38      	ldr	r3, [pc, #224]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	2200      	movs	r2, #0
 800493a:	4618      	mov	r0, r3
 800493c:	4611      	mov	r1, r2
 800493e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	0159      	lsls	r1, r3, #5
 800495a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800495e:	0150      	lsls	r0, r2, #5
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4641      	mov	r1, r8
 8004966:	ebb2 0a01 	subs.w	sl, r2, r1
 800496a:	4649      	mov	r1, r9
 800496c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800497c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004984:	ebb2 040a 	subs.w	r4, r2, sl
 8004988:	eb63 050b 	sbc.w	r5, r3, fp
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	00eb      	lsls	r3, r5, #3
 8004996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499a:	00e2      	lsls	r2, r4, #3
 800499c:	4614      	mov	r4, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	18e3      	adds	r3, r4, r3
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	464b      	mov	r3, r9
 80049a8:	eb45 0303 	adc.w	r3, r5, r3
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ba:	4629      	mov	r1, r5
 80049bc:	028b      	lsls	r3, r1, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c4:	4621      	mov	r1, r4
 80049c6:	028a      	lsls	r2, r1, #10
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ce:	2200      	movs	r2, #0
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	61fa      	str	r2, [r7, #28]
 80049d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d8:	f7fb fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3750      	adds	r7, #80	; 0x50
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	007a1200 	.word	0x007a1200

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000000 	.word	0x20000000

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a3c:	f7ff fff0 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0a9b      	lsrs	r3, r3, #10
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	08008674 	.word	0x08008674

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d035      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a88:	4b62      	ldr	r3, [pc, #392]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fa47 	bl	8000f20 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a96:	f7fc fa43 	bl	8000f20 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0b0      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	019a      	lsls	r2, r3, #6
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	071b      	lsls	r3, r3, #28
 8004ac0:	4955      	ldr	r1, [pc, #340]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac8:	4b52      	ldr	r3, [pc, #328]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fa27 	bl	8000f20 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ad6:	f7fc fa23 	bl	8000f20 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e090      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8083 	beq.w	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a43      	ldr	r2, [pc, #268]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2a:	f7fc f9f9 	bl	8000f20 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fc f9f5 	bl	8000f20 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e062      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b44:	4b35      	ldr	r3, [pc, #212]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b50:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02f      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d028      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b6e:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7e:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b84:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d114      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fc f9c3 	bl	8000f20 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fc f9bf 	bl	8000f20 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e02a      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ee      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be2:	490d      	ldr	r1, [pc, #52]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
 8004be8:	e005      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bf4:	6093      	str	r3, [r2, #8]
 8004bf6:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c02:	4905      	ldr	r1, [pc, #20]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	42470068 	.word	0x42470068
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470e40 	.word	0x42470e40

08004c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d13e      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c42:	4b23      	ldr	r3, [pc, #140]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d12f      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c5a:	617b      	str	r3, [r7, #20]
          break;
 8004c5c:	e02f      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6a:	d108      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c74:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	e007      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c86:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c94:	099b      	lsrs	r3, r3, #6
 8004c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca8:	0f1b      	lsrs	r3, r3, #28
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
          break;
 8004cb6:	e002      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
          break;
 8004cbc:	bf00      	nop
        }
      }
      break;
 8004cbe:	bf00      	nop
    }
  }
  return frequency;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	00bb8000 	.word	0x00bb8000
 8004cd8:	007a1200 	.word	0x007a1200
 8004cdc:	00f42400 	.word	0x00f42400

08004ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07b      	b.n	8004dea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d02:	d009      	beq.n	8004d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
 8004d0a:	e005      	b.n	8004d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fb ffa0 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0104 	and.w	r1, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 0210 	and.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df2:	b084      	sub	sp, #16
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	f107 001c 	add.w	r0, r7, #28
 8004e00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d122      	bne.n	8004e50 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9bf 	bl	80051c8 <USB_CoreReset>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	e01a      	b.n	8004e86 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9b3 	bl	80051c8 <USB_CoreReset>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
 8004e78:	e005      	b.n	8004e86 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10b      	bne.n	8004ea4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f043 0206 	orr.w	r2, r3, #6
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb0:	b004      	add	sp, #16
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d115      	bne.n	8004f46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7fc f806 	bl	8000f38 <HAL_Delay>
      ms++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f939 	bl	80051aa <USB_GetMode>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d01e      	beq.n	8004f7c <USB_SetCurrentMode+0x84>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b31      	cmp	r3, #49	; 0x31
 8004f42:	d9f0      	bls.n	8004f26 <USB_SetCurrentMode+0x2e>
 8004f44:	e01a      	b.n	8004f7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d115      	bne.n	8004f78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f7fb ffed 	bl	8000f38 <HAL_Delay>
      ms++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f920 	bl	80051aa <USB_GetMode>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <USB_SetCurrentMode+0x84>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b31      	cmp	r3, #49	; 0x31
 8004f74:	d9f0      	bls.n	8004f58 <USB_SetCurrentMode+0x60>
 8004f76:	e001      	b.n	8004f7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e005      	b.n	8004f88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b32      	cmp	r3, #50	; 0x32
 8004f80:	d101      	bne.n	8004f86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <USB_FlushTxFifo+0x64>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e01b      	b.n	8004fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	daf2      	bge.n	8004f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	019b      	lsls	r3, r3, #6
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <USB_FlushTxFifo+0x64>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3301      	adds	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a11      	ldr	r2, [pc, #68]	; (8005054 <USB_FlushRxFifo+0x5c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e018      	b.n	8005048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	daf2      	bge.n	8005004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2210      	movs	r2, #16
 8005026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a08      	ldr	r2, [pc, #32]	; (8005054 <USB_FlushRxFifo+0x5c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e006      	b.n	8005048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b10      	cmp	r3, #16
 8005044:	d0f0      	beq.n	8005028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	00030d40 	.word	0x00030d40

08005058 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	460b      	mov	r3, r1
 8005068:	71fb      	strb	r3, [r7, #7]
 800506a:	4613      	mov	r3, r2
 800506c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d123      	bne.n	80050c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800507e:	88bb      	ldrh	r3, [r7, #4]
 8005080:	3303      	adds	r3, #3
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e018      	b.n	80050be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	031a      	lsls	r2, r3, #12
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	461a      	mov	r2, r3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3301      	adds	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3e2      	bcc.n	800508c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3724      	adds	r7, #36	; 0x24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b08b      	sub	sp, #44	; 0x2c
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e014      	b.n	800512a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	601a      	str	r2, [r3, #0]
    pDest++;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	3301      	adds	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	3301      	adds	r3, #1
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	3301      	adds	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	3301      	adds	r3, #1
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	429a      	cmp	r2, r3
 8005130:	d3e6      	bcc.n	8005100 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005132:	8bfb      	ldrh	r3, [r7, #30]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01e      	beq.n	8005176 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005142:	461a      	mov	r2, r3
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
 8005158:	b2da      	uxtb	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	701a      	strb	r2, [r3, #0]
      i++;
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	3301      	adds	r3, #1
 8005162:	623b      	str	r3, [r7, #32]
      pDest++;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	3301      	adds	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800516a:	8bfb      	ldrh	r3, [r7, #30]
 800516c:	3b01      	subs	r3, #1
 800516e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005170:	8bfb      	ldrh	r3, [r7, #30]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ea      	bne.n	800514c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005178:	4618      	mov	r0, r3
 800517a:	372c      	adds	r7, #44	; 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0301 	and.w	r3, r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <USB_CoreReset+0x64>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e01b      	b.n	800521e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	daf2      	bge.n	80051d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <USB_CoreReset+0x64>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d0f0      	beq.n	80051fe <USB_CoreReset+0x36>

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	00030d40 	.word	0x00030d40

08005230 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005230:	b084      	sub	sp, #16
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800523e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005250:	461a      	mov	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d018      	beq.n	80052b8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d10a      	bne.n	80052a2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e014      	b.n	80052cc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e009      	b.n	80052cc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c6:	f023 0304 	bic.w	r3, r3, #4
 80052ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052cc:	2110      	movs	r1, #16
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fe5e 	bl	8004f90 <USB_FlushTxFifo>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fe8a 	bl	8004ff8 <USB_FlushRxFifo>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e015      	b.n	8005320 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 33ff 	mov.w	r3, #4294967295
 8005306:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	429a      	cmp	r2, r3
 8005326:	d3e5      	bcc.n	80052f4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <USB_HostInit+0x16c>)
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <USB_HostInit+0x170>)
 8005354:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005358:	e009      	b.n	800536e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <USB_HostInit+0x174>)
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <USB_HostInit+0x178>)
 800536a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f043 0210 	orr.w	r2, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <USB_HostInit+0x17c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005398:	b004      	add	sp, #16
 800539a:	4770      	bx	lr
 800539c:	01000200 	.word	0x01000200
 80053a0:	00e00300 	.word	0x00e00300
 80053a4:	00600080 	.word	0x00600080
 80053a8:	004000e0 	.word	0x004000e0
 80053ac:	a3200008 	.word	0xa3200008

080053b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f8:	461a      	mov	r2, r3
 80053fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053fe:	6053      	str	r3, [r2, #4]
 8005400:	e009      	b.n	8005416 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d106      	bne.n	8005416 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540e:	461a      	mov	r2, r3
 8005410:	f241 7370 	movw	r3, #6000	; 0x1770
 8005414:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005444:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800544e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005452:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005454:	2064      	movs	r0, #100	; 0x64
 8005456:	f7fb fd6f 	bl	8000f38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005466:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005468:	200a      	movs	r0, #10
 800546a:	f7fb fd65 	bl	8000f38 <HAL_Delay>

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800549c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <USB_DriveVbus+0x44>
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d106      	bne.n	80054bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d109      	bne.n	80054dc <USB_DriveVbus+0x64>
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	0c5b      	lsrs	r3, r3, #17
 8005508:	f003 0303 	and.w	r3, r3, #3
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	b29b      	uxth	r3, r3
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4603      	mov	r3, r0
 800554c:	70fb      	strb	r3, [r7, #3]
 800554e:	460b      	mov	r3, r1
 8005550:	70bb      	strb	r3, [r7, #2]
 8005552:	4613      	mov	r3, r2
 8005554:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005572:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005576:	2b03      	cmp	r3, #3
 8005578:	d87e      	bhi.n	8005678 <USB_HC_Init+0x13c>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <USB_HC_Init+0x44>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	08005591 	.word	0x08005591
 8005584:	0800563b 	.word	0x0800563b
 8005588:	08005591 	.word	0x08005591
 800558c:	080055fd 	.word	0x080055fd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	f240 439d 	movw	r3, #1181	; 0x49d
 80055a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da10      	bge.n	80055ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80055cc:	e057      	b.n	800567e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d051      	beq.n	800567e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055f8:	60d3      	str	r3, [r2, #12]
      break;
 80055fa:	e040      	b.n	800567e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005608:	461a      	mov	r2, r3
 800560a:	f240 639d 	movw	r3, #1693	; 0x69d
 800560e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005610:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da34      	bge.n	8005682 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	440a      	add	r2, r1
 800562e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005636:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005638:	e023      	b.n	8005682 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	461a      	mov	r2, r3
 8005648:	f240 2325 	movw	r3, #549	; 0x225
 800564c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800564e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da17      	bge.n	8005686 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005674:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005676:	e006      	b.n	8005686 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77fb      	strb	r3, [r7, #31]
      break;
 800567c:	e004      	b.n	8005688 <USB_HC_Init+0x14c>
      break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <USB_HC_Init+0x14c>
      break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <USB_HC_Init+0x14c>
      break;
 8005686:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4413      	add	r3, r2
 8005690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	440a      	add	r2, r1
 800569e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a2:	f043 0302 	orr.w	r3, r3, #2
 80056a6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	6939      	ldr	r1, [r7, #16]
 80056be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056c2:	4313      	orrs	r3, r2
 80056c4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da03      	bge.n	80056e2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e001      	b.n	80056e6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff feff 	bl	80054ea <USB_GetHostSpeed>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d106      	bne.n	8005704 <USB_HC_Init+0x1c8>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d003      	beq.n	8005704 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e001      	b.n	8005708 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005708:	787b      	ldrb	r3, [r7, #1]
 800570a:	059b      	lsls	r3, r3, #22
 800570c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005710:	78bb      	ldrb	r3, [r7, #2]
 8005712:	02db      	lsls	r3, r3, #11
 8005714:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005718:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800571a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800571e:	049b      	lsls	r3, r3, #18
 8005720:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005724:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005726:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005728:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800572c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	0159      	lsls	r1, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	440b      	add	r3, r1
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005744:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005746:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800574a:	2b03      	cmp	r3, #3
 800574c:	d003      	beq.n	8005756 <USB_HC_Init+0x21a>
 800574e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10f      	bne.n	8005776 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	440a      	add	r2, r1
 800576c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005774:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005776:	7ffb      	ldrb	r3, [r7, #31]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08c      	sub	sp, #48	; 0x30
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800579c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02d      	beq.n	8005806 <USB_HC_StartXfer+0x86>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	791b      	ldrb	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d129      	bne.n	8005806 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d117      	bne.n	80057e8 <USB_HC_StartXfer+0x68>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	79db      	ldrb	r3, [r3, #7]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <USB_HC_StartXfer+0x48>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	79db      	ldrb	r3, [r3, #7]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d10f      	bne.n	80057e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <USB_HC_StartXfer+0x86>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	795b      	ldrb	r3, [r3, #5]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	4619      	mov	r1, r3
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fa0f 	bl	8005c20 <USB_DoPing>
      return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e0f8      	b.n	80059f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d018      	beq.n	8005840 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	8912      	ldrh	r2, [r2, #8]
 8005816:	4413      	add	r3, r2
 8005818:	3b01      	subs	r3, #1
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	8912      	ldrh	r2, [r2, #8]
 800581e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005822:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005826:	8b7b      	ldrh	r3, [r7, #26]
 8005828:	429a      	cmp	r2, r3
 800582a:	d90b      	bls.n	8005844 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800582c:	8b7b      	ldrh	r3, [r7, #26]
 800582e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	8912      	ldrh	r2, [r2, #8]
 8005836:	fb03 f202 	mul.w	r2, r3, r2
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	611a      	str	r2, [r3, #16]
 800583e:	e001      	b.n	8005844 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005840:	2301      	movs	r3, #1
 8005842:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800584c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	8912      	ldrh	r2, [r2, #8]
 8005852:	fb03 f202 	mul.w	r2, r3, r2
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	e003      	b.n	8005864 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800586c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800586e:	04d9      	lsls	r1, r3, #19
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <USB_HC_StartXfer+0x280>)
 8005872:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005874:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	7a9b      	ldrb	r3, [r3, #10]
 800587a:	075b      	lsls	r3, r3, #29
 800587c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005880:	69f9      	ldr	r1, [r7, #28]
 8005882:	0148      	lsls	r0, r1, #5
 8005884:	6a39      	ldr	r1, [r7, #32]
 8005886:	4401      	add	r1, r0
 8005888:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800588c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800588e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	68d9      	ldr	r1, [r3, #12]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	460a      	mov	r2, r1
 80058a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	7e7b      	ldrb	r3, [r7, #25]
 80058f2:	075b      	lsls	r3, r3, #29
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	6a39      	ldr	r1, [r7, #32]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005900:	4313      	orrs	r3, r2
 8005902:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	4413      	add	r3, r2
 800590c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800591a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e003      	b.n	8005936 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005934:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800593c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	461a      	mov	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e04e      	b.n	80059f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d149      	bne.n	80059f6 <USB_HC_StartXfer+0x276>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d045      	beq.n	80059f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	79db      	ldrb	r3, [r3, #7]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d830      	bhi.n	80059d4 <USB_HC_StartXfer+0x254>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USB_HC_StartXfer+0x1f8>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005989 	.word	0x08005989
 800597c:	080059ad 	.word	0x080059ad
 8005980:	08005989 	.word	0x08005989
 8005984:	080059ad 	.word	0x080059ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	3303      	adds	r3, #3
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005992:	8afa      	ldrh	r2, [r7, #22]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	b29b      	uxth	r3, r3
 800599a:	429a      	cmp	r2, r3
 800599c:	d91c      	bls.n	80059d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059aa:	e015      	b.n	80059d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	3303      	adds	r3, #3
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059b6:	8afa      	ldrh	r2, [r7, #22]
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d90a      	bls.n	80059dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80059d2:	e003      	b.n	80059dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <USB_HC_StartXfer+0x25e>
        break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <USB_HC_StartXfer+0x25e>
        break;
 80059dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785a      	ldrb	r2, [r3, #1]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2000      	movs	r0, #0
 80059ee:	9000      	str	r0, [sp, #0]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff fb31 	bl	8005058 <USB_WritePacket>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3728      	adds	r7, #40	; 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	1ff80000 	.word	0x1ff80000

08005a04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	b29b      	uxth	r3, r3
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b089      	sub	sp, #36	; 0x24
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0c9b      	lsrs	r3, r3, #18
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0fdb      	lsrs	r3, r3, #31
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d104      	bne.n	8005a80 <USB_HC_Halt+0x5a>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e0c8      	b.n	8005c12 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <USB_HC_Halt+0x66>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d163      	bne.n	8005b54 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aaa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 80ab 	bne.w	8005c10 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d133      	bne.n	8005b2e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ae4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b12:	d81d      	bhi.n	8005b50 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2a:	d0ec      	beq.n	8005b06 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b2c:	e070      	b.n	8005c10 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b4e:	e05f      	b.n	8005c10 <USB_HC_Halt+0x1ea>
            break;
 8005b50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b52:	e05d      	b.n	8005c10 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d133      	bne.n	8005bec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd0:	d81d      	bhi.n	8005c0e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be8:	d0ec      	beq.n	8005bc4 <USB_HC_Halt+0x19e>
 8005bea:	e011      	b.n	8005c10 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e000      	b.n	8005c10 <USB_HC_Halt+0x1ea>
          break;
 8005c0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3724      	adds	r7, #36	; 0x24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c34:	2301      	movs	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	04da      	lsls	r2, r3, #19
 8005c3c:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <USB_DoPing+0x74>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	1ff80000 	.word	0x1ff80000

08005c98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff f912 	bl	8004ed6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb2:	2110      	movs	r1, #16
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f96b 	bl	8004f90 <USB_FlushTxFifo>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff f997 	bl	8004ff8 <USB_FlushRxFifo>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e01f      	b.n	8005d1a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d00:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	461a      	mov	r2, r3
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3301      	adds	r3, #1
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d9dc      	bls.n	8005cda <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e034      	b.n	8005d90 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6c:	d80c      	bhi.n	8005d88 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d84:	d0ec      	beq.n	8005d60 <USB_StopHost+0xc8>
 8005d86:	e000      	b.n	8005d8a <USB_StopHost+0xf2>
        break;
 8005d88:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d9c7      	bls.n	8005d26 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295
 8005daa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff f881 	bl	8004eb4 <USB_EnableGlobalInt>

  return ret;
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af04      	add	r7, sp, #16
 8005dc2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	2102      	movs	r1, #2
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fc66 	bl	800669c <USBH_FindInterface>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2bff      	cmp	r3, #255	; 0xff
 8005dd8:	d002      	beq.n	8005de0 <USBH_CDC_InterfaceInit+0x24>
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d901      	bls.n	8005de4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005de0:	2302      	movs	r3, #2
 8005de2:	e13d      	b.n	8006060 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fc3b 	bl	8006664 <USBH_SelectInterface>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e131      	b.n	8006060 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e02:	2050      	movs	r0, #80	; 0x50
 8005e04:	f002 fafa 	bl	80083fc <malloc>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e11f      	b.n	8006060 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e20:	2250      	movs	r2, #80	; 0x50
 8005e22:	2100      	movs	r1, #0
 8005e24:	68b8      	ldr	r0, [r7, #8]
 8005e26:	f002 faf9 	bl	800841c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	211a      	movs	r1, #26
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da15      	bge.n	8005e6e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	211a      	movs	r1, #26
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e52:	781a      	ldrb	r2, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	211a      	movs	r1, #26
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 ff2c 	bl	8007cd2 <USBH_AllocPipe>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	7819      	ldrb	r1, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	7858      	ldrb	r0, [r3, #1]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	8952      	ldrh	r2, [r2, #10]
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	9201      	str	r2, [sp, #4]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fee4 	bl	8007c74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f002 f9f3 	bl	80082a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	210a      	movs	r1, #10
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fbeb 	bl	800669c <USBH_FindInterface>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2bff      	cmp	r3, #255	; 0xff
 8005ece:	d002      	beq.n	8005ed6 <USBH_CDC_InterfaceInit+0x11a>
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d901      	bls.n	8005eda <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0c2      	b.n	8006060 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	211a      	movs	r1, #26
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da16      	bge.n	8005f20 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	211a      	movs	r1, #26
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	211a      	movs	r1, #26
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	835a      	strh	r2, [r3, #26]
 8005f1e:	e015      	b.n	8005f4c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	211a      	movs	r1, #26
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	211a      	movs	r1, #26
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f46:	881a      	ldrh	r2, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	211a      	movs	r1, #26
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da16      	bge.n	8005f92 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	211a      	movs	r1, #26
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	211a      	movs	r1, #26
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f8a:	881a      	ldrh	r2, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	835a      	strh	r2, [r3, #26]
 8005f90:	e015      	b.n	8005fbe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	211a      	movs	r1, #26
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	211a      	movs	r1, #26
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	7b9b      	ldrb	r3, [r3, #14]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fe84 	bl	8007cd2 <USBH_AllocPipe>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	7bdb      	ldrb	r3, [r3, #15]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fe7a 	bl	8007cd2 <USBH_AllocPipe>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	7b59      	ldrb	r1, [r3, #13]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	7b98      	ldrb	r0, [r3, #14]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	8b12      	ldrh	r2, [r2, #24]
 8005ffe:	9202      	str	r2, [sp, #8]
 8006000:	2202      	movs	r2, #2
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4623      	mov	r3, r4
 8006008:	4602      	mov	r2, r0
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fe32 	bl	8007c74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	7b19      	ldrb	r1, [r3, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	7bd8      	ldrb	r0, [r3, #15]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	8b52      	ldrh	r2, [r2, #26]
 8006028:	9202      	str	r2, [sp, #8]
 800602a:	2202      	movs	r2, #2
 800602c:	9201      	str	r2, [sp, #4]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4623      	mov	r3, r4
 8006032:	4602      	mov	r2, r0
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fe1d 	bl	8007c74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	7b5b      	ldrb	r3, [r3, #13]
 8006046:	2200      	movs	r2, #0
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f002 f928 	bl	80082a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	7b1b      	ldrb	r3, [r3, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 f921 	bl	80082a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	bd90      	pop	{r4, r7, pc}

08006068 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fe12 	bl	8007cb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fe3d 	bl	8007d14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7b1b      	ldrb	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	7b1b      	ldrb	r3, [r3, #12]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fdff 	bl	8007cb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	7b1b      	ldrb	r3, [r3, #12]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fe2a 	bl	8007d14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	7b5b      	ldrb	r3, [r3, #13]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	7b5b      	ldrb	r3, [r3, #13]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fdec 	bl	8007cb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	7b5b      	ldrb	r3, [r3, #13]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fe17 	bl	8007d14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4618      	mov	r0, r3
 8006102:	f002 f983 	bl	800840c <free>
    phost->pActiveClass->pData = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800610c:	2200      	movs	r2, #0
 800610e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3340      	adds	r3, #64	; 0x40
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f8b1 	bl	800629a <GetLineCoding>
 8006138:	4603      	mov	r3, r0
 800613a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800613c:	7afb      	ldrb	r3, [r7, #11]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006148:	2102      	movs	r1, #2
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800614e:	7afb      	ldrb	r3, [r7, #11]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006178:	2b04      	cmp	r3, #4
 800617a:	d877      	bhi.n	800626c <USBH_CDC_Process+0x114>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <USBH_CDC_Process+0x2c>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006199 	.word	0x08006199
 8006188:	0800619f 	.word	0x0800619f
 800618c:	080061cf 	.word	0x080061cf
 8006190:	08006243 	.word	0x08006243
 8006194:	08006251 	.word	0x08006251
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e06d      	b.n	800627a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f897 	bl	80062d8 <SetLineCoding>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061ae:	7bbb      	ldrb	r3, [r7, #14]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061bc:	e058      	b.n	8006270 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d055      	beq.n	8006270 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2204      	movs	r2, #4
 80061c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061cc:	e050      	b.n	8006270 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	3340      	adds	r3, #64	; 0x40
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f860 	bl	800629a <GetLineCoding>
 80061da:	4603      	mov	r3, r0
 80061dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d126      	bne.n	8006232 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d13b      	bne.n	8006274 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006206:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006208:	429a      	cmp	r2, r3
 800620a:	d133      	bne.n	8006274 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006216:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006218:	429a      	cmp	r2, r3
 800621a:	d12b      	bne.n	8006274 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006224:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006226:	429a      	cmp	r2, r3
 8006228:	d124      	bne.n	8006274 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f958 	bl	80064e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006230:	e020      	b.n	8006274 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d01d      	beq.n	8006274 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2204      	movs	r2, #4
 800623c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006240:	e018      	b.n	8006274 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f867 	bl	8006316 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8da 	bl	8006402 <CDC_ProcessReception>
      break;
 800624e:	e014      	b.n	800627a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006250:	2100      	movs	r1, #0
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 ffef 	bl	8007236 <USBH_ClrFeature>
 8006258:	4603      	mov	r3, r0
 800625a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800626a:	e005      	b.n	8006278 <USBH_CDC_Process+0x120>

    default:
      break;
 800626c:	bf00      	nop
 800626e:	e004      	b.n	800627a <USBH_CDC_Process+0x122>
      break;
 8006270:	bf00      	nop
 8006272:	e002      	b.n	800627a <USBH_CDC_Process+0x122>
      break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <USBH_CDC_Process+0x122>
      break;
 8006278:	bf00      	nop

  }

  return status;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	22a1      	movs	r2, #161	; 0xa1
 80062a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2221      	movs	r2, #33	; 0x21
 80062ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2207      	movs	r2, #7
 80062c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2207      	movs	r2, #7
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fa81 	bl	80077d0 <USBH_CtlReq>
 80062ce:	4603      	mov	r3, r0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2221      	movs	r2, #33	; 0x21
 80062e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2207      	movs	r2, #7
 80062fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2207      	movs	r2, #7
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fa62 	bl	80077d0 <USBH_CtlReq>
 800630c:	4603      	mov	r3, r0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af02      	add	r7, sp, #8
 800631c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006328:	2300      	movs	r3, #0
 800632a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006332:	2b01      	cmp	r3, #1
 8006334:	d002      	beq.n	800633c <CDC_ProcessTransmission+0x26>
 8006336:	2b02      	cmp	r3, #2
 8006338:	d023      	beq.n	8006382 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800633a:	e05e      	b.n	80063fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	8b12      	ldrh	r2, [r2, #24]
 8006344:	4293      	cmp	r3, r2
 8006346:	d90b      	bls.n	8006360 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8b1a      	ldrh	r2, [r3, #24]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	7b5b      	ldrb	r3, [r3, #13]
 8006354:	2001      	movs	r0, #1
 8006356:	9000      	str	r0, [sp, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fc48 	bl	8007bee <USBH_BulkSendData>
 800635e:	e00b      	b.n	8006378 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	7b5b      	ldrb	r3, [r3, #13]
 800636e:	2001      	movs	r0, #1
 8006370:	9000      	str	r0, [sp, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fc3b 	bl	8007bee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006380:	e03b      	b.n	80063fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	7b5b      	ldrb	r3, [r3, #13]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 ff5f 	bl	800824c <USBH_LL_GetURBState>
 800638e:	4603      	mov	r3, r0
 8006390:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d128      	bne.n	80063ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	8b12      	ldrh	r2, [r2, #24]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d90e      	bls.n	80063c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	8b12      	ldrh	r2, [r2, #24]
 80063ac:	1a9a      	subs	r2, r3, r2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	8b12      	ldrh	r2, [r2, #24]
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61da      	str	r2, [r3, #28]
 80063c0:	e002      	b.n	80063c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063d8:	e00e      	b.n	80063f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f868 	bl	80064b8 <USBH_CDC_TransmitCallback>
      break;
 80063e8:	e006      	b.n	80063f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d103      	bne.n	80063f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063f8:	bf00      	nop
  }
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006414:	2300      	movs	r3, #0
 8006416:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800641e:	2b03      	cmp	r3, #3
 8006420:	d002      	beq.n	8006428 <CDC_ProcessReception+0x26>
 8006422:	2b04      	cmp	r3, #4
 8006424:	d00e      	beq.n	8006444 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006426:	e043      	b.n	80064b0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	6a19      	ldr	r1, [r3, #32]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	8b5a      	ldrh	r2, [r3, #26]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	7b1b      	ldrb	r3, [r3, #12]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fbff 	bl	8007c38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2204      	movs	r2, #4
 800643e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006442:	e035      	b.n	80064b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	7b1b      	ldrb	r3, [r3, #12]
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fefe 	bl	800824c <USBH_LL_GetURBState>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d129      	bne.n	80064ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	7b1b      	ldrb	r3, [r3, #12]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fe61 	bl	8008128 <USBH_LL_GetLastXferSize>
 8006466:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d016      	beq.n	80064a0 <CDC_ProcessReception+0x9e>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	8b5b      	ldrh	r3, [r3, #26]
 8006476:	461a      	mov	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4293      	cmp	r3, r2
 800647c:	d910      	bls.n	80064a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2203      	movs	r2, #3
 800649a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800649e:	e006      	b.n	80064ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f80f 	bl	80064cc <USBH_CDC_ReceiveCallback>
      break;
 80064ae:	bf00      	nop
  }
}
 80064b0:	bf00      	nop
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	e029      	b.n	8006560 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	79fa      	ldrb	r2, [r7, #7]
 8006510:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f81f 	bl	8006568 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 fd31 	bl	8007fc0 <USBH_LL_Init>

  return USBH_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e009      	b.n	800658e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	33e0      	adds	r3, #224	; 0xe0
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d9f2      	bls.n	800657a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e009      	b.n	80065ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b4:	d3f1      	bcc.n	800659a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2240      	movs	r2, #64	; 0x40
 80065da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d016      	beq.n	8006652 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10e      	bne.n	800664c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	33de      	adds	r3, #222	; 0xde
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	e004      	b.n	8006656 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800664c:	2302      	movs	r3, #2
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e001      	b.n	8006656 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	429a      	cmp	r2, r3
 800667e:	d204      	bcs.n	800668a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006688:	e001      	b.n	800668e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800668a:	2302      	movs	r3, #2
 800668c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	461a      	mov	r2, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	70fb      	strb	r3, [r7, #3]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70bb      	strb	r3, [r7, #2]
 80066b2:	4613      	mov	r3, r2
 80066b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066c6:	e025      	b.n	8006714 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	221a      	movs	r2, #26
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	3308      	adds	r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	3302      	adds	r3, #2
 80066d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	795b      	ldrb	r3, [r3, #5]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d002      	beq.n	80066ea <USBH_FindInterface+0x4e>
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2bff      	cmp	r3, #255	; 0xff
 80066e8:	d111      	bne.n	800670e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066ee:	78ba      	ldrb	r2, [r7, #2]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d002      	beq.n	80066fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066f4:	78bb      	ldrb	r3, [r7, #2]
 80066f6:	2bff      	cmp	r3, #255	; 0xff
 80066f8:	d109      	bne.n	800670e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066fe:	787a      	ldrb	r2, [r7, #1]
 8006700:	429a      	cmp	r2, r3
 8006702:	d002      	beq.n	800670a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006704:	787b      	ldrb	r3, [r7, #1]
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d101      	bne.n	800670e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	e006      	b.n	800671c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	3301      	adds	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d9d6      	bls.n	80066c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800671a:	23ff      	movs	r3, #255	; 0xff
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fc81 	bl	8008038 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006736:	2101      	movs	r1, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fd9a 	bl	8008272 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af04      	add	r7, sp, #16
 800674e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006750:	2302      	movs	r3, #2
 8006752:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d102      	bne.n	800676a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2203      	movs	r2, #3
 8006768:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b0b      	cmp	r3, #11
 8006772:	f200 81be 	bhi.w	8006af2 <USBH_Process+0x3aa>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <USBH_Process+0x34>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	080067ad 	.word	0x080067ad
 8006780:	080067df 	.word	0x080067df
 8006784:	08006847 	.word	0x08006847
 8006788:	08006a8d 	.word	0x08006a8d
 800678c:	08006af3 	.word	0x08006af3
 8006790:	080068eb 	.word	0x080068eb
 8006794:	08006a33 	.word	0x08006a33
 8006798:	08006921 	.word	0x08006921
 800679c:	08006941 	.word	0x08006941
 80067a0:	08006961 	.word	0x08006961
 80067a4:	080069a5 	.word	0x080069a5
 80067a8:	08006a75 	.word	0x08006a75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 819e 	beq.w	8006af6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067c0:	20c8      	movs	r0, #200	; 0xc8
 80067c2:	f001 fd9d 	bl	8008300 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fc93 	bl	80080f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067dc:	e18b      	b.n	8006af6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d107      	bne.n	80067f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067f6:	e18d      	b.n	8006b14 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006802:	d914      	bls.n	800682e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800680a:	3301      	adds	r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800681a:	2b03      	cmp	r3, #3
 800681c:	d903      	bls.n	8006826 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220d      	movs	r2, #13
 8006822:	701a      	strb	r2, [r3, #0]
      break;
 8006824:	e176      	b.n	8006b14 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
      break;
 800682c:	e172      	b.n	8006b14 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006834:	f103 020a 	add.w	r2, r3, #10
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800683e:	200a      	movs	r0, #10
 8006840:	f001 fd5e 	bl	8008300 <USBH_Delay>
      break;
 8006844:	e166      	b.n	8006b14 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006856:	2104      	movs	r1, #4
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800685c:	2064      	movs	r0, #100	; 0x64
 800685e:	f001 fd4f 	bl	8008300 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fc1e 	bl	80080a4 <USBH_LL_GetSpeed>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2205      	movs	r2, #5
 8006876:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006878:	2100      	movs	r1, #0
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fa29 	bl	8007cd2 <USBH_AllocPipe>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fa21 	bl	8007cd2 <USBH_AllocPipe>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7919      	ldrb	r1, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068ac:	b292      	uxth	r2, r2
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	9201      	str	r2, [sp, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4603      	mov	r3, r0
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f9da 	bl	8007c74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7959      	ldrb	r1, [r3, #5]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068d4:	b292      	uxth	r2, r2
 80068d6:	9202      	str	r2, [sp, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	9201      	str	r2, [sp, #4]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4603      	mov	r3, r0
 80068e0:	2200      	movs	r2, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f9c6 	bl	8007c74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068e8:	e114      	b.n	8006b14 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f918 	bl	8006b20 <USBH_HandleEnum>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 80fe 	bne.w	8006afa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800690c:	2b01      	cmp	r3, #1
 800690e:	d103      	bne.n	8006918 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2208      	movs	r2, #8
 8006914:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006916:	e0f0      	b.n	8006afa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2207      	movs	r2, #7
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e0ec      	b.n	8006afa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80e9 	beq.w	8006afe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006932:	2101      	movs	r1, #1
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2208      	movs	r2, #8
 800693c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800693e:	e0de      	b.n	8006afe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006946:	b29b      	uxth	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fc2c 	bl	80071a8 <USBH_SetCfg>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 80d5 	bne.w	8006b02 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2209      	movs	r2, #9
 800695c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800695e:	e0d0      	b.n	8006b02 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800696e:	2101      	movs	r1, #1
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc3c 	bl	80071ee <USBH_SetFeature>
 8006976:	4603      	mov	r3, r0
 8006978:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d103      	bne.n	800698a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	220a      	movs	r2, #10
 8006986:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006988:	e0bd      	b.n	8006b06 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	f040 80b9 	bne.w	8006b06 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	220a      	movs	r2, #10
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e0b4      	b.n	8006b06 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	220a      	movs	r2, #10
 80069a0:	701a      	strb	r2, [r3, #0]
      break;
 80069a2:	e0b0      	b.n	8006b06 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80ad 	beq.w	8006b0a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]
 80069bc:	e016      	b.n	80069ec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069be:	7bfa      	ldrb	r2, [r7, #15]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32de      	adds	r2, #222	; 0xde
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	791a      	ldrb	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d108      	bne.n	80069e6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069d4:	7bfa      	ldrb	r2, [r7, #15]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	32de      	adds	r2, #222	; 0xde
 80069da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069e4:	e005      	b.n	80069f2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	3301      	adds	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0e5      	beq.n	80069be <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d016      	beq.n	8006a2a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2206      	movs	r2, #6
 8006a12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a20:	e073      	b.n	8006b0a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	220d      	movs	r2, #13
 8006a26:	701a      	strb	r2, [r3, #0]
      break;
 8006a28:	e06f      	b.n	8006b0a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	220d      	movs	r2, #13
 8006a2e:	701a      	strb	r2, [r3, #0]
      break;
 8006a30:	e06b      	b.n	8006b0a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	220b      	movs	r2, #11
 8006a58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a5a:	e058      	b.n	8006b0e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d154      	bne.n	8006b0e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	220d      	movs	r2, #13
 8006a68:	701a      	strb	r2, [r3, #0]
      break;
 8006a6a:	e050      	b.n	8006b0e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	220d      	movs	r2, #13
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e04c      	b.n	8006b0e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d049      	beq.n	8006b12 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      }
      break;
 8006a8a:	e042      	b.n	8006b12 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fd67 	bl	8006568 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac8:	2105      	movs	r1, #5
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d107      	bne.n	8006aea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe20 	bl	8006728 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ae8:	e014      	b.n	8006b14 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 faa4 	bl	8008038 <USBH_LL_Start>
      break;
 8006af0:	e010      	b.n	8006b14 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006af2:	bf00      	nop
 8006af4:	e00e      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006af6:	bf00      	nop
 8006af8:	e00c      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006afa:	bf00      	nop
 8006afc:	e00a      	b.n	8006b14 <USBH_Process+0x3cc>
    break;
 8006afe:	bf00      	nop
 8006b00:	e008      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006b02:	bf00      	nop
 8006b04:	e006      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006b06:	bf00      	nop
 8006b08:	e004      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <USBH_Process+0x3cc>
      break;
 8006b12:	bf00      	nop
  }
  return USBH_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af04      	add	r7, sp, #16
 8006b26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	f200 81c1 	bhi.w	8006ebc <USBH_HandleEnum+0x39c>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBH_HandleEnum+0x20>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006c1f 	.word	0x08006c1f
 8006b48:	08006c89 	.word	0x08006c89
 8006b4c:	08006d17 	.word	0x08006d17
 8006b50:	08006d81 	.word	0x08006d81
 8006b54:	08006df1 	.word	0x08006df1
 8006b58:	08006e37 	.word	0x08006e37
 8006b5c:	08006e7d 	.word	0x08006e7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b60:	2108      	movs	r1, #8
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa50 	bl	8007008 <USBH_Get_DevDesc>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d130      	bne.n	8006bd4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7919      	ldrb	r1, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b96:	b292      	uxth	r2, r2
 8006b98:	9202      	str	r2, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f865 	bl	8007c74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7959      	ldrb	r1, [r3, #5]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	9201      	str	r2, [sp, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f851 	bl	8007c74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bd2:	e175      	b.n	8006ec0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	f040 8172 	bne.w	8006ec0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006be2:	3301      	adds	r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d903      	bls.n	8006bfe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	220d      	movs	r2, #13
 8006bfa:	701a      	strb	r2, [r3, #0]
      break;
 8006bfc:	e160      	b.n	8006ec0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	795b      	ldrb	r3, [r3, #5]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f885 	bl	8007d14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	791b      	ldrb	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f87f 	bl	8007d14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
      break;
 8006c1c:	e150      	b.n	8006ec0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c1e:	2112      	movs	r1, #18
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9f1 	bl	8007008 <USBH_Get_DevDesc>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c36:	e145      	b.n	8006ec4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	f040 8142 	bne.w	8006ec4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d903      	bls.n	8006c62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	220d      	movs	r2, #13
 8006c5e:	701a      	strb	r2, [r3, #0]
      break;
 8006c60:	e130      	b.n	8006ec4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	795b      	ldrb	r3, [r3, #5]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f853 	bl	8007d14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f84d 	bl	8007d14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
      break;
 8006c86:	e11d      	b.n	8006ec4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa68 	bl	8007160 <USBH_SetAddress>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d132      	bne.n	8006d00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	f001 fb30 	bl	8008300 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2203      	movs	r2, #3
 8006cac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7919      	ldrb	r1, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2280      	movs	r2, #128	; 0x80
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 ffcf 	bl	8007c74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7959      	ldrb	r1, [r3, #5]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cea:	b292      	uxth	r2, r2
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	9201      	str	r2, [sp, #4]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 ffbb 	bl	8007c74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cfe:	e0e3      	b.n	8006ec8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	f040 80e0 	bne.w	8006ec8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220d      	movs	r2, #13
 8006d0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	705a      	strb	r2, [r3, #1]
      break;
 8006d14:	e0d8      	b.n	8006ec8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d16:	2109      	movs	r1, #9
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f99d 	bl	8007058 <USBH_Get_CfgDesc>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d2e:	e0cd      	b.n	8006ecc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 80ca 	bne.w	8006ecc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d903      	bls.n	8006d5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220d      	movs	r2, #13
 8006d56:	701a      	strb	r2, [r3, #0]
      break;
 8006d58:	e0b8      	b.n	8006ecc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	795b      	ldrb	r3, [r3, #5]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ffd7 	bl	8007d14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ffd1 	bl	8007d14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
      break;
 8006d7e:	e0a5      	b.n	8006ecc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f965 	bl	8007058 <USBH_Get_CfgDesc>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d9e:	e097      	b.n	8006ed0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	f040 8094 	bne.w	8006ed0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dae:	3301      	adds	r3, #1
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d903      	bls.n	8006dca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	220d      	movs	r2, #13
 8006dc6:	701a      	strb	r2, [r3, #0]
      break;
 8006dc8:	e082      	b.n	8006ed0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	795b      	ldrb	r3, [r3, #5]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 ff9f 	bl	8007d14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ff99 	bl	8007d14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
      break;
 8006dee:	e06f      	b.n	8006ed0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d019      	beq.n	8006e2e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e06:	23ff      	movs	r3, #255	; 0xff
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f949 	bl	80070a0 <USBH_Get_StringDesc>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e1e:	e059      	b.n	8006ed4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d156      	bne.n	8006ed4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2206      	movs	r2, #6
 8006e2a:	705a      	strb	r2, [r3, #1]
      break;
 8006e2c:	e052      	b.n	8006ed4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2206      	movs	r2, #6
 8006e32:	705a      	strb	r2, [r3, #1]
      break;
 8006e34:	e04e      	b.n	8006ed4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d019      	beq.n	8006e74 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e4c:	23ff      	movs	r3, #255	; 0xff
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f926 	bl	80070a0 <USBH_Get_StringDesc>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2207      	movs	r2, #7
 8006e62:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e64:	e038      	b.n	8006ed8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d135      	bne.n	8006ed8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2207      	movs	r2, #7
 8006e70:	705a      	strb	r2, [r3, #1]
      break;
 8006e72:	e031      	b.n	8006ed8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2207      	movs	r2, #7
 8006e78:	705a      	strb	r2, [r3, #1]
      break;
 8006e7a:	e02d      	b.n	8006ed8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e92:	23ff      	movs	r3, #255	; 0xff
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f903 	bl	80070a0 <USBH_Get_StringDesc>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ea8:	e018      	b.n	8006edc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d115      	bne.n	8006edc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb4:	e012      	b.n	8006edc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eba:	e00f      	b.n	8006edc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e00e      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e00c      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ec4:	bf00      	nop
 8006ec6:	e00a      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ec8:	bf00      	nop
 8006eca:	e008      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ecc:	bf00      	nop
 8006ece:	e006      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e004      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <USBH_HandleEnum+0x3be>
      break;
 8006edc:	bf00      	nop
  }
  return Status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f804 	bl	8006f2a <USBH_HandleSof>
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b0b      	cmp	r3, #11
 8006f3a:	d10a      	bne.n	8006f52 <USBH_HandleSof+0x28>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
  }
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f6a:	bf00      	nop
}
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f86:	bf00      	nop
}
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f844 	bl	800806e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fe91 	bl	8007d14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	795b      	ldrb	r3, [r3, #5]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fe8b 	bl	8007d14 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	b29b      	uxth	r3, r3
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007026:	2100      	movs	r1, #0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f864 	bl	80070f6 <USBH_GetDescriptor>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	b292      	uxth	r2, r2
 8007048:	4619      	mov	r1, r3
 800704a:	f000 f918 	bl	800727e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	331c      	adds	r3, #28
 8007068:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800706a:	887b      	ldrh	r3, [r7, #2]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007074:	2100      	movs	r1, #0
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f83d 	bl	80070f6 <USBH_GetDescriptor>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d107      	bne.n	8007096 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007086:	887b      	ldrh	r3, [r7, #2]
 8007088:	461a      	mov	r2, r3
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f987 	bl	80073a0 <USBH_ParseCfgDesc>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	461a      	mov	r2, r3
 80070ac:	460b      	mov	r3, r1
 80070ae:	72fb      	strb	r3, [r7, #11]
 80070b0:	4613      	mov	r3, r2
 80070b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070c4:	893b      	ldrh	r3, [r7, #8]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	460b      	mov	r3, r1
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f812 	bl	80070f6 <USBH_GetDescriptor>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070e2:	893a      	ldrh	r2, [r7, #8]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fb24 	bl	8007734 <USBH_ParseStringDesc>
  }

  return status;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	607b      	str	r3, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	72fb      	strb	r3, [r7, #11]
 8007104:	4613      	mov	r3, r2
 8007106:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	789b      	ldrb	r3, [r3, #2]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d11c      	bne.n	800714a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007116:	b2da      	uxtb	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2206      	movs	r2, #6
 8007120:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	893a      	ldrh	r2, [r7, #8]
 8007126:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007128:	893b      	ldrh	r3, [r7, #8]
 800712a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800712e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007132:	d104      	bne.n	800713e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f240 4209 	movw	r2, #1033	; 0x409
 800713a:	829a      	strh	r2, [r3, #20]
 800713c:	e002      	b.n	8007144 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8b3a      	ldrh	r2, [r7, #24]
 8007148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800714a:	8b3b      	ldrh	r3, [r7, #24]
 800714c:	461a      	mov	r2, r3
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fb3d 	bl	80077d0 <USBH_CtlReq>
 8007156:	4603      	mov	r3, r0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	789b      	ldrb	r3, [r3, #2]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d10f      	bne.n	8007194 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2205      	movs	r2, #5
 800717e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007194:	2200      	movs	r2, #0
 8007196:	2100      	movs	r1, #0
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb19 	bl	80077d0 <USBH_CtlReq>
 800719e:	4603      	mov	r3, r0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	789b      	ldrb	r3, [r3, #2]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d10e      	bne.n	80071da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2209      	movs	r2, #9
 80071c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	887a      	ldrh	r2, [r7, #2]
 80071cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 faf6 	bl	80077d0 <USBH_CtlReq>
 80071e4:	4603      	mov	r3, r0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	789b      	ldrb	r3, [r3, #2]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d10f      	bne.n	8007222 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2203      	movs	r2, #3
 800720c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007222:	2200      	movs	r2, #0
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fad2 	bl	80077d0 <USBH_CtlReq>
 800722c:	4603      	mov	r3, r0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	789b      	ldrb	r3, [r3, #2]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10f      	bne.n	800726a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	b29a      	uxth	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 faae 	bl	80077d0 <USBH_CtlReq>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	4613      	mov	r3, r2
 800728a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	785a      	ldrb	r2, [r3, #1]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3302      	adds	r3, #2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	3303      	adds	r3, #3
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	791a      	ldrb	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	795a      	ldrb	r2, [r3, #5]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	799a      	ldrb	r2, [r3, #6]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	79da      	ldrb	r2, [r3, #7]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	79db      	ldrb	r3, [r3, #7]
 80072dc:	2b20      	cmp	r3, #32
 80072de:	dc11      	bgt.n	8007304 <USBH_ParseDevDesc+0x86>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	db16      	blt.n	8007312 <USBH_ParseDevDesc+0x94>
 80072e4:	3b08      	subs	r3, #8
 80072e6:	2201      	movs	r2, #1
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80072f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <USBH_ParseDevDesc+0x8a>
 8007302:	e006      	b.n	8007312 <USBH_ParseDevDesc+0x94>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d104      	bne.n	8007312 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	79da      	ldrb	r2, [r3, #7]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	71da      	strb	r2, [r3, #7]
      break;
 8007310:	e003      	b.n	800731a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2240      	movs	r2, #64	; 0x40
 8007316:	71da      	strb	r2, [r3, #7]
      break;
 8007318:	bf00      	nop
  }

  if (length > 8U)
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d939      	bls.n	8007394 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3308      	adds	r3, #8
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b29a      	uxth	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3309      	adds	r3, #9
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	b29b      	uxth	r3, r3
 8007334:	4313      	orrs	r3, r2
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	330a      	adds	r3, #10
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b29a      	uxth	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	330b      	adds	r3, #11
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	b29b      	uxth	r3, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	330c      	adds	r3, #12
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b29a      	uxth	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	330d      	adds	r3, #13
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	b29b      	uxth	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	7b9a      	ldrb	r2, [r3, #14]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	7bda      	ldrb	r2, [r3, #15]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	7c1a      	ldrb	r2, [r3, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	7c5a      	ldrb	r2, [r3, #17]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	745a      	strb	r2, [r3, #17]
  }
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08c      	sub	sp, #48	; 0x30
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785a      	ldrb	r2, [r3, #1]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3302      	adds	r3, #2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fc:	bf28      	it	cs
 80073fe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007402:	b29a      	uxth	r2, r3
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	791a      	ldrb	r2, [r3, #4]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	795a      	ldrb	r2, [r3, #5]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	799a      	ldrb	r2, [r3, #6]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	79da      	ldrb	r2, [r3, #7]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	7a1a      	ldrb	r2, [r3, #8]
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b09      	cmp	r3, #9
 8007436:	d002      	beq.n	800743e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2209      	movs	r2, #9
 800743c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	2b09      	cmp	r3, #9
 8007442:	f240 809d 	bls.w	8007580 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007446:	2309      	movs	r3, #9
 8007448:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800744e:	e081      	b.n	8007554 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007450:	f107 0316 	add.w	r3, r7, #22
 8007454:	4619      	mov	r1, r3
 8007456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007458:	f000 f99f 	bl	800779a <USBH_GetNextDesc>
 800745c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d176      	bne.n	8007554 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b09      	cmp	r3, #9
 800746c:	d002      	beq.n	8007474 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	2209      	movs	r2, #9
 8007472:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007478:	221a      	movs	r2, #26
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	3308      	adds	r3, #8
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	4413      	add	r3, r2
 8007484:	3302      	adds	r3, #2
 8007486:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800748a:	69f8      	ldr	r0, [r7, #28]
 800748c:	f000 f87e 	bl	800758c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800749a:	e043      	b.n	8007524 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800749c:	f107 0316 	add.w	r3, r7, #22
 80074a0:	4619      	mov	r1, r3
 80074a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a4:	f000 f979 	bl	800779a <USBH_GetNextDesc>
 80074a8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b05      	cmp	r3, #5
 80074b0:	d138      	bne.n	8007524 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d10f      	bne.n	80074da <USBH_ParseCfgDesc+0x13a>
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	799b      	ldrb	r3, [r3, #6]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d10b      	bne.n	80074da <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	79db      	ldrb	r3, [r3, #7]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10f      	bne.n	80074ea <USBH_ParseCfgDesc+0x14a>
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	d00b      	beq.n	80074ea <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2209      	movs	r2, #9
 80074d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074d8:	e007      	b.n	80074ea <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b07      	cmp	r3, #7
 80074e0:	d004      	beq.n	80074ec <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	2207      	movs	r2, #7
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e000      	b.n	80074ec <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074ea:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074f4:	3201      	adds	r2, #1
 80074f6:	00d2      	lsls	r2, r2, #3
 80074f8:	211a      	movs	r1, #26
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	4413      	add	r3, r2
 8007500:	3308      	adds	r3, #8
 8007502:	6a3a      	ldr	r2, [r7, #32]
 8007504:	4413      	add	r3, r2
 8007506:	3304      	adds	r3, #4
 8007508:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 f86b 	bl	80075ea <USBH_ParseEPDesc>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800751a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800751e:	3301      	adds	r3, #1
 8007520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800752c:	429a      	cmp	r2, r3
 800752e:	d204      	bcs.n	800753a <USBH_ParseCfgDesc+0x19a>
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	885a      	ldrh	r2, [r3, #2]
 8007534:	8afb      	ldrh	r3, [r7, #22]
 8007536:	429a      	cmp	r2, r3
 8007538:	d8b0      	bhi.n	800749c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	791b      	ldrb	r3, [r3, #4]
 800753e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007542:	429a      	cmp	r2, r3
 8007544:	d201      	bcs.n	800754a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007546:	2303      	movs	r3, #3
 8007548:	e01c      	b.n	8007584 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800754a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800754e:	3301      	adds	r3, #1
 8007550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007558:	2b01      	cmp	r3, #1
 800755a:	d805      	bhi.n	8007568 <USBH_ParseCfgDesc+0x1c8>
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	885a      	ldrh	r2, [r3, #2]
 8007560:	8afb      	ldrh	r3, [r7, #22]
 8007562:	429a      	cmp	r2, r3
 8007564:	f63f af74 	bhi.w	8007450 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	791b      	ldrb	r3, [r3, #4]
 800756c:	2b02      	cmp	r3, #2
 800756e:	bf28      	it	cs
 8007570:	2302      	movcs	r3, #2
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007578:	429a      	cmp	r2, r3
 800757a:	d201      	bcs.n	8007580 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800757c:	2303      	movs	r3, #3
 800757e:	e001      	b.n	8007584 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007584:	4618      	mov	r0, r3
 8007586:	3730      	adds	r7, #48	; 0x30
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	785a      	ldrb	r2, [r3, #1]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	789a      	ldrb	r2, [r3, #2]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	78da      	ldrb	r2, [r3, #3]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	791a      	ldrb	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	795a      	ldrb	r2, [r3, #5]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	799a      	ldrb	r2, [r3, #6]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	79da      	ldrb	r2, [r3, #7]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	7a1a      	ldrb	r2, [r3, #8]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	721a      	strb	r2, [r3, #8]
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	785a      	ldrb	r2, [r3, #1]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	789a      	ldrb	r2, [r3, #2]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	78da      	ldrb	r2, [r3, #3]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3305      	adds	r3, #5
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	b29b      	uxth	r3, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	799a      	ldrb	r2, [r3, #6]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	889b      	ldrh	r3, [r3, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007646:	2303      	movs	r3, #3
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e033      	b.n	80076b4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	889b      	ldrh	r3, [r3, #4]
 8007650:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007654:	f023 0307 	bic.w	r3, r3, #7
 8007658:	b29a      	uxth	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	889b      	ldrh	r3, [r3, #4]
 8007662:	b21a      	sxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b299      	uxth	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3305      	adds	r3, #5
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	b29b      	uxth	r3, r3
 8007678:	430b      	orrs	r3, r1
 800767a:	b29b      	uxth	r3, r3
 800767c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007680:	2b00      	cmp	r3, #0
 8007682:	d110      	bne.n	80076a6 <USBH_ParseEPDesc+0xbc>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b299      	uxth	r1, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3305      	adds	r3, #5
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	b29b      	uxth	r3, r3
 8007698:	430b      	orrs	r3, r1
 800769a:	b29b      	uxth	r3, r3
 800769c:	b21b      	sxth	r3, r3
 800769e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	e001      	b.n	80076aa <USBH_ParseEPDesc+0xc0>
 80076a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d116      	bne.n	80076ec <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d005      	beq.n	80076d6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	78db      	ldrb	r3, [r3, #3]
 80076ce:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d127      	bne.n	8007726 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	799b      	ldrb	r3, [r3, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <USBH_ParseEPDesc+0xfc>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	799b      	ldrb	r3, [r3, #6]
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d91f      	bls.n	8007726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076e6:	2303      	movs	r3, #3
 80076e8:	75fb      	strb	r3, [r7, #23]
 80076ea:	e01c      	b.n	8007726 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10a      	bne.n	800770e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	799b      	ldrb	r3, [r3, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <USBH_ParseEPDesc+0x11e>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	799b      	ldrb	r3, [r3, #6]
 8007704:	2b10      	cmp	r3, #16
 8007706:	d90e      	bls.n	8007726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007708:	2303      	movs	r3, #3
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	e00b      	b.n	8007726 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	78db      	ldrb	r3, [r3, #3]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d105      	bne.n	8007726 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	799b      	ldrb	r3, [r3, #6]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007722:	2303      	movs	r3, #3
 8007724:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d120      	bne.n	800778e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	1e9a      	subs	r2, r3, #2
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	4293      	cmp	r3, r2
 8007756:	bf28      	it	cs
 8007758:	4613      	movcs	r3, r2
 800775a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3302      	adds	r3, #2
 8007760:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007762:	2300      	movs	r3, #0
 8007764:	82fb      	strh	r3, [r7, #22]
 8007766:	e00b      	b.n	8007780 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007768:	8afb      	ldrh	r3, [r7, #22]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3301      	adds	r3, #1
 8007778:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800777a:	8afb      	ldrh	r3, [r7, #22]
 800777c:	3302      	adds	r3, #2
 800777e:	82fb      	strh	r3, [r7, #22]
 8007780:	8afa      	ldrh	r2, [r7, #22]
 8007782:	8abb      	ldrh	r3, [r7, #20]
 8007784:	429a      	cmp	r2, r3
 8007786:	d3ef      	bcc.n	8007768 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
  }
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	881a      	ldrh	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4413      	add	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077c2:	68fb      	ldr	r3, [r7, #12]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	789b      	ldrb	r3, [r3, #2]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d002      	beq.n	80077f0 <USBH_CtlReq+0x20>
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d00f      	beq.n	800780e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077ee:	e027      	b.n	8007840 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2202      	movs	r2, #2
 8007806:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
      break;
 800780c:	e018      	b.n	8007840 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f81c 	bl	800784c <USBH_HandleControl>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <USBH_CtlReq+0x54>
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d106      	bne.n	8007832 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	761a      	strb	r2, [r3, #24]
      break;
 8007830:	e005      	b.n	800783e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d102      	bne.n	800783e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	709a      	strb	r2, [r3, #2]
      break;
 800783e:	bf00      	nop
  }
  return status;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af02      	add	r7, sp, #8
 8007852:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007858:	2300      	movs	r3, #0
 800785a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7e1b      	ldrb	r3, [r3, #24]
 8007860:	3b01      	subs	r3, #1
 8007862:	2b0a      	cmp	r3, #10
 8007864:	f200 8156 	bhi.w	8007b14 <USBH_HandleControl+0x2c8>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USBH_HandleControl+0x24>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	0800789d 	.word	0x0800789d
 8007874:	080078b7 	.word	0x080078b7
 8007878:	08007921 	.word	0x08007921
 800787c:	08007947 	.word	0x08007947
 8007880:	0800797f 	.word	0x0800797f
 8007884:	080079a9 	.word	0x080079a9
 8007888:	080079fb 	.word	0x080079fb
 800788c:	08007a1d 	.word	0x08007a1d
 8007890:	08007a59 	.word	0x08007a59
 8007894:	08007a7f 	.word	0x08007a7f
 8007898:	08007abd 	.word	0x08007abd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f103 0110 	add.w	r1, r3, #16
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f943 	bl	8007b34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	761a      	strb	r2, [r3, #24]
      break;
 80078b4:	e139      	b.n	8007b2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	795b      	ldrb	r3, [r3, #5]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fcc5 	bl	800824c <USBH_LL_GetURBState>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d11e      	bne.n	800790a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7c1b      	ldrb	r3, [r3, #16]
 80078d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8adb      	ldrh	r3, [r3, #22]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078de:	7b7b      	ldrb	r3, [r7, #13]
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d103      	bne.n	80078ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2203      	movs	r2, #3
 80078e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078ea:	e115      	b.n	8007b18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2205      	movs	r2, #5
 80078f0:	761a      	strb	r2, [r3, #24]
      break;
 80078f2:	e111      	b.n	8007b18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078f4:	7b7b      	ldrb	r3, [r7, #13]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d103      	bne.n	8007902 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2209      	movs	r2, #9
 80078fe:	761a      	strb	r2, [r3, #24]
      break;
 8007900:	e10a      	b.n	8007b18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2207      	movs	r2, #7
 8007906:	761a      	strb	r2, [r3, #24]
      break;
 8007908:	e106      	b.n	8007b18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d003      	beq.n	8007918 <USBH_HandleControl+0xcc>
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b02      	cmp	r3, #2
 8007914:	f040 8100 	bne.w	8007b18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	220b      	movs	r2, #11
 800791c:	761a      	strb	r2, [r3, #24]
      break;
 800791e:	e0fb      	b.n	8007b18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6899      	ldr	r1, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	899a      	ldrh	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	791b      	ldrb	r3, [r3, #4]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f93a 	bl	8007bb2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2204      	movs	r2, #4
 8007942:	761a      	strb	r2, [r3, #24]
      break;
 8007944:	e0f1      	b.n	8007b2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc7d 	bl	800824c <USBH_LL_GetURBState>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d102      	bne.n	8007962 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2209      	movs	r2, #9
 8007960:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b05      	cmp	r3, #5
 8007966:	d102      	bne.n	800796e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007968:	2303      	movs	r3, #3
 800796a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800796c:	e0d6      	b.n	8007b1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b04      	cmp	r3, #4
 8007972:	f040 80d3 	bne.w	8007b1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	220b      	movs	r2, #11
 800797a:	761a      	strb	r2, [r3, #24]
      break;
 800797c:	e0ce      	b.n	8007b1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6899      	ldr	r1, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	899a      	ldrh	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	795b      	ldrb	r3, [r3, #5]
 800798a:	2001      	movs	r0, #1
 800798c:	9000      	str	r0, [sp, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8ea 	bl	8007b68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2206      	movs	r2, #6
 80079a4:	761a      	strb	r2, [r3, #24]
      break;
 80079a6:	e0c0      	b.n	8007b2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	795b      	ldrb	r3, [r3, #5]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fc4c 	bl	800824c <USBH_LL_GetURBState>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d103      	bne.n	80079c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2207      	movs	r2, #7
 80079c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079c4:	e0ac      	b.n	8007b20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b05      	cmp	r3, #5
 80079ca:	d105      	bne.n	80079d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	220c      	movs	r2, #12
 80079d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079d2:	2303      	movs	r3, #3
 80079d4:	73fb      	strb	r3, [r7, #15]
      break;
 80079d6:	e0a3      	b.n	8007b20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d103      	bne.n	80079e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2205      	movs	r2, #5
 80079e2:	761a      	strb	r2, [r3, #24]
      break;
 80079e4:	e09c      	b.n	8007b20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	f040 8099 	bne.w	8007b20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	220b      	movs	r2, #11
 80079f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	73fb      	strb	r3, [r7, #15]
      break;
 80079f8:	e092      	b.n	8007b20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	2100      	movs	r1, #0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8d5 	bl	8007bb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2208      	movs	r2, #8
 8007a18:	761a      	strb	r2, [r3, #24]

      break;
 8007a1a:	e086      	b.n	8007b2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	791b      	ldrb	r3, [r3, #4]
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fc12 	bl	800824c <USBH_LL_GetURBState>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d105      	bne.n	8007a3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	220d      	movs	r2, #13
 8007a36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a3c:	e072      	b.n	8007b24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d103      	bne.n	8007a4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	220b      	movs	r2, #11
 8007a48:	761a      	strb	r2, [r3, #24]
      break;
 8007a4a:	e06b      	b.n	8007b24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	d168      	bne.n	8007b24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e065      	b.n	8007b24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	795b      	ldrb	r3, [r3, #5]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	9200      	str	r2, [sp, #0]
 8007a60:	2200      	movs	r2, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f87f 	bl	8007b68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220a      	movs	r2, #10
 8007a7a:	761a      	strb	r2, [r3, #24]
      break;
 8007a7c:	e055      	b.n	8007b2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fbe1 	bl	800824c <USBH_LL_GetURBState>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	220d      	movs	r2, #13
 8007a9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a9e:	e043      	b.n	8007b28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d103      	bne.n	8007aae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2209      	movs	r2, #9
 8007aaa:	761a      	strb	r2, [r3, #24]
      break;
 8007aac:	e03c      	b.n	8007b28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d139      	bne.n	8007b28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	220b      	movs	r2, #11
 8007ab8:	761a      	strb	r2, [r3, #24]
      break;
 8007aba:	e035      	b.n	8007b28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7e5b      	ldrb	r3, [r3, #25]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	765a      	strb	r2, [r3, #25]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7e5b      	ldrb	r3, [r3, #25]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d806      	bhi.n	8007ade <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007adc:	e025      	b.n	8007b2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ae4:	2106      	movs	r1, #6
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	795b      	ldrb	r3, [r3, #5]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f90c 	bl	8007d14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	791b      	ldrb	r3, [r3, #4]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f906 	bl	8007d14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	73fb      	strb	r3, [r7, #15]
      break;
 8007b12:	e00a      	b.n	8007b2a <USBH_HandleControl+0x2de>

    default:
      break;
 8007b14:	bf00      	nop
 8007b16:	e008      	b.n	8007b2a <USBH_HandleControl+0x2de>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e006      	b.n	8007b2a <USBH_HandleControl+0x2de>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e004      	b.n	8007b2a <USBH_HandleControl+0x2de>
      break;
 8007b20:	bf00      	nop
 8007b22:	e002      	b.n	8007b2a <USBH_HandleControl+0x2de>
      break;
 8007b24:	bf00      	nop
 8007b26:	e000      	b.n	8007b2a <USBH_HandleControl+0x2de>
      break;
 8007b28:	bf00      	nop
  }

  return status;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af04      	add	r7, sp, #16
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b42:	79f9      	ldrb	r1, [r7, #7]
 8007b44:	2300      	movs	r3, #0
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	2308      	movs	r3, #8
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	2300      	movs	r3, #0
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	2200      	movs	r2, #0
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb46 	bl	80081ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af04      	add	r7, sp, #16
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	460b      	mov	r3, r1
 8007b78:	80fb      	strh	r3, [r7, #6]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b8c:	7979      	ldrb	r1, [r7, #5]
 8007b8e:	7e3b      	ldrb	r3, [r7, #24]
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fb21 	bl	80081ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b088      	sub	sp, #32
 8007bb6:	af04      	add	r7, sp, #16
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	80fb      	strh	r3, [r7, #6]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bc8:	7979      	ldrb	r1, [r7, #5]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9303      	str	r3, [sp, #12]
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	9302      	str	r3, [sp, #8]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2201      	movs	r2, #1
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fb03 	bl	80081ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007be4:	2300      	movs	r3, #0

}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b088      	sub	sp, #32
 8007bf2:	af04      	add	r7, sp, #16
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	80fb      	strh	r3, [r7, #6]
 8007c00:	4613      	mov	r3, r2
 8007c02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c12:	7979      	ldrb	r1, [r7, #5]
 8007c14:	7e3b      	ldrb	r3, [r7, #24]
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	9302      	str	r3, [sp, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	2301      	movs	r3, #1
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	2302      	movs	r3, #2
 8007c26:	2200      	movs	r2, #0
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fade 	bl	80081ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af04      	add	r7, sp, #16
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	460b      	mov	r3, r1
 8007c48:	80fb      	strh	r3, [r7, #6]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c4e:	7979      	ldrb	r1, [r7, #5]
 8007c50:	2300      	movs	r3, #0
 8007c52:	9303      	str	r3, [sp, #12]
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	9302      	str	r3, [sp, #8]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	2302      	movs	r3, #2
 8007c62:	2201      	movs	r2, #1
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fac0 	bl	80081ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af04      	add	r7, sp, #16
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	4611      	mov	r1, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	70fb      	strb	r3, [r7, #3]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70bb      	strb	r3, [r7, #2]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c8e:	7878      	ldrb	r0, [r7, #1]
 8007c90:	78ba      	ldrb	r2, [r7, #2]
 8007c92:	78f9      	ldrb	r1, [r7, #3]
 8007c94:	8b3b      	ldrh	r3, [r7, #24]
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	7d3b      	ldrb	r3, [r7, #20]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	7c3b      	ldrb	r3, [r7, #16]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa53 	bl	800814e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa72 	bl	80081ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f836 	bl	8007d50 <USBH_GetFreePipe>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
 8007cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00a      	beq.n	8007d08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	f003 030f 	and.w	r3, r3, #15
 8007cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	33e0      	adds	r3, #224	; 0xe0
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d08:	89fb      	ldrh	r3, [r7, #14]
 8007d0a:	b2db      	uxtb	r3, r3
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d80d      	bhi.n	8007d42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	33e0      	adds	r3, #224	; 0xe0
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	33e0      	adds	r3, #224	; 0xe0
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
 8007d60:	e00f      	b.n	8007d82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	33e0      	adds	r3, #224	; 0xe0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	e007      	b.n	8007d8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d9ec      	bls.n	8007d62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	490e      	ldr	r1, [pc, #56]	; (8007dd8 <MX_USB_HOST_Init+0x40>)
 8007da0:	480e      	ldr	r0, [pc, #56]	; (8007ddc <MX_USB_HOST_Init+0x44>)
 8007da2:	f7fe fba7 	bl	80064f4 <USBH_Init>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007dac:	f7f8 fe6e 	bl	8000a8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007db0:	490b      	ldr	r1, [pc, #44]	; (8007de0 <MX_USB_HOST_Init+0x48>)
 8007db2:	480a      	ldr	r0, [pc, #40]	; (8007ddc <MX_USB_HOST_Init+0x44>)
 8007db4:	f7fe fc2c 	bl	8006610 <USBH_RegisterClass>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dbe:	f7f8 fe65 	bl	8000a8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dc2:	4806      	ldr	r0, [pc, #24]	; (8007ddc <MX_USB_HOST_Init+0x44>)
 8007dc4:	f7fe fcb0 	bl	8006728 <USBH_Start>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dce:	f7f8 fe5d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dd2:	bf00      	nop
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	08007df9 	.word	0x08007df9
 8007ddc:	200001a8 	.word	0x200001a8
 8007de0:	2000000c 	.word	0x2000000c

08007de4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007de8:	4802      	ldr	r0, [pc, #8]	; (8007df4 <MX_USB_HOST_Process+0x10>)
 8007dea:	f7fe fcad 	bl	8006748 <USBH_Process>
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200001a8 	.word	0x200001a8

08007df8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d819      	bhi.n	8007e40 <USBH_UserProcess+0x48>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <USBH_UserProcess+0x1c>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e29 	.word	0x08007e29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <USBH_UserProcess+0x58>)
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	701a      	strb	r2, [r3, #0]
  break;
 8007e2e:	e008      	b.n	8007e42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <USBH_UserProcess+0x58>)
 8007e32:	2202      	movs	r2, #2
 8007e34:	701a      	strb	r2, [r3, #0]
  break;
 8007e36:	e004      	b.n	8007e42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <USBH_UserProcess+0x58>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	701a      	strb	r2, [r3, #0]
  break;
 8007e3e:	e000      	b.n	8007e42 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000580 	.word	0x20000580

08007e54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	609a      	str	r2, [r3, #8]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e74:	d147      	bne.n	8007f06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	4b25      	ldr	r3, [pc, #148]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4a24      	ldr	r2, [pc, #144]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6313      	str	r3, [r2, #48]	; 0x30
 8007e86:	4b22      	ldr	r3, [pc, #136]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	613b      	str	r3, [r7, #16]
 8007e90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	481b      	ldr	r0, [pc, #108]	; (8007f14 <HAL_HCD_MspInit+0xc0>)
 8007ea8:	f7f9 f97c 	bl	80011a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007eac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ec2:	f107 0314 	add.w	r3, r7, #20
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4812      	ldr	r0, [pc, #72]	; (8007f14 <HAL_HCD_MspInit+0xc0>)
 8007eca:	f7f9 f96b 	bl	80011a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ece:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	4a0f      	ldr	r2, [pc, #60]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	6353      	str	r3, [r2, #52]	; 0x34
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	4a0b      	ldr	r2, [pc, #44]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <HAL_HCD_MspInit+0xbc>)
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	2043      	movs	r0, #67	; 0x43
 8007efc:	f7f9 f91b 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f00:	2043      	movs	r0, #67	; 0x43
 8007f02:	f7f9 f934 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f06:	bf00      	nop
 8007f08:	3728      	adds	r7, #40	; 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800
 8007f14:	40020000 	.word	0x40020000

08007f18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe ffed 	bl	8006f06 <USBH_LL_IncTimer>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f825 	bl	8006f92 <USBH_LL_Connect>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff f82e 	bl	8006fc0 <USBH_LL_Disconnect>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe ffdf 	bl	8006f5a <USBH_LL_PortEnabled>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe ffdf 	bl	8006f76 <USBH_LL_PortDisabled>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d12a      	bne.n	8008028 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fd2:	4a18      	ldr	r2, [pc, #96]	; (8008034 <USBH_LL_Init+0x74>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a15      	ldr	r2, [pc, #84]	; (8008034 <USBH_LL_Init+0x74>)
 8007fde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <USBH_LL_Init+0x74>)
 8007fe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fe8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <USBH_LL_Init+0x74>)
 8007fec:	2208      	movs	r2, #8
 8007fee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ff0:	4b10      	ldr	r3, [pc, #64]	; (8008034 <USBH_LL_Init+0x74>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <USBH_LL_Init+0x74>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <USBH_LL_Init+0x74>)
 8007ffe:	2202      	movs	r2, #2
 8008000:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <USBH_LL_Init+0x74>)
 8008004:	2200      	movs	r2, #0
 8008006:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008008:	480a      	ldr	r0, [pc, #40]	; (8008034 <USBH_LL_Init+0x74>)
 800800a:	f7f9 fa80 	bl	800150e <HAL_HCD_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008014:	f7f8 fd3a 	bl	8000a8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008018:	4806      	ldr	r0, [pc, #24]	; (8008034 <USBH_LL_Init+0x74>)
 800801a:	f7f9 fe64 	bl	8001ce6 <HAL_HCD_GetCurrentFrame>
 800801e:	4603      	mov	r3, r0
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fe ff60 	bl	8006ee8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000584 	.word	0x20000584

08008038 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800804e:	4618      	mov	r0, r3
 8008050:	f7f9 fdd3 	bl	8001bfa <HAL_HCD_Start>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f95c 	bl	8008318 <USBH_Get_USB_Status>
 8008060:	4603      	mov	r3, r0
 8008062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008064:	7bbb      	ldrb	r3, [r7, #14]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008084:	4618      	mov	r0, r3
 8008086:	f7f9 fddb 	bl	8001c40 <HAL_HCD_Stop>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f941 	bl	8008318 <USBH_Get_USB_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809a:	7bbb      	ldrb	r3, [r7, #14]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f9 fe23 	bl	8001d02 <HAL_HCD_GetCurrentSpeed>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d00c      	beq.n	80080dc <USBH_LL_GetSpeed+0x38>
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d80d      	bhi.n	80080e2 <USBH_LL_GetSpeed+0x3e>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <USBH_LL_GetSpeed+0x2c>
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d003      	beq.n	80080d6 <USBH_LL_GetSpeed+0x32>
 80080ce:	e008      	b.n	80080e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
    break;
 80080d4:	e008      	b.n	80080e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080d6:	2301      	movs	r3, #1
 80080d8:	73fb      	strb	r3, [r7, #15]
    break;
 80080da:	e005      	b.n	80080e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080dc:	2302      	movs	r3, #2
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e002      	b.n	80080e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
    break;
 80080e6:	bf00      	nop
  }
  return  speed;
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 fdb6 	bl	8001c7a <HAL_HCD_ResetPort>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8ff 	bl	8008318 <USBH_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 fdbd 	bl	8001cbe <HAL_HCD_HC_GetXferCount>
 8008144:	4603      	mov	r3, r0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800814e:	b590      	push	{r4, r7, lr}
 8008150:	b089      	sub	sp, #36	; 0x24
 8008152:	af04      	add	r7, sp, #16
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	461a      	mov	r2, r3
 800815c:	4603      	mov	r3, r0
 800815e:	70fb      	strb	r3, [r7, #3]
 8008160:	460b      	mov	r3, r1
 8008162:	70bb      	strb	r3, [r7, #2]
 8008164:	4613      	mov	r3, r2
 8008166:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008176:	787c      	ldrb	r4, [r7, #1]
 8008178:	78ba      	ldrb	r2, [r7, #2]
 800817a:	78f9      	ldrb	r1, [r7, #3]
 800817c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4623      	mov	r3, r4
 800818e:	f7f9 fa20 	bl	80015d2 <HAL_HCD_HC_Init>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f8bd 	bl	8008318 <USBH_Get_USB_Status>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}

080081ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7f9 fa90 	bl	80016f0 <HAL_HCD_HC_Halt>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f89e 	bl	8008318 <USBH_Get_USB_Status>
 80081dc:	4603      	mov	r3, r0
 80081de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081ea:	b590      	push	{r4, r7, lr}
 80081ec:	b089      	sub	sp, #36	; 0x24
 80081ee:	af04      	add	r7, sp, #16
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	4608      	mov	r0, r1
 80081f4:	4611      	mov	r1, r2
 80081f6:	461a      	mov	r2, r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	70fb      	strb	r3, [r7, #3]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70bb      	strb	r3, [r7, #2]
 8008200:	4613      	mov	r3, r2
 8008202:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008212:	787c      	ldrb	r4, [r7, #1]
 8008214:	78ba      	ldrb	r2, [r7, #2]
 8008216:	78f9      	ldrb	r1, [r7, #3]
 8008218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4623      	mov	r3, r4
 800822e:	f7f9 fa83 	bl	8001738 <HAL_HCD_HC_SubmitRequest>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f86d 	bl	8008318 <USBH_Get_USB_Status>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008242:	7bbb      	ldrb	r3, [r7, #14]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	bd90      	pop	{r4, r7, pc}

0800824c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7f9 fd17 	bl	8001c96 <HAL_HCD_HC_GetURBState>
 8008268:	4603      	mov	r3, r0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008284:	2b01      	cmp	r3, #1
 8008286:	d103      	bne.n	8008290 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f870 	bl	8008370 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008290:	20c8      	movs	r0, #200	; 0xc8
 8008292:	f7f8 fe51 	bl	8000f38 <HAL_Delay>
  return USBH_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
 80082ac:	4613      	mov	r3, r2
 80082ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	212c      	movs	r1, #44	; 0x2c
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	333b      	adds	r3, #59	; 0x3b
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d009      	beq.n	80082e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	212c      	movs	r1, #44	; 0x2c
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	4413      	add	r3, r2
 80082d8:	3354      	adds	r3, #84	; 0x54
 80082da:	78ba      	ldrb	r2, [r7, #2]
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e008      	b.n	80082f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	212c      	movs	r1, #44	; 0x2c
 80082e6:	fb01 f303 	mul.w	r3, r1, r3
 80082ea:	4413      	add	r3, r2
 80082ec:	3355      	adds	r3, #85	; 0x55
 80082ee:	78ba      	ldrb	r2, [r7, #2]
 80082f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7f8 fe15 	bl	8000f38 <HAL_Delay>
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d817      	bhi.n	800835c <USBH_Get_USB_Status+0x44>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USBH_Get_USB_Status+0x1c>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008345 	.word	0x08008345
 8008338:	0800834b 	.word	0x0800834b
 800833c:	08008351 	.word	0x08008351
 8008340:	08008357 	.word	0x08008357
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
    break;
 8008348:	e00b      	b.n	8008362 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800834a:	2302      	movs	r3, #2
 800834c:	73fb      	strb	r3, [r7, #15]
    break;
 800834e:	e008      	b.n	8008362 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008350:	2301      	movs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
    break;
 8008354:	e005      	b.n	8008362 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008356:	2302      	movs	r3, #2
 8008358:	73fb      	strb	r3, [r7, #15]
    break;
 800835a:	e002      	b.n	8008362 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800835c:	2302      	movs	r3, #2
 800835e:	73fb      	strb	r3, [r7, #15]
    break;
 8008360:	bf00      	nop
  }
  return usb_status;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	e001      	b.n	800838e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800838a:	2301      	movs	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	461a      	mov	r2, r3
 8008392:	2101      	movs	r1, #1
 8008394:	4803      	ldr	r0, [pc, #12]	; (80083a4 <MX_DriverVbusFS+0x34>)
 8008396:	f7f9 f8a1 	bl	80014dc <HAL_GPIO_WritePin>
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40020800 	.word	0x40020800

080083a8 <__errno>:
 80083a8:	4b01      	ldr	r3, [pc, #4]	; (80083b0 <__errno+0x8>)
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	2000002c 	.word	0x2000002c

080083b4 <__libc_init_array>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	4d0d      	ldr	r5, [pc, #52]	; (80083ec <__libc_init_array+0x38>)
 80083b8:	4c0d      	ldr	r4, [pc, #52]	; (80083f0 <__libc_init_array+0x3c>)
 80083ba:	1b64      	subs	r4, r4, r5
 80083bc:	10a4      	asrs	r4, r4, #2
 80083be:	2600      	movs	r6, #0
 80083c0:	42a6      	cmp	r6, r4
 80083c2:	d109      	bne.n	80083d8 <__libc_init_array+0x24>
 80083c4:	4d0b      	ldr	r5, [pc, #44]	; (80083f4 <__libc_init_array+0x40>)
 80083c6:	4c0c      	ldr	r4, [pc, #48]	; (80083f8 <__libc_init_array+0x44>)
 80083c8:	f000 f92e 	bl	8008628 <_init>
 80083cc:	1b64      	subs	r4, r4, r5
 80083ce:	10a4      	asrs	r4, r4, #2
 80083d0:	2600      	movs	r6, #0
 80083d2:	42a6      	cmp	r6, r4
 80083d4:	d105      	bne.n	80083e2 <__libc_init_array+0x2e>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083dc:	4798      	blx	r3
 80083de:	3601      	adds	r6, #1
 80083e0:	e7ee      	b.n	80083c0 <__libc_init_array+0xc>
 80083e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e6:	4798      	blx	r3
 80083e8:	3601      	adds	r6, #1
 80083ea:	e7f2      	b.n	80083d2 <__libc_init_array+0x1e>
 80083ec:	08008684 	.word	0x08008684
 80083f0:	08008684 	.word	0x08008684
 80083f4:	08008684 	.word	0x08008684
 80083f8:	08008688 	.word	0x08008688

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b87f 	b.w	8008504 <_malloc_r>
 8008406:	bf00      	nop
 8008408:	2000002c 	.word	0x2000002c

0800840c <free>:
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <free+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f000 b80b 	b.w	800842c <_free_r>
 8008416:	bf00      	nop
 8008418:	2000002c 	.word	0x2000002c

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <_free_r>:
 800842c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800842e:	2900      	cmp	r1, #0
 8008430:	d044      	beq.n	80084bc <_free_r+0x90>
 8008432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008436:	9001      	str	r0, [sp, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f1a1 0404 	sub.w	r4, r1, #4
 800843e:	bfb8      	it	lt
 8008440:	18e4      	addlt	r4, r4, r3
 8008442:	f000 f8e3 	bl	800860c <__malloc_lock>
 8008446:	4a1e      	ldr	r2, [pc, #120]	; (80084c0 <_free_r+0x94>)
 8008448:	9801      	ldr	r0, [sp, #4]
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	b933      	cbnz	r3, 800845c <_free_r+0x30>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	6014      	str	r4, [r2, #0]
 8008452:	b003      	add	sp, #12
 8008454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008458:	f000 b8de 	b.w	8008618 <__malloc_unlock>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d908      	bls.n	8008472 <_free_r+0x46>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf01      	itttt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	1949      	addeq	r1, r1, r5
 800846e:	6021      	streq	r1, [r4, #0]
 8008470:	e7ed      	b.n	800844e <_free_r+0x22>
 8008472:	461a      	mov	r2, r3
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b10b      	cbz	r3, 800847c <_free_r+0x50>
 8008478:	42a3      	cmp	r3, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x46>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	1855      	adds	r5, r2, r1
 8008480:	42a5      	cmp	r5, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x70>
 8008484:	6824      	ldr	r4, [r4, #0]
 8008486:	4421      	add	r1, r4
 8008488:	1854      	adds	r4, r2, r1
 800848a:	42a3      	cmp	r3, r4
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	d1e0      	bne.n	8008452 <_free_r+0x26>
 8008490:	681c      	ldr	r4, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	6053      	str	r3, [r2, #4]
 8008496:	4421      	add	r1, r4
 8008498:	6011      	str	r1, [r2, #0]
 800849a:	e7da      	b.n	8008452 <_free_r+0x26>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x78>
 800849e:	230c      	movs	r3, #12
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	e7d6      	b.n	8008452 <_free_r+0x26>
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	1961      	adds	r1, r4, r5
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf04      	itt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	bf04      	itt	eq
 80084b4:	1949      	addeq	r1, r1, r5
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	6054      	str	r4, [r2, #4]
 80084ba:	e7ca      	b.n	8008452 <_free_r+0x26>
 80084bc:	b003      	add	sp, #12
 80084be:	bd30      	pop	{r4, r5, pc}
 80084c0:	20000888 	.word	0x20000888

080084c4 <sbrk_aligned>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4e0e      	ldr	r6, [pc, #56]	; (8008500 <sbrk_aligned+0x3c>)
 80084c8:	460c      	mov	r4, r1
 80084ca:	6831      	ldr	r1, [r6, #0]
 80084cc:	4605      	mov	r5, r0
 80084ce:	b911      	cbnz	r1, 80084d6 <sbrk_aligned+0x12>
 80084d0:	f000 f88c 	bl	80085ec <_sbrk_r>
 80084d4:	6030      	str	r0, [r6, #0]
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	f000 f887 	bl	80085ec <_sbrk_r>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d00a      	beq.n	80084f8 <sbrk_aligned+0x34>
 80084e2:	1cc4      	adds	r4, r0, #3
 80084e4:	f024 0403 	bic.w	r4, r4, #3
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d007      	beq.n	80084fc <sbrk_aligned+0x38>
 80084ec:	1a21      	subs	r1, r4, r0
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f87c 	bl	80085ec <_sbrk_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d101      	bne.n	80084fc <sbrk_aligned+0x38>
 80084f8:	f04f 34ff 	mov.w	r4, #4294967295
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	2000088c 	.word	0x2000088c

08008504 <_malloc_r>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	1ccd      	adds	r5, r1, #3
 800850a:	f025 0503 	bic.w	r5, r5, #3
 800850e:	3508      	adds	r5, #8
 8008510:	2d0c      	cmp	r5, #12
 8008512:	bf38      	it	cc
 8008514:	250c      	movcc	r5, #12
 8008516:	2d00      	cmp	r5, #0
 8008518:	4607      	mov	r7, r0
 800851a:	db01      	blt.n	8008520 <_malloc_r+0x1c>
 800851c:	42a9      	cmp	r1, r5
 800851e:	d905      	bls.n	800852c <_malloc_r+0x28>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	2600      	movs	r6, #0
 8008526:	4630      	mov	r0, r6
 8008528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852c:	4e2e      	ldr	r6, [pc, #184]	; (80085e8 <_malloc_r+0xe4>)
 800852e:	f000 f86d 	bl	800860c <__malloc_lock>
 8008532:	6833      	ldr	r3, [r6, #0]
 8008534:	461c      	mov	r4, r3
 8008536:	bb34      	cbnz	r4, 8008586 <_malloc_r+0x82>
 8008538:	4629      	mov	r1, r5
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff ffc2 	bl	80084c4 <sbrk_aligned>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	4604      	mov	r4, r0
 8008544:	d14d      	bne.n	80085e2 <_malloc_r+0xde>
 8008546:	6834      	ldr	r4, [r6, #0]
 8008548:	4626      	mov	r6, r4
 800854a:	2e00      	cmp	r6, #0
 800854c:	d140      	bne.n	80085d0 <_malloc_r+0xcc>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	4631      	mov	r1, r6
 8008552:	4638      	mov	r0, r7
 8008554:	eb04 0803 	add.w	r8, r4, r3
 8008558:	f000 f848 	bl	80085ec <_sbrk_r>
 800855c:	4580      	cmp	r8, r0
 800855e:	d13a      	bne.n	80085d6 <_malloc_r+0xd2>
 8008560:	6821      	ldr	r1, [r4, #0]
 8008562:	3503      	adds	r5, #3
 8008564:	1a6d      	subs	r5, r5, r1
 8008566:	f025 0503 	bic.w	r5, r5, #3
 800856a:	3508      	adds	r5, #8
 800856c:	2d0c      	cmp	r5, #12
 800856e:	bf38      	it	cc
 8008570:	250c      	movcc	r5, #12
 8008572:	4629      	mov	r1, r5
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ffa5 	bl	80084c4 <sbrk_aligned>
 800857a:	3001      	adds	r0, #1
 800857c:	d02b      	beq.n	80085d6 <_malloc_r+0xd2>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	442b      	add	r3, r5
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	e00e      	b.n	80085a4 <_malloc_r+0xa0>
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	1b52      	subs	r2, r2, r5
 800858a:	d41e      	bmi.n	80085ca <_malloc_r+0xc6>
 800858c:	2a0b      	cmp	r2, #11
 800858e:	d916      	bls.n	80085be <_malloc_r+0xba>
 8008590:	1961      	adds	r1, r4, r5
 8008592:	42a3      	cmp	r3, r4
 8008594:	6025      	str	r5, [r4, #0]
 8008596:	bf18      	it	ne
 8008598:	6059      	strne	r1, [r3, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	bf08      	it	eq
 800859e:	6031      	streq	r1, [r6, #0]
 80085a0:	5162      	str	r2, [r4, r5]
 80085a2:	604b      	str	r3, [r1, #4]
 80085a4:	4638      	mov	r0, r7
 80085a6:	f104 060b 	add.w	r6, r4, #11
 80085aa:	f000 f835 	bl	8008618 <__malloc_unlock>
 80085ae:	f026 0607 	bic.w	r6, r6, #7
 80085b2:	1d23      	adds	r3, r4, #4
 80085b4:	1af2      	subs	r2, r6, r3
 80085b6:	d0b6      	beq.n	8008526 <_malloc_r+0x22>
 80085b8:	1b9b      	subs	r3, r3, r6
 80085ba:	50a3      	str	r3, [r4, r2]
 80085bc:	e7b3      	b.n	8008526 <_malloc_r+0x22>
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	bf0c      	ite	eq
 80085c4:	6032      	streq	r2, [r6, #0]
 80085c6:	605a      	strne	r2, [r3, #4]
 80085c8:	e7ec      	b.n	80085a4 <_malloc_r+0xa0>
 80085ca:	4623      	mov	r3, r4
 80085cc:	6864      	ldr	r4, [r4, #4]
 80085ce:	e7b2      	b.n	8008536 <_malloc_r+0x32>
 80085d0:	4634      	mov	r4, r6
 80085d2:	6876      	ldr	r6, [r6, #4]
 80085d4:	e7b9      	b.n	800854a <_malloc_r+0x46>
 80085d6:	230c      	movs	r3, #12
 80085d8:	603b      	str	r3, [r7, #0]
 80085da:	4638      	mov	r0, r7
 80085dc:	f000 f81c 	bl	8008618 <__malloc_unlock>
 80085e0:	e7a1      	b.n	8008526 <_malloc_r+0x22>
 80085e2:	6025      	str	r5, [r4, #0]
 80085e4:	e7de      	b.n	80085a4 <_malloc_r+0xa0>
 80085e6:	bf00      	nop
 80085e8:	20000888 	.word	0x20000888

080085ec <_sbrk_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	; (8008608 <_sbrk_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f8 fbba 	bl	8000d70 <_sbrk>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_sbrk_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_sbrk_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20000890 	.word	0x20000890

0800860c <__malloc_lock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_lock+0x8>)
 800860e:	f000 b809 	b.w	8008624 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	20000894 	.word	0x20000894

08008618 <__malloc_unlock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_unlock+0x8>)
 800861a:	f000 b804 	b.w	8008626 <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	20000894 	.word	0x20000894

08008624 <__retarget_lock_acquire_recursive>:
 8008624:	4770      	bx	lr

08008626 <__retarget_lock_release_recursive>:
 8008626:	4770      	bx	lr

08008628 <_init>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	bf00      	nop
 800862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862e:	bc08      	pop	{r3}
 8008630:	469e      	mov	lr, r3
 8008632:	4770      	bx	lr

08008634 <_fini>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	bf00      	nop
 8008638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863a:	bc08      	pop	{r3}
 800863c:	469e      	mov	lr, r3
 800863e:	4770      	bx	lr
