
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009574  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800977c  0800977c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000850  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce16  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004054  00000000  00000000  0003ced6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  00040f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268eb  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db8a  00000000  00000000  0006a45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc700  00000000  00000000  00087fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001646e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000658c  00000000  00000000  00164738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096ec 	.word	0x080096ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080096ec 	.word	0x080096ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_ZN17LiquidCrystal_I2CC1E17I2C_HandleTypeDefhhh>:
 *      Author: Alexandr
 */

#include "LiquidCrystalI2C.h"

LiquidCrystal_I2C::LiquidCrystal_I2C(I2C_HandleTypeDef hi2c, uint8_t addr,
 8000574:	b084      	sub	sp, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	f107 0014 	add.w	r0, r7, #20
 8000582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		uint8_t rows, uint8_t cols) :
		_hi2c(hi2c), _addr(addr), _rows(rows), _cols(cols), _backlightval(
		LCD_NOBACKLIGHT) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4618      	mov	r0, r3
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2254      	movs	r2, #84	; 0x54
 8000590:	4619      	mov	r1, r3
 8000592:	f008 fc21 	bl	8008dd8 <memcpy>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800059c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80005a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80005b0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

}
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c8:	b004      	add	sp, #16
 80005ca:	4770      	bx	lr

080005cc <_ZN17LiquidCrystal_I2C13expanderWriteEhh>:

HAL_StatusTypeDef LiquidCrystal_I2C::expanderWrite(uint8_t data,
		uint8_t flags) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
 80005d8:	4613      	mov	r3, r2
 80005da:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef res;
	do {
		res = HAL_I2C_IsDeviceReady(&_hi2c, _addr << 1, 1, HAL_MAX_DELAY);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	2201      	movs	r2, #1
 80005f0:	f003 f840 	bl	8003674 <HAL_I2C_IsDeviceReady>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	} while (res != HAL_OK);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d000      	beq.n	8000600 <_ZN17LiquidCrystal_I2C13expanderWriteEhh+0x34>
	do {
 80005fe:	e7ed      	b.n	80005dc <_ZN17LiquidCrystal_I2C13expanderWriteEhh+0x10>

	uint8_t up = data & 0xF0;
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	f023 030f 	bic.w	r3, r3, #15
 8000606:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	011b      	lsls	r3, r3, #4
 800060c:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | _backlightval | PIN_EN;
 800060e:	7bba      	ldrb	r2, [r7, #14]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	4313      	orrs	r3, r2
 8000614:	b2da      	uxtb	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800061c:	4313      	orrs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	b2db      	uxtb	r3, r3
 8000626:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | _backlightval;
 8000628:	7bba      	ldrb	r2, [r7, #14]
 800062a:	78bb      	ldrb	r3, [r7, #2]
 800062c:	4313      	orrs	r3, r2
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | _backlightval | PIN_EN;
 800063c:	7b7a      	ldrb	r2, [r7, #13]
 800063e:	78bb      	ldrb	r3, [r7, #2]
 8000640:	4313      	orrs	r3, r2
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800064a:	4313      	orrs	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | _backlightval;
 8000656:	7b7a      	ldrb	r2, [r7, #13]
 8000658:	78bb      	ldrb	r3, [r7, #2]
 800065a:	4313      	orrs	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000664:	4313      	orrs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&_hi2c, _addr << 1, data_arr,
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000672:	b29b      	uxth	r3, r3
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b299      	uxth	r1, r3
 8000678:	f107 0208 	add.w	r2, r7, #8
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2304      	movs	r3, #4
 8000684:	f002 fef8 	bl	8003478 <HAL_I2C_Master_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]
			sizeof(data_arr), HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 800068c:	2005      	movs	r0, #5
 800068e:	f000 feb9 	bl	8001404 <HAL_Delay>
	return res;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>:

void LiquidCrystal_I2C::sendCommand(uint8_t cmd) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]

	expanderWrite(cmd, 0);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff8c 	bl	80005cc <_ZN17LiquidCrystal_I2C13expanderWriteEhh>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZN17LiquidCrystal_I2C8sendDataEh>:

void LiquidCrystal_I2C::sendData(uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]

	expanderWrite(data, PIN_RS);
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff7c 	bl	80005cc <_ZN17LiquidCrystal_I2C13expanderWriteEhh>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_ZN17LiquidCrystal_I2C5clearEv>:

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	sendCommand(LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 80006e4:	2101      	movs	r1, #1
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffd8 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_ZN17LiquidCrystal_I2C9backlightEv>:
void LiquidCrystal_I2C::noBacklight() {

	_backlightval = LCD_NOBACKLIGHT;
	sendCommand(0);
}
void LiquidCrystal_I2C::backlight() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	_backlightval = LCD_BACKLIGHT;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2208      	movs	r2, #8
 8000700:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	sendCommand(0);
 8000704:	2100      	movs	r1, #0
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc8 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_ZN17LiquidCrystal_I2C4initEv>:

void LiquidCrystal_I2C::init() {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	 begin(_cols, _rows);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8000730:	2300      	movs	r3, #0
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f804 	bl	8000740 <_ZN17LiquidCrystal_I2C5beginEhhh>

}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <_ZN17LiquidCrystal_I2C5beginEhhh>:
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t rows, uint8_t charsize) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4603      	mov	r3, r0
 8000750:	70fb      	strb	r3, [r7, #3]
 8000752:	460b      	mov	r3, r1
 8000754:	70bb      	strb	r3, [r7, #2]
 8000756:	4613      	mov	r3, r2
 8000758:	707b      	strb	r3, [r7, #1]

	if (rows > 1) {
 800075a:	78bb      	ldrb	r3, [r7, #2]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d908      	bls.n	8000772 <_ZN17LiquidCrystal_I2C5beginEhhh+0x32>
			_displayfunction |= LCD_2LINE;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	b2da      	uxtb	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		}
		_numlines = rows;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	78ba      	ldrb	r2, [r7, #2]
 8000776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

		// for some 1 line displays you can select a 10 pixel high font
		if ((charsize != 0) && (rows == 1)) {
 800077a:	787b      	ldrb	r3, [r7, #1]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00b      	beq.n	8000798 <_ZN17LiquidCrystal_I2C5beginEhhh+0x58>
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d108      	bne.n	8000798 <_ZN17LiquidCrystal_I2C5beginEhhh+0x58>
			_displayfunction |= LCD_5x10DOTS;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	b2da      	uxtb	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		// according to datasheet, we need at least 40ms after power rises above 2.7V
		// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
		//HAL_Delay(Delay)(50);

		// Now we pull both RS and R/W low to begin commands
		sendCommand(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800079e:	4619      	mov	r1, r3
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff7b 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
	  	//put the LCD into 4 bit mode
		// this is according to the hitachi HD44780 datasheet
		// figure 24, pg 46

		  // we start in 8bit mode, try to set 4 bit mode
	   sendCommand(0x03 << 4);
 80007a6:	2130      	movs	r1, #48	; 0x30
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff77 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
	   //HAL_Delay(LCD_DELAY_MS);

	   // second try
	   sendCommand(0x03 << 4);
 80007ae:	2130      	movs	r1, #48	; 0x30
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff73 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
	   ///HAL_Delay(LCD_DELAY_MS);

	   // third go!
	   sendCommand(0x03 << 4);
 80007b6:	2130      	movs	r1, #48	; 0x30
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff6f 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
	   //HAL_Delay(LCD_DELAY_MS);

	   // finally, set to 4-bit interface
	   sendCommand(0x02 << 4);
 80007be:	2120      	movs	r1, #32
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff6b 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>


		// set # lines, font size, etc.
		sendCommand(LCD_FUNCTIONSET | _displayfunction);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff61 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>

		// turn the display on with no cursor or blinking default
		_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2204      	movs	r2, #4
 80007de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		display();
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f824 	bl	8000830 <_ZN17LiquidCrystal_I2C7displayEv>

		// clear it off
		clear();
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff77 	bl	80006dc <_ZN17LiquidCrystal_I2C5clearEv>

		// Initialize to default text direction (for roman languages)
		_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2202      	movs	r2, #2
 80007f2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

		// set the entry mode
		sendCommand(LCD_ENTRYMODESET | _displaymode);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff49 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>

		home();
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f804 	bl	8000818 <_ZN17LiquidCrystal_I2C4homeEv>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	sendCommand(LCD_RETURNHOME);  // set cursor position to zero
 8000820:	2102      	movs	r1, #2
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff3a 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZN17LiquidCrystal_I2C7displayEv>:

void LiquidCrystal_I2C::display() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	_displaycontrol |= LCD_DISPLAYON;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	sendCommand(LCD_DISPLAYCONTROL | _displaycontrol);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff1f 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <_ZN17LiquidCrystal_I2C9setCursorEhh>:


void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
 8000874:	4613      	mov	r3, r2
 8000876:	70bb      	strb	r3, [r7, #2]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x60>)
 800087a:	f107 0408 	add.w	r4, r7, #8
 800087e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ( row > _numlines ) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800088a:	78ba      	ldrb	r2, [r7, #2]
 800088c:	429a      	cmp	r2, r3
 800088e:	d904      	bls.n	800089a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x32>
		row = _numlines-1;    // we count rows starting w/0
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000896:	3b01      	subs	r3, #1
 8000898:	70bb      	strb	r3, [r7, #2]
	}
	sendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800089a:	78bb      	ldrb	r3, [r7, #2]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	3318      	adds	r3, #24
 80008a0:	443b      	add	r3, r7
 80008a2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4619      	mov	r1, r3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff feee 	bl	800069c <_ZN17LiquidCrystal_I2C11sendCommandEh>
}
 80008c0:	bf00      	nop
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	08009704 	.word	0x08009704

080008cc <_ZN17LiquidCrystal_I2C8printstrEPKc>:
void LiquidCrystal_I2C::printstr(const char* str){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]

	while(*str) {
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d009      	beq.n	80008f2 <_ZN17LiquidCrystal_I2C8printstrEPKc+0x26>
	        sendData((uint8_t)(*str));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fee9 	bl	80006bc <_ZN17LiquidCrystal_I2C8sendDataEh>
	        str++;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
	while(*str) {
 80008f0:	e7f1      	b.n	80008d6 <_ZN17LiquidCrystal_I2C8printstrEPKc+0xa>
	    }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b0b2      	sub	sp, #200	; 0xc8
 8000900:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fd0d 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f867 	bl	80009d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 f9df 	bl	8000ccc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800090e:	f000 f8d7 	bl	8000ac0 <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 8000912:	f000 f909 	bl	8000b28 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8000916:	f000 f93b 	bl	8000b90 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 800091a:	f007 ff1b 	bl	8008754 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800091e:	f000 f973 	bl	8000c08 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000922:	213c      	movs	r1, #60	; 0x3c
 8000924:	4828      	ldr	r0, [pc, #160]	; (80009c8 <main+0xcc>)
 8000926:	f004 fd70 	bl	800540a <HAL_TIM_Encoder_Start>

  	LiquidCrystal_I2C lcd(hi2c1, 0x27, 16, 2);
 800092a:	4c28      	ldr	r4, [pc, #160]	; (80009cc <main+0xd0>)
 800092c:	f107 0510 	add.w	r5, r7, #16
 8000930:	2302      	movs	r3, #2
 8000932:	9314      	str	r3, [sp, #80]	; 0x50
 8000934:	2310      	movs	r3, #16
 8000936:	9313      	str	r3, [sp, #76]	; 0x4c
 8000938:	2327      	movs	r3, #39	; 0x27
 800093a:	9312      	str	r3, [sp, #72]	; 0x48
 800093c:	4668      	mov	r0, sp
 800093e:	f104 030c 	add.w	r3, r4, #12
 8000942:	2248      	movs	r2, #72	; 0x48
 8000944:	4619      	mov	r1, r3
 8000946:	f008 fa47 	bl	8008dd8 <memcpy>
 800094a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800094e:	4628      	mov	r0, r5
 8000950:	f7ff fe10 	bl	8000574 <_ZN17LiquidCrystal_I2CC1E17I2C_HandleTypeDefhhh>
  	lcd.init();
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fedb 	bl	8000714 <_ZN17LiquidCrystal_I2C4initEv>
  	lcd.backlight();
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fec6 	bl	80006f4 <_ZN17LiquidCrystal_I2C9backlightEv>
  	lcd.setCursor(6, 1);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2201      	movs	r2, #1
 800096e:	2106      	movs	r1, #6
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff79 	bl	8000868 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  	lcd.printstr("TEST");
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4915      	ldr	r1, [pc, #84]	; (80009d0 <main+0xd4>)
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffa5 	bl	80008cc <_ZN17LiquidCrystal_I2C8printstrEPKc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000982:	f007 ff0d 	bl	80087a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


	int currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <main+0xcc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	66fb      	str	r3, [r7, #108]	; 0x6c

	char buff[16];
	snprintf(buff, sizeof(buff), "%06d", currCounter /2);
 800098e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000990:	0fda      	lsrs	r2, r3, #31
 8000992:	4413      	add	r3, r2
 8000994:	105b      	asrs	r3, r3, #1
 8000996:	4638      	mov	r0, r7
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <main+0xd8>)
 800099a:	2110      	movs	r1, #16
 800099c:	f008 fb22 	bl	8008fe4 <sniprintf>

	lcd.setCursor(0, 0);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5d 	bl	8000868 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.printstr(buff);
 80009ae:	463a      	mov	r2, r7
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff88 	bl	80008cc <_ZN17LiquidCrystal_I2C8printstrEPKc>

	HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c0:	f000 fd20 	bl	8001404 <HAL_Delay>
  }
 80009c4:	e7dd      	b.n	8000982 <main+0x86>
 80009c6:	bf00      	nop
 80009c8:	200001a0 	.word	0x200001a0
 80009cc:	200000ac 	.word	0x200000ac
 80009d0:	08009714 	.word	0x08009714
 80009d4:	0800971c 	.word	0x0800971c

080009d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f008 fa04 	bl	8008df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <_Z18SystemClock_Configv+0xe0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a2c      	ldr	r2, [pc, #176]	; (8000ab8 <_Z18SystemClock_Configv+0xe0>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <_Z18SystemClock_Configv+0xe0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <_Z18SystemClock_Configv+0xe4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <_Z18SystemClock_Configv+0xe4>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <_Z18SystemClock_Configv+0xe4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fde0 	bl	8004624 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000a74:	f000 fa28 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2105      	movs	r1, #5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 f83c 	bl	8004b14 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000aac:	f000 fa0c 	bl	8000ec8 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	; 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <_ZL12MX_I2C1_Initv+0x60>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <_ZL12MX_I2C1_Initv+0x64>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <_ZL12MX_I2C1_Initv+0x5c>)
 8000afe:	f002 fb77 	bl	80031f0 <HAL_I2C_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000b12:	f000 f9d9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000ac 	.word	0x200000ac
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <_ZL12MX_I2S3_Initv+0x60>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <_ZL12MX_I2S3_Initv+0x64>)
 8000b52:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b68:	f003 f8bc 	bl	8003ce4 <HAL_I2S_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000b7c:	f000 f9a4 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000100 	.word	0x20000100
 8000b88:	40003c00 	.word	0x40003c00
 8000b8c:	00017700 	.word	0x00017700

08000b90 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <_ZL12MX_SPI1_Initv+0x74>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <_ZL12MX_SPI1_Initv+0x70>)
 8000be2:	f004 fae3 	bl	80051ac <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	bf14      	ite	ne
 8000bec:	2301      	movne	r3, #1
 8000bee:	2300      	moveq	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f967 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000148 	.word	0x20000148
 8000c04:	40013000 	.word	0x40013000

08000c08 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2224      	movs	r2, #36	; 0x24
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 f8ec 	bl	8008df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c26:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <_ZL12MX_TIM1_Initv+0xc0>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c7c:	f004 fb1f 	bl	80052be <HAL_TIM_Encoder_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f91a 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ca2:	f004 fd07 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 f907 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001a0 	.word	0x200001a0
 8000cc8:	40010000 	.word	0x40010000

08000ccc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a71      	ldr	r2, [pc, #452]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a6a      	ldr	r2, [pc, #424]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b68      	ldr	r3, [pc, #416]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b64      	ldr	r3, [pc, #400]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a63      	ldr	r2, [pc, #396]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b61      	ldr	r3, [pc, #388]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b5a      	ldr	r3, [pc, #360]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a55      	ldr	r2, [pc, #340]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b4f      	ldr	r3, [pc, #316]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000d90:	f000 fe0a 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2101      	movs	r1, #1
 8000d98:	4847      	ldr	r0, [pc, #284]	; (8000eb8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000d9a:	f000 fe05 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da4:	4845      	ldr	r0, [pc, #276]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1f0>)
 8000da6:	f000 fdff 	bl	80019a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000daa:	2308      	movs	r3, #8
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483c      	ldr	r0, [pc, #240]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000dc2:	f000 fc55 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4836      	ldr	r0, [pc, #216]	; (8000eb8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000dde:	f000 fc47 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000de2:	2308      	movs	r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df2:	2305      	movs	r3, #5
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	482e      	ldr	r0, [pc, #184]	; (8000eb8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000dfe:	f000 fc37 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e18:	f000 fc2a 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e30:	f000 fc1e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e46:	2305      	movs	r3, #5
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e52:	f000 fc0d 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e56:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e70:	f000 fbfe 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e74:	2320      	movs	r3, #32
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e88:	f000 fbf2 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000ea2:	f000 fbe5 	bl	8001670 <HAL_GPIO_Init>

}
 8000ea6:	bf00      	nop
 8000ea8:	3730      	adds	r7, #48	; 0x30
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f12:	2007      	movs	r0, #7
 8000f14:	f000 fb6a 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <HAL_I2C_MspInit+0x8c>)
 8000f80:	f000 fb76 	bl	8001670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_I2C_MspInit+0x88>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <HAL_I2S_MspInit+0xf0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d15a      	bne.n	800109a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ff99 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f7ff ff62 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 800100e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6313      	str	r3, [r2, #48]	; 0x30
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_I2S_MspInit+0xf4>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001068:	2306      	movs	r3, #6
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <HAL_I2S_MspInit+0xf8>)
 8001074:	f000 fafc 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001078:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800108a:	2306      	movs	r3, #6
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <HAL_I2S_MspInit+0xfc>)
 8001096:	f000 faeb 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3738      	adds	r7, #56	; 0x38
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40003c00 	.word	0x40003c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020800 	.word	0x40020800

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_SPI_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_SPI_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800110e:	23e0      	movs	r3, #224	; 0xe0
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111e:	2305      	movs	r3, #5
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 800112a:	f000 faa1 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40013000 	.word	0x40013000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800119e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80011bc:	f000 fa58 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021000 	.word	0x40021000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8d0 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <OTG_FS_IRQHandler+0x10>)
 800122e:	f000 fe3f 	bl	8001eb0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200005cc 	.word	0x200005cc

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f007 fd7a 	bl	8008d64 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20020000 	.word	0x20020000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200001e8 	.word	0x200001e8
 80012a4:	200008e0 	.word	0x200008e0

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f007 fd39 	bl	8008d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fafd 	bl	80008fc <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001310:	08009784 	.word	0x08009784
  ldr r2, =_sbss
 8001314:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001318:	200008e0 	.word	0x200008e0

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fdbe 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f967 	bl	8001656 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200001ec 	.word	0x200001ec

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001ec 	.word	0x200001ec

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e16b      	b.n	8001964 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 815a 	bne.w	800195e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b03      	cmp	r3, #3
 800172e:	d017      	beq.n	8001760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80b4 	beq.w	800195e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <HAL_GPIO_Init+0x30c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a5f      	ldr	r2, [pc, #380]	; (800197c <HAL_GPIO_Init+0x30c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_GPIO_Init+0x30c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001812:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_GPIO_Init+0x310>)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x314>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02b      	beq.n	8001896 <HAL_GPIO_Init+0x226>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a51      	ldr	r2, [pc, #324]	; (8001988 <HAL_GPIO_Init+0x318>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x222>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <HAL_GPIO_Init+0x31c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x21e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x320>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x21a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x324>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x216>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x328>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x212>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x32c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x20e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x330>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x20a>
 8001876:	2307      	movs	r3, #7
 8001878:	e00e      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800187a:	2308      	movs	r3, #8
 800187c:	e00c      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800187e:	2306      	movs	r3, #6
 8001880:	e00a      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001882:	2305      	movs	r3, #5
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001886:	2304      	movs	r3, #4
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001896:	2300      	movs	r3, #0
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a8:	4935      	ldr	r1, [pc, #212]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x334>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_GPIO_Init+0x334>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	f67f ae90 	bls.w	800168c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40013800 	.word	0x40013800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400
 800198c:	40020800 	.word	0x40020800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	40021000 	.word	0x40021000
 8001998:	40021400 	.word	0x40021400
 800199c:	40021800 	.word	0x40021800
 80019a0:	40021c00 	.word	0x40021c00
 80019a4:	40013c00 	.word	0x40013c00

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019dc:	b08f      	sub	sp, #60	; 0x3c
 80019de:	af0a      	add	r7, sp, #40	; 0x28
 80019e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e054      	b.n	8001a96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f006 ff02 	bl	8008810 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 ff30 	bl	8005890 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	687e      	ldr	r6, [r7, #4]
 8001a38:	466d      	mov	r5, sp
 8001a3a:	f106 0410 	add.w	r4, r6, #16
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a4e:	1d33      	adds	r3, r6, #4
 8001a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f003 feaa 	bl	80057ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 ff27 	bl	80058b2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	687e      	ldr	r6, [r7, #4]
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f106 0410 	add.w	r4, r6, #16
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a82:	1d33      	adds	r3, r6, #4
 8001a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f004 f8b0 	bl	8005bec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b089      	sub	sp, #36	; 0x24
 8001aa2:	af04      	add	r7, sp, #16
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70bb      	strb	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_HCD_HC_Init+0x28>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e076      	b.n	8001bb4 <HAL_HCD_HC_Init+0x116>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	333d      	adds	r3, #61	; 0x3d
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3338      	adds	r3, #56	; 0x38
 8001aee:	787a      	ldrb	r2, [r7, #1]
 8001af0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3340      	adds	r3, #64	; 0x40
 8001b00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3339      	adds	r3, #57	; 0x39
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	333f      	adds	r3, #63	; 0x3f
 8001b24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	78ba      	ldrb	r2, [r7, #2]
 8001b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b32:	b2d0      	uxtb	r0, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	333a      	adds	r3, #58	; 0x3a
 8001b40:	4602      	mov	r2, r0
 8001b42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da09      	bge.n	8001b60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	333b      	adds	r3, #59	; 0x3b
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e008      	b.n	8001b72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	333b      	adds	r3, #59	; 0x3b
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	787c      	ldrb	r4, [r7, #1]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	78f9      	ldrb	r1, [r7, #3]
 8001b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	f004 f9a9 	bl	8005ef8 <USB_HC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_HCD_HC_Halt+0x1e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00f      	b.n	8001bfa <HAL_HCD_HC_Halt+0x3e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fbf9 	bl	80063e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	70fb      	strb	r3, [r7, #3]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70bb      	strb	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	333b      	adds	r3, #59	; 0x3b
 8001c2c:	78ba      	ldrb	r2, [r7, #2]
 8001c2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	333f      	adds	r3, #63	; 0x3f
 8001c3e:	787a      	ldrb	r2, [r7, #1]
 8001c40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c42:	7c3b      	ldrb	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d112      	bne.n	8001c6e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3342      	adds	r3, #66	; 0x42
 8001c56:	2203      	movs	r2, #3
 8001c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	333d      	adds	r3, #61	; 0x3d
 8001c68:	7f3a      	ldrb	r2, [r7, #28]
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e008      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3342      	adds	r3, #66	; 0x42
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	f200 80c6 	bhi.w	8001e14 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001e01 	.word	0x08001e01
 8001c98:	08001d05 	.word	0x08001d05
 8001c9c:	08001d83 	.word	0x08001d83
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ca0:	7c3b      	ldrb	r3, [r7, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 80b8 	bne.w	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 80b4 	bne.w	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cb0:	8b3b      	ldrh	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3355      	adds	r3, #85	; 0x55
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3355      	adds	r3, #85	; 0x55
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cee:	e093      	b.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3342      	adds	r3, #66	; 0x42
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
      break;
 8001d02:	e089      	b.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d04:	78bb      	ldrb	r3, [r7, #2]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11d      	bne.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3355      	adds	r3, #85	; 0x55
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d30:	e073      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
      break;
 8001d44:	e069      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3354      	adds	r3, #84	; 0x54
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3342      	adds	r3, #66	; 0x42
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
      break;
 8001d6c:	e055      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3342      	adds	r3, #66	; 0x42
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	701a      	strb	r2, [r3, #0]
      break;
 8001d80:	e04b      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d82:	78bb      	ldrb	r3, [r7, #2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11d      	bne.n	8001dc4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3355      	adds	r3, #85	; 0x55
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3342      	adds	r3, #66	; 0x42
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dae:	e034      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3342      	adds	r3, #66	; 0x42
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e02a      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3354      	adds	r3, #84	; 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3342      	adds	r3, #66	; 0x42
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
      break;
 8001dea:	e016      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3342      	adds	r3, #66	; 0x42
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	701a      	strb	r2, [r3, #0]
      break;
 8001dfe:	e00c      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3342      	adds	r3, #66	; 0x42
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e14:	bf00      	nop
 8001e16:	e000      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e18:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3344      	adds	r3, #68	; 0x44
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	8b3a      	ldrh	r2, [r7, #24]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	202c      	movs	r0, #44	; 0x2c
 8001e34:	fb00 f303 	mul.w	r3, r0, r3
 8001e38:	440b      	add	r3, r1
 8001e3a:	334c      	adds	r3, #76	; 0x4c
 8001e3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3360      	adds	r3, #96	; 0x60
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3350      	adds	r3, #80	; 0x50
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3339      	adds	r3, #57	; 0x39
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3361      	adds	r3, #97	; 0x61
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	222c      	movs	r2, #44	; 0x2c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	3338      	adds	r3, #56	; 0x38
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	18d1      	adds	r1, r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f004 f94c 	bl	800613c <USB_HC_StartXfer>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fe4d 	bl	8005b66 <USB_GetMode>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 80f6 	bne.w	80020c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fe31 	bl	8005b40 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ec 	beq.w	80020be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fe28 	bl	8005b40 <USB_ReadInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001efa:	d104      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fe18 	bl	8005b40 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1a:	d104      	bne.n	8001f26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fe08 	bl	8005b40 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f3a:	d104      	bne.n	8001f46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fdf8 	bl	8005b40 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d103      	bne.n	8001f62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fdea 	bl	8005b40 <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f76:	d11c      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f92:	2110      	movs	r1, #16
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f003 fcd9 	bl	800594c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f9a:	6938      	ldr	r0, [r7, #16]
 8001f9c:	f003 fd0a 	bl	80059b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fee0 	bl	8005d6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f006 fcad 	bl	800890c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fdc2 	bl	8005b40 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc6:	d102      	bne.n	8001fce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 f89e 	bl	800310a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fdb4 	bl	8005b40 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d106      	bne.n	8001ff0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f006 fc76 	bl	80088d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fda3 	bl	8005b40 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b10      	cmp	r3, #16
 8002002:	d101      	bne.n	8002008 <HAL_HCD_IRQHandler+0x158>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_HCD_IRQHandler+0x15a>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0210 	bic.w	r2, r2, #16
 800201c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 ffa1 	bl	8002f66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0210 	orr.w	r2, r2, #16
 8002032:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fd81 	bl	8005b40 <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002048:	d13a      	bne.n	80020c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f9b6 	bl	80063c0 <USB_HC_ReadInterrupt>
 8002054:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e025      	b.n	80020a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002086:	d106      	bne.n	8002096 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ab 	bl	80021ea <HCD_HC_IN_IRQHandler>
 8002094:	e005      	b.n	80020a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fbf9 	bl	8002894 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3d4      	bcc.n	800205c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	e000      	b.n	80020c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80020be:	bf00      	nop
    }
  }
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_HCD_Start+0x16>
 80020d8:	2302      	movs	r3, #2
 80020da:	e013      	b.n	8002104 <HAL_HCD_Start+0x3e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fea2 	bl	8005e34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fbba 	bl	800586e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_HCD_Stop+0x16>
 800211e:	2302      	movs	r3, #2
 8002120:	e00d      	b.n	800213e <HAL_HCD_Stop+0x32>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fa90 	bl	8006654 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 fe44 	bl	8005de0 <USB_ResetPort>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	781b      	ldrb	r3, [r3, #0]
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3350      	adds	r3, #80	; 0x50
 80021a4:	681b      	ldr	r3, [r3, #0]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fe88 	bl	8005ed4 <USB_GetCurrentFrame>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fe63 	bl	8005ea6 <USB_GetHostSpeed>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b04      	cmp	r3, #4
 8002218:	d11a      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2304      	movs	r3, #4
 800222a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3361      	adds	r3, #97	; 0x61
 800223a:	2206      	movs	r2, #6
 800223c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f004 f8ca 	bl	80063e2 <USB_HC_Halt>
 800224e:	e0af      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002266:	d11b      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3361      	adds	r3, #97	; 0x61
 800228a:	2207      	movs	r2, #7
 800228c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f004 f8a2 	bl	80063e2 <USB_HC_Halt>
 800229e:	e087      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d109      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2320      	movs	r3, #32
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	e072      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d11a      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2308      	movs	r3, #8
 80022f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3361      	adds	r3, #97	; 0x61
 8002300:	2205      	movs	r2, #5
 8002302:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f867 	bl	80063e2 <USB_HC_Halt>
 8002314:	e04c      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d11b      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002340:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	2208      	movs	r2, #8
 8002352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f004 f83f 	bl	80063e2 <USB_HC_Halt>
 8002364:	e024      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d119      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	2206      	movs	r2, #6
 800239e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f819 	bl	80063e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c6:	d112      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 f805 	bl	80063e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023ec:	e24e      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 80df 	bne.w	80025c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3348      	adds	r3, #72	; 0x48
 800241c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0159      	lsls	r1, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	440b      	add	r3, r1
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	202c      	movs	r0, #44	; 0x2c
 8002438:	fb00 f303 	mul.w	r3, r0, r3
 800243c:	440b      	add	r3, r1
 800243e:	3350      	adds	r3, #80	; 0x50
 8002440:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3361      	adds	r3, #97	; 0x61
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	335c      	adds	r3, #92	; 0x5c
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2301      	movs	r3, #1
 8002476:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	333f      	adds	r3, #63	; 0x3f
 800249a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800249c:	2b02      	cmp	r3, #2
 800249e:	d111      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 ff99 	bl	80063e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2310      	movs	r3, #16
 80024c0:	6093      	str	r3, [r2, #8]
 80024c2:	e03a      	b.n	800253a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	333f      	adds	r3, #63	; 0x3f
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d009      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333f      	adds	r3, #63	; 0x3f
 80024e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d126      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	0151      	lsls	r1, r2, #5
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	440a      	add	r2, r1
 8002502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800250a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	b2d9      	uxtb	r1, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	202c      	movs	r0, #44	; 0x2c
 8002528:	fb00 f303 	mul.w	r3, r0, r3
 800252c:	4413      	add	r3, r2
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f006 f9f7 	bl	8008928 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12b      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3348      	adds	r3, #72	; 0x48
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f202 	mul.w	r2, r0, r2
 800255c:	440a      	add	r2, r1
 800255e:	3240      	adds	r2, #64	; 0x40
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	fbb3 f3f2 	udiv	r3, r3, r2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 818e 	beq.w	800288c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3354      	adds	r3, #84	; 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2d8      	uxtb	r0, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3354      	adds	r3, #84	; 0x54
 8002594:	4602      	mov	r2, r0
 8002596:	701a      	strb	r2, [r3, #0]
}
 8002598:	e178      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3354      	adds	r3, #84	; 0x54
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3354      	adds	r3, #84	; 0x54
 80025be:	4602      	mov	r2, r0
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	e163      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80f6 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d109      	bne.n	8002604 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e0c9      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d109      	bne.n	800262c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2205      	movs	r2, #5
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e0b5      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d009      	beq.n	8002654 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002650:	2b08      	cmp	r3, #8
 8002652:	d150      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	202c      	movs	r0, #44	; 0x2c
 800266c:	fb00 f303 	mul.w	r3, r0, r3
 8002670:	440b      	add	r3, r1
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d912      	bls.n	80026b0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3360      	adds	r3, #96	; 0x60
 80026aa:	2204      	movs	r2, #4
 80026ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ae:	e073      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3360      	adds	r3, #96	; 0x60
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026f4:	e050      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3361      	adds	r3, #97	; 0x61
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d122      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	; 0x60
 8002718:	2202      	movs	r2, #2
 800271a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002732:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800273a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e023      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3361      	adds	r3, #97	; 0x61
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b07      	cmp	r3, #7
 8002762:	d119      	bne.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	335c      	adds	r3, #92	; 0x5c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	202c      	movs	r0, #44	; 0x2c
 800277c:	fb00 f303 	mul.w	r3, r0, r3
 8002780:	440b      	add	r3, r1
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3360      	adds	r3, #96	; 0x60
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2302      	movs	r3, #2
 80027a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	202c      	movs	r0, #44	; 0x2c
 80027b4:	fb00 f303 	mul.w	r3, r0, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3360      	adds	r3, #96	; 0x60
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f006 f8b1 	bl	8008928 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027c6:	e061      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d156      	bne.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d111      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fde7 	bl	80063e2 <USB_HC_Halt>
 8002814:	e031      	b.n	800287a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333f      	adds	r3, #63	; 0x3f
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333f      	adds	r3, #63	; 0x3f
 8002838:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800283a:	2b02      	cmp	r3, #2
 800283c:	d11d      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d110      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3361      	adds	r3, #97	; 0x61
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fdb4 	bl	80063e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2310      	movs	r3, #16
 800288a:	6093      	str	r3, [r2, #8]
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d11a      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2304      	movs	r3, #4
 80028d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3361      	adds	r3, #97	; 0x61
 80028e4:	2206      	movs	r2, #6
 80028e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fd75 	bl	80063e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028f8:	e331      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d12e      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2320      	movs	r3, #32
 8002920:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 8313 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333d      	adds	r3, #61	; 0x3d
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fd3b 	bl	80063e2 <USB_HC_Halt>
}
 800296c:	e2f7      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002984:	d112      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002998:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fd1c 	bl	80063e2 <USB_HC_Halt>
}
 80029aa:	e2d8      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d140      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d111      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2340      	movs	r3, #64	; 0x40
 8002a0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fcd0 	bl	80063e2 <USB_HC_Halt>
}
 8002a42:	e28c      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d12c      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	2204      	movs	r2, #4
 8002a6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	333d      	adds	r3, #61	; 0x3d
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fca1 	bl	80063e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2340      	movs	r3, #64	; 0x40
 8002ab0:	6093      	str	r3, [r2, #8]
}
 8002ab2:	e254      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d11a      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2308      	movs	r3, #8
 8002ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	2205      	movs	r2, #5
 8002aec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fc72 	bl	80063e2 <USB_HC_Halt>
}
 8002afe:	e22e      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d140      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	2203      	movs	r2, #3
 8002b38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	333d      	adds	r3, #61	; 0x3d
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d112      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333d      	adds	r3, #61	; 0x3d
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fc2f 	bl	80063e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2310      	movs	r3, #16
 8002b94:	6093      	str	r3, [r2, #8]
}
 8002b96:	e1e2      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d164      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3361      	adds	r3, #97	; 0x61
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fc05 	bl	80063e2 <USB_HC_Halt>
 8002bd8:	e044      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335c      	adds	r3, #92	; 0x5c
 8002bfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d920      	bls.n	8002c52 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	b2d9      	uxtb	r1, r3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	202c      	movs	r0, #44	; 0x2c
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f005 fe6c 	bl	8008928 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c50:	e008      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	6093      	str	r3, [r2, #8]
}
 8002c76:	e172      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d11b      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3361      	adds	r3, #97	; 0x61
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fb98 	bl	80063e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc4:	6093      	str	r3, [r2, #8]
}
 8002cc6:	e14a      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f040 813f 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d17d      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	333f      	adds	r3, #63	; 0x3f
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d00a      	beq.n	8002d30 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	333f      	adds	r3, #63	; 0x3f
 8002d28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	f040 8100 	bne.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d113      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3355      	adds	r3, #85	; 0x55
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3355      	adds	r3, #85	; 0x55
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	f040 80e3 	bne.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	334c      	adds	r3, #76	; 0x4c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80d8 	beq.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	334c      	adds	r3, #76	; 0x4c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f202 	mul.w	r2, r0, r2
 8002d9a:	440a      	add	r2, r1
 8002d9c:	3240      	adds	r2, #64	; 0x40
 8002d9e:	8812      	ldrh	r2, [r2, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	202c      	movs	r0, #44	; 0x2c
 8002daa:	fb00 f202 	mul.w	r2, r0, r2
 8002dae:	440a      	add	r2, r1
 8002db0:	3240      	adds	r2, #64	; 0x40
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b5 	beq.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3355      	adds	r3, #85	; 0x55
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3355      	adds	r3, #85	; 0x55
 8002dea:	4602      	mov	r2, r0
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e09f      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d109      	bne.n	8002e18 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e08b      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d109      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e077      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3361      	adds	r3, #97	; 0x61
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d109      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	2205      	movs	r2, #5
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e063      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d009      	beq.n	8002e90 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d14f      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	335c      	adds	r3, #92	; 0x5c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	202c      	movs	r0, #44	; 0x2c
 8002ea8:	fb00 f303 	mul.w	r3, r0, r3
 8002eac:	440b      	add	r3, r1
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d912      	bls.n	8002eec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3360      	adds	r3, #96	; 0x60
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e021      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3360      	adds	r3, #96	; 0x60
 8002efa:	2202      	movs	r2, #2
 8002efc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f14:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2302      	movs	r3, #2
 8002f40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	b2d9      	uxtb	r1, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f005 fce5 	bl	8008928 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f5e:	bf00      	nop
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	0c5b      	lsrs	r3, r3, #17
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d004      	beq.n	8002fac <HCD_RXQLVL_IRQHandler+0x46>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	f000 80a9 	beq.w	80030fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002faa:	e0aa      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a6 	beq.w	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809b 	beq.w	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3350      	adds	r3, #80	; 0x50
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	441a      	add	r2, r3
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	202c      	movs	r0, #44	; 0x2c
 8002fe4:	fb00 f303 	mul.w	r3, r0, r3
 8002fe8:	440b      	add	r3, r1
 8002fea:	334c      	adds	r3, #76	; 0x4c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d87a      	bhi.n	80030e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3344      	adds	r3, #68	; 0x44
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	b292      	uxth	r2, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f002 fd40 	bl	8005a90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3344      	adds	r3, #68	; 0x44
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	441a      	add	r2, r3
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	202c      	movs	r0, #44	; 0x2c
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	440b      	add	r3, r1
 8003030:	3344      	adds	r3, #68	; 0x44
 8003032:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3350      	adds	r3, #80	; 0x50
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	441a      	add	r2, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	202c      	movs	r0, #44	; 0x2c
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	440b      	add	r3, r1
 8003054:	3350      	adds	r3, #80	; 0x50
 8003056:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	0cdb      	lsrs	r3, r3, #19
 8003068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3340      	adds	r3, #64	; 0x40
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4293      	cmp	r3, r2
 8003084:	d13c      	bne.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d039      	beq.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3354      	adds	r3, #84	; 0x54
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3354      	adds	r3, #84	; 0x54
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e00b      	b.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	2204      	movs	r2, #4
 80030f8:	701a      	strb	r2, [r3, #0]
      break;
 80030fa:	e001      	b.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030fc:	bf00      	nop
 80030fe:	e000      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003100:	bf00      	nop
  }
}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003136:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d10b      	bne.n	800315a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d102      	bne.n	8003152 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f005 fbcf 	bl	80088f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d132      	bne.n	80031ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d126      	bne.n	80031c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d113      	bne.n	80031a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003188:	d106      	bne.n	8003198 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fdeb 	bl	8005d6c <USB_InitFSLSPClkSel>
 8003196:	e011      	b.n	80031bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fde4 	bl	8005d6c <USB_InitFSLSPClkSel>
 80031a4:	e00a      	b.n	80031bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031b4:	461a      	mov	r2, r3
 80031b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f005 fbc1 	bl	8008944 <HAL_HCD_PortEnabled_Callback>
 80031c2:	e002      	b.n	80031ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f005 fbcb 	bl	8008960 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d103      	bne.n	80031dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e12b      	b.n	800345a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fe84 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003254:	f001 fe56 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a81      	ldr	r2, [pc, #516]	; (8003464 <HAL_I2C_Init+0x274>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d807      	bhi.n	8003274 <HAL_I2C_Init+0x84>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_I2C_Init+0x278>)
 8003268:	4293      	cmp	r3, r2
 800326a:	bf94      	ite	ls
 800326c:	2301      	movls	r3, #1
 800326e:	2300      	movhi	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e006      	b.n	8003282 <HAL_I2C_Init+0x92>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a7d      	ldr	r2, [pc, #500]	; (800346c <HAL_I2C_Init+0x27c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0e7      	b.n	800345a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a78      	ldr	r2, [pc, #480]	; (8003470 <HAL_I2C_Init+0x280>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a6a      	ldr	r2, [pc, #424]	; (8003464 <HAL_I2C_Init+0x274>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d802      	bhi.n	80032c4 <HAL_I2C_Init+0xd4>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3301      	adds	r3, #1
 80032c2:	e009      	b.n	80032d8 <HAL_I2C_Init+0xe8>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_I2C_Init+0x284>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	3301      	adds	r3, #1
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	495c      	ldr	r1, [pc, #368]	; (8003464 <HAL_I2C_Init+0x274>)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d819      	bhi.n	800332c <HAL_I2C_Init+0x13c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e59      	subs	r1, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fbb1 f3f3 	udiv	r3, r1, r3
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800330c:	400b      	ands	r3, r1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_I2C_Init+0x138>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e59      	subs	r1, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003326:	e051      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003328:	2304      	movs	r3, #4
 800332a:	e04f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <HAL_I2C_Init+0x168>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e012      	b.n	800337e <HAL_I2C_Init+0x18e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x196>
 8003382:	2301      	movs	r3, #1
 8003384:	e022      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <HAL_I2C_Init+0x1bc>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e58      	subs	r0, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	440b      	add	r3, r1
 800339c:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	6809      	ldr	r1, [r1, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6911      	ldr	r1, [r2, #16]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	000186a0 	.word	0x000186a0
 8003468:	001e847f 	.word	0x001e847f
 800346c:	003d08ff 	.word	0x003d08ff
 8003470:	431bde83 	.word	0x431bde83
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
 8003488:	4613      	mov	r3, r2
 800348a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7fd ffae 	bl	80013ec <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 80e0 	bne.w	8003660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2319      	movs	r3, #25
 80034a6:	2201      	movs	r2, #1
 80034a8:	4970      	ldr	r1, [pc, #448]	; (800366c <HAL_I2C_Master_Transmit+0x1f4>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa92 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0d3      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x50>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0cc      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d007      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	; 0x21
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	893a      	ldrh	r2, [r7, #8]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_I2C_Master_Transmit+0x1f8>)
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f9ca 	bl	80038d0 <I2C_MasterRequestWrite>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e08d      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800355c:	e066      	b.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fb0c 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06b      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11b      	bne.n	8003600 <HAL_I2C_Master_Transmit+0x188>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fafc 	bl	8003c02 <I2C_WaitOnBTFFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b04      	cmp	r3, #4
 8003616:	d107      	bne.n	8003628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e01a      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d194      	bne.n	800355e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	00100002 	.word	0x00100002
 8003670:	ffff0000 	.word	0xffff0000

08003674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7fd feb2 	bl	80013ec <HAL_GetTick>
 8003688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 8111 	bne.w	80038be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2319      	movs	r3, #25
 80036a2:	2201      	movs	r2, #1
 80036a4:	4988      	ldr	r1, [pc, #544]	; (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f994 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e104      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_IsDeviceReady+0x50>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0fd      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d007      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a70      	ldr	r2, [pc, #448]	; (80038cc <HAL_I2C_IsDeviceReady+0x258>)
 800370c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f952 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003744:	d103      	bne.n	800374e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0b6      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003762:	f7fd fe43 	bl	80013ec <HAL_GetTick>
 8003766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003796:	e025      	b.n	80037e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fd fe28 	bl	80013ec <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <HAL_I2C_IsDeviceReady+0x13a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22a0      	movs	r2, #160	; 0xa0
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2ba0      	cmp	r3, #160	; 0xa0
 80037ee:	d005      	beq.n	80037fc <HAL_I2C_IsDeviceReady+0x188>
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_I2C_IsDeviceReady+0x188>
 80037f6:	7dbb      	ldrb	r3, [r7, #22]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0cd      	beq.n	8003798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d129      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2319      	movs	r3, #25
 800383e:	2201      	movs	r2, #1
 8003840:	4921      	ldr	r1, [pc, #132]	; (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8c6 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e036      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e02c      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2319      	movs	r3, #25
 8003886:	2201      	movs	r2, #1
 8003888:	490f      	ldr	r1, [pc, #60]	; (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8a2 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e012      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3301      	adds	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f4ff af32 	bcc.w	800370e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00100002 	.word	0x00100002
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d006      	beq.n	80038fa <I2C_MasterRequestWrite+0x2a>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d003      	beq.n	80038fa <I2C_MasterRequestWrite+0x2a>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f8:	d108      	bne.n	800390c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e00b      	b.n	8003924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	2b12      	cmp	r3, #18
 8003912:	d107      	bne.n	8003924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f84f 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d103      	bne.n	8003954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e035      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003960:	d108      	bne.n	8003974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003970:	611a      	str	r2, [r3, #16]
 8003972:	e01b      	b.n	80039ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003974:	897b      	ldrh	r3, [r7, #10]
 8003976:	11db      	asrs	r3, r3, #7
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f063 030f 	orn	r3, r3, #15
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	490e      	ldr	r1, [pc, #56]	; (80039cc <I2C_MasterRequestWrite+0xfc>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f875 	bl	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e010      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039a2:	897b      	ldrh	r3, [r7, #10]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <I2C_MasterRequestWrite+0x100>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f865 	bl	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00010008 	.word	0x00010008
 80039d0:	00010002 	.word	0x00010002

080039d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	e025      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d021      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fd fcfd 	bl	80013ec <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d116      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e023      	b.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10d      	bne.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	e00c      	b.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d0b6      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a90:	e051      	b.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d123      	bne.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e046      	b.n	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd fc7b 	bl	80013ec <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e020      	b.n	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10c      	bne.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e00b      	b.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d18d      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	e02d      	b.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f878 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e02d      	b.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d021      	beq.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fd fc21 	bl	80013ec <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d116      	bne.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d1ca      	bne.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c0e:	e02d      	b.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f837 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e02d      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d021      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fd fbe0 	bl	80013ec <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d1ca      	bne.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d11b      	bne.n	8003cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e128      	b.n	8003f48 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_I2S_Init+0x26c>)
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fd f94f 	bl	8000fb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d2c:	f023 030f 	bic.w	r3, r3, #15
 8003d30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2202      	movs	r2, #2
 8003d38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d060      	beq.n	8003e04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e001      	b.n	8003d54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d802      	bhi.n	8003d62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d62:	2001      	movs	r0, #1
 8003d64:	f001 f9c4 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d72:	d125      	bne.n	8003dc0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	461a      	mov	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	3305      	adds	r3, #5
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e01f      	b.n	8003dde <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	3305      	adds	r3, #5
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e00e      	b.n	8003dde <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	3305      	adds	r3, #5
 8003ddc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4a5c      	ldr	r2, [pc, #368]	; (8003f54 <HAL_I2S_Init+0x270>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e04:	2302      	movs	r3, #2
 8003e06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d902      	bls.n	8003e18 <HAL_I2S_Init+0x134>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	d907      	bls.n	8003e28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f043 0210 	orr.w	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e08f      	b.n	8003f48 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	ea42 0103 	orr.w	r1, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e46:	f023 030f 	bic.w	r3, r3, #15
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6851      	ldr	r1, [r2, #4]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6892      	ldr	r2, [r2, #8]
 8003e52:	4311      	orrs	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68d2      	ldr	r2, [r2, #12]
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6992      	ldr	r2, [r2, #24]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d161      	bne.n	8003f38 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <HAL_I2S_Init+0x274>)
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a37      	ldr	r2, [pc, #220]	; (8003f5c <HAL_I2S_Init+0x278>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_I2S_Init+0x1a4>
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_I2S_Init+0x27c>)
 8003e86:	e001      	b.n	8003e8c <HAL_I2S_Init+0x1a8>
 8003e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	4932      	ldr	r1, [pc, #200]	; (8003f5c <HAL_I2S_Init+0x278>)
 8003e94:	428a      	cmp	r2, r1
 8003e96:	d101      	bne.n	8003e9c <HAL_I2S_Init+0x1b8>
 8003e98:	4a31      	ldr	r2, [pc, #196]	; (8003f60 <HAL_I2S_Init+0x27c>)
 8003e9a:	e001      	b.n	8003ea0 <HAL_I2S_Init+0x1bc>
 8003e9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ea0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ea4:	f023 030f 	bic.w	r3, r3, #15
 8003ea8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_I2S_Init+0x278>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2S_Init+0x1d4>
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	; (8003f60 <HAL_I2S_Init+0x27c>)
 8003eb6:	e001      	b.n	8003ebc <HAL_I2S_Init+0x1d8>
 8003eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <HAL_I2S_Init+0x278>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_I2S_Init+0x1ea>
 8003eca:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_I2S_Init+0x27c>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2S_Init+0x1ee>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ede:	d003      	beq.n	8003ee8 <HAL_I2S_Init+0x204>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e001      	b.n	8003ef4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f20:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <HAL_I2S_Init+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2S_Init+0x24c>
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_I2S_Init+0x27c>)
 8003f2e:	e001      	b.n	8003f34 <HAL_I2S_Init+0x250>
 8003f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f34:	897a      	ldrh	r2, [r7, #10]
 8003f36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	0800405b 	.word	0x0800405b
 8003f54:	cccccccd 	.word	0xcccccccd
 8003f58:	08004171 	.word	0x08004171
 8003f5c:	40003800 	.word	0x40003800
 8003f60:	40003400 	.word	0x40003400

08003f64 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10e      	bne.n	8003ff4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ffb8 	bl	8003f64 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	b292      	uxth	r2, r2
 8004010:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	1c9a      	adds	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10e      	bne.n	8004052 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004042:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff93 	bl	8003f78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b04      	cmp	r3, #4
 8004074:	d13a      	bne.n	80040ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d109      	bne.n	8004094 <I2S_IRQHandler+0x3a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d102      	bne.n	8004094 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffb4 	bl	8003ffc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d126      	bne.n	80040ec <I2S_IRQHandler+0x92>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d11f      	bne.n	80040ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f043 0202 	orr.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff50 	bl	8003f8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d136      	bne.n	8004166 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d109      	bne.n	8004116 <I2S_IRQHandler+0xbc>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b80      	cmp	r3, #128	; 0x80
 800410e:	d102      	bne.n	8004116 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff45 	bl	8003fa0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d122      	bne.n	8004166 <I2S_IRQHandler+0x10c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d11b      	bne.n	8004166 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f043 0204 	orr.w	r2, r3, #4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff13 	bl	8003f8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a92      	ldr	r2, [pc, #584]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800418a:	4b92      	ldr	r3, [pc, #584]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800418c:	e001      	b.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800418e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a8b      	ldr	r2, [pc, #556]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041a8:	4b8a      	ldr	r3, [pc, #552]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041aa:	e001      	b.n	80041b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041bc:	d004      	beq.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 8099 	bne.w	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d107      	bne.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f925 	bl	800442c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9c8 	bl	800458c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d13a      	bne.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d035      	beq.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421c:	e001      	b.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800421e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4969      	ldr	r1, [pc, #420]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422a:	428b      	cmp	r3, r1
 800422c:	d101      	bne.n	8004232 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800422e:	4b69      	ldr	r3, [pc, #420]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004230:	e001      	b.n	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004236:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800423a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800424a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fe88 	bl	8003f8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	f040 80c3 	bne.w	800440e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80bd 	beq.w	800440e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a49      	ldr	r2, [pc, #292]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4944      	ldr	r1, [pc, #272]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042be:	428b      	cmp	r3, r1
 80042c0:	d101      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042c2:	4b44      	ldr	r3, [pc, #272]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c4:	e001      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe4a 	bl	8003f8c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f8:	e089      	b.n	800440e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d107      	bne.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8be 	bl	8004490 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f8fd 	bl	8004528 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d12f      	bne.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02a      	beq.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004350:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800435e:	e001      	b.n	8004364 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4919      	ldr	r1, [pc, #100]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d101      	bne.n	8004374 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004372:	e001      	b.n	8004378 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800437c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f043 0202 	orr.w	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fdfa 	bl	8003f8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d136      	bne.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d031      	beq.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043b8:	e001      	b.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4902      	ldr	r1, [pc, #8]	; (80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043c6:	428b      	cmp	r3, r1
 80043c8:	d106      	bne.n	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043ca:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043cc:	e006      	b.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043ce:	bf00      	nop
 80043d0:	40003800 	.word	0x40003800
 80043d4:	40003400 	.word	0x40003400
 80043d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fdc0 	bl	8003f8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800440c:	e000      	b.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800440e:	bf00      	nop
}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c99      	adds	r1, r3, #2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6251      	str	r1, [r2, #36]	; 0x24
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d113      	bne.n	8004486 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800446c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ffc9 	bl	8004418 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c99      	adds	r1, r3, #2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6251      	str	r1, [r2, #36]	; 0x24
 80044a2:	8819      	ldrh	r1, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <I2SEx_TxISR_I2SExt+0x90>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <I2SEx_TxISR_I2SExt+0x22>
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <I2SEx_TxISR_I2SExt+0x94>)
 80044b0:	e001      	b.n	80044b6 <I2SEx_TxISR_I2SExt+0x26>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b6:	460a      	mov	r2, r1
 80044b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d121      	bne.n	8004516 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <I2SEx_TxISR_I2SExt+0x90>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <I2SEx_TxISR_I2SExt+0x50>
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <I2SEx_TxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_TxISR_I2SExt+0x54>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <I2SEx_TxISR_I2SExt+0x90>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d101      	bne.n	80044f4 <I2SEx_TxISR_I2SExt+0x64>
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <I2SEx_TxISR_I2SExt+0x94>)
 80044f2:	e001      	b.n	80044f8 <I2SEx_TxISR_I2SExt+0x68>
 80044f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff81 	bl	8004418 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40003800 	.word	0x40003800
 8004524:	40003400 	.word	0x40003400

08004528 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68d8      	ldr	r0, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	1c99      	adds	r1, r3, #2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004540:	b282      	uxth	r2, r0
 8004542:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d113      	bne.n	8004584 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800456a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff4a 	bl	8004418 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a20      	ldr	r2, [pc, #128]	; (800461c <I2SEx_RxISR_I2SExt+0x90>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <I2SEx_RxISR_I2SExt+0x16>
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <I2SEx_RxISR_I2SExt+0x94>)
 80045a0:	e001      	b.n	80045a6 <I2SEx_RxISR_I2SExt+0x1a>
 80045a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a6:	68d8      	ldr	r0, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	1c99      	adds	r1, r3, #2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045b2:	b282      	uxth	r2, r0
 80045b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d121      	bne.n	8004612 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <I2SEx_RxISR_I2SExt+0x90>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d101      	bne.n	80045dc <I2SEx_RxISR_I2SExt+0x50>
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <I2SEx_RxISR_I2SExt+0x94>)
 80045da:	e001      	b.n	80045e0 <I2SEx_RxISR_I2SExt+0x54>
 80045dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	490d      	ldr	r1, [pc, #52]	; (800461c <I2SEx_RxISR_I2SExt+0x90>)
 80045e8:	428b      	cmp	r3, r1
 80045ea:	d101      	bne.n	80045f0 <I2SEx_RxISR_I2SExt+0x64>
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <I2SEx_RxISR_I2SExt+0x94>)
 80045ee:	e001      	b.n	80045f4 <I2SEx_RxISR_I2SExt+0x68>
 80045f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff03 	bl	8004418 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40003800 	.word	0x40003800
 8004620:	40003400 	.word	0x40003400

08004624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e267      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d075      	beq.n	800472e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004642:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d00c      	beq.n	8004668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464e:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004656:	2b08      	cmp	r3, #8
 8004658:	d112      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465a:	4b82      	ldr	r3, [pc, #520]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004666:	d10b      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	4b7e      	ldr	r3, [pc, #504]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <HAL_RCC_OscConfig+0x108>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d157      	bne.n	800472c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e242      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0x74>
 800468a:	4b76      	ldr	r3, [pc, #472]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e01d      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x98>
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6f      	ldr	r2, [pc, #444]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b6d      	ldr	r3, [pc, #436]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6c      	ldr	r2, [pc, #432]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 80046bc:	4b69      	ldr	r3, [pc, #420]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a68      	ldr	r2, [pc, #416]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a65      	ldr	r2, [pc, #404]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fc fe86 	bl	80013ec <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fc fe82 	bl	80013ec <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e207      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0xc0>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fc fe72 	bl	80013ec <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fc fe6e 	bl	80013ec <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e1f3      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471e:	4b51      	ldr	r3, [pc, #324]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0xe8>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d063      	beq.n	8004802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800473a:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d11c      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b44      	ldr	r3, [pc, #272]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e1c7      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4937      	ldr	r1, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	e03a      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4b34      	ldr	r3, [pc, #208]	; (8004868 <HAL_RCC_OscConfig+0x244>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fc fe27 	bl	80013ec <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fc fe23 	bl	80013ec <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1a8      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4925      	ldr	r1, [pc, #148]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_OscConfig+0x244>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fc fe06 	bl	80013ec <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fc fe02 	bl	80013ec <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e187      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_RCC_OscConfig+0x248>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fc fde6 	bl	80013ec <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004824:	f7fc fde2 	bl	80013ec <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e167      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x200>
 8004842:	e01b      	b.n	800487c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCC_OscConfig+0x248>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fc fdcf 	bl	80013ec <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004850:	e00e      	b.n	8004870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004852:	f7fc fdcb 	bl	80013ec <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d907      	bls.n	8004870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e150      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	42470000 	.word	0x42470000
 800486c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8097 	beq.w	80049b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b7d      	ldr	r3, [pc, #500]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a7c      	ldr	r2, [pc, #496]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b7a      	ldr	r3, [pc, #488]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d118      	bne.n	80048f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c6:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d2:	f7fc fd8b 	bl	80013ec <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048da:	f7fc fd87 	bl	80013ec <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e10c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x2ea>
 8004900:	4b64      	ldr	r3, [pc, #400]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a63      	ldr	r2, [pc, #396]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	e01c      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b05      	cmp	r3, #5
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x30c>
 8004916:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a5e      	ldr	r2, [pc, #376]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a5b      	ldr	r2, [pc, #364]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 8004930:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a57      	ldr	r2, [pc, #348]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a54      	ldr	r2, [pc, #336]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fd4c 	bl	80013ec <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fc fd48 	bl	80013ec <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0cb      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	4b49      	ldr	r3, [pc, #292]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_RCC_OscConfig+0x334>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fc fd36 	bl	80013ec <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fc fd32 	bl	80013ec <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0b5      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499a:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a1 	beq.w	8004b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d05c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d141      	bne.n	8004a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fc fd06 	bl	80013ec <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fc fd02 	bl	80013ec <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e087      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	491b      	ldr	r1, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fc fcdb 	bl	80013ec <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fc fcd7 	bl	80013ec <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e05c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x416>
 8004a58:	e054      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fc fcc4 	bl	80013ec <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fc fcc0 	bl	80013ec <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e045      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x444>
 8004a86:	e03d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e038      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d028      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d121      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11a      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d111      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cc      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90c      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e067      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fc fbf2 	bl	80013ec <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fc fbee 	bl	80013ec <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20c      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cac:	5ccb      	ldrb	r3, [r1, r3]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fb52 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08009728 	.word	0x08009728
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b094      	sub	sp, #80	; 0x50
 8004ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
 8004cec:	2300      	movs	r3, #0
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	4b79      	ldr	r3, [pc, #484]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d00d      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x40>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	f200 80e1 	bhi.w	8004ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d12:	e0db      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d18:	e0db      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1a:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d1e:	e0d8      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d20:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d063      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d36:	4b6a      	ldr	r3, [pc, #424]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d48:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d52:	4622      	mov	r2, r4
 8004d54:	462b      	mov	r3, r5
 8004d56:	f04f 0000 	mov.w	r0, #0
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	0159      	lsls	r1, r3, #5
 8004d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d64:	0150      	lsls	r0, r2, #5
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	1a51      	subs	r1, r2, r1
 8004d6e:	6139      	str	r1, [r7, #16]
 8004d70:	4629      	mov	r1, r5
 8004d72:	eb63 0301 	sbc.w	r3, r3, r1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d84:	4659      	mov	r1, fp
 8004d86:	018b      	lsls	r3, r1, #6
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d8e:	4651      	mov	r1, sl
 8004d90:	018a      	lsls	r2, r1, #6
 8004d92:	4651      	mov	r1, sl
 8004d94:	ebb2 0801 	subs.w	r8, r2, r1
 8004d98:	4659      	mov	r1, fp
 8004d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	462b      	mov	r3, r5
 8004dc0:	eb49 0303 	adc.w	r3, r9, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	024b      	lsls	r3, r1, #9
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ddc:	4621      	mov	r1, r4
 8004dde:	024a      	lsls	r2, r1, #9
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df0:	f7fb fa3e 	bl	8000270 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dfc:	e058      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	2200      	movs	r2, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	4611      	mov	r1, r2
 8004e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f04f 0000 	mov.w	r0, #0
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	0159      	lsls	r1, r3, #5
 8004e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e2a:	0150      	lsls	r0, r2, #5
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4641      	mov	r1, r8
 8004e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e50:	ebb2 040a 	subs.w	r4, r2, sl
 8004e54:	eb63 050b 	sbc.w	r5, r3, fp
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	00eb      	lsls	r3, r5, #3
 8004e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e66:	00e2      	lsls	r2, r4, #3
 8004e68:	4614      	mov	r4, r2
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	18e3      	adds	r3, r4, r3
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb45 0303 	adc.w	r3, r5, r3
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e86:	4629      	mov	r1, r5
 8004e88:	028b      	lsls	r3, r1, #10
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e90:	4621      	mov	r1, r4
 8004e92:	028a      	lsls	r2, r1, #10
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea4:	f7fb f9e4 	bl	8000270 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eca:	e002      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3750      	adds	r7, #80	; 0x50
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	007a1200 	.word	0x007a1200

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000000 	.word	0x20000000

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	08009738 	.word	0x08009738

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d105      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d035      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f54:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fc fa47 	bl	80013ec <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f62:	f7fc fa43 	bl	80013ec <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0b0      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	4b5b      	ldr	r3, [pc, #364]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	019a      	lsls	r2, r3, #6
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	071b      	lsls	r3, r3, #28
 8004f8c:	4955      	ldr	r1, [pc, #340]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f94:	4b52      	ldr	r3, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fa27 	bl	80013ec <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fa2:	f7fc fa23 	bl	80013ec <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e090      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb4:	4b4b      	ldr	r3, [pc, #300]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8083 	beq.w	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	4a43      	ldr	r2, [pc, #268]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3e      	ldr	r2, [pc, #248]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff6:	f7fc f9f9 	bl	80013ec <HAL_GetTick>
 8004ffa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fc f9f5 	bl	80013ec <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e062      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02f      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d028      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800503a:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005044:	4b29      	ldr	r3, [pc, #164]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005056:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d114      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005062:	f7fc f9c3 	bl	80013ec <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	e00a      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fc f9bf 	bl	80013ec <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e02a      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ee      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ae:	490d      	ldr	r1, [pc, #52]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]
 80050b4:	e005      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050c0:	6093      	str	r3, [r2, #8]
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ce:	4905      	ldr	r1, [pc, #20]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	42470068 	.word	0x42470068
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40007000 	.word	0x40007000
 80050ec:	42470e40 	.word	0x42470e40

080050f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d13e      	bne.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d12f      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005124:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005126:	617b      	str	r3, [r7, #20]
          break;
 8005128:	e02f      	b.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d108      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005138:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005140:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e007      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800516e:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005174:	0f1b      	lsrs	r3, r3, #28
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]
          break;
 8005182:	e002      	b.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
          break;
 8005188:	bf00      	nop
        }
      }
      break;
 800518a:	bf00      	nop
    }
  }
  return frequency;
 800518c:	697b      	ldr	r3, [r7, #20]
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	00bb8000 	.word	0x00bb8000
 80051a4:	007a1200 	.word	0x007a1200
 80051a8:	00f42400 	.word	0x00f42400

080051ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e07b      	b.n	80052b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d108      	bne.n	80051d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ce:	d009      	beq.n	80051e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	61da      	str	r2, [r3, #28]
 80051d6:	e005      	b.n	80051e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fb ff58 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	ea42 0103 	orr.w	r1, r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0104 	and.w	r1, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0210 	and.w	r2, r3, #16
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e097      	b.n	8005402 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb ff2c 	bl	8001144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 f908 	bl	8005528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	4313      	orrs	r3, r2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800535e:	f023 030c 	bic.w	r3, r3, #12
 8005362:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	4313      	orrs	r3, r2
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	011a      	lsls	r2, r3, #4
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	4313      	orrs	r3, r2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800539c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4313      	orrs	r3, r2
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005422:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800542a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005432:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d110      	bne.n	800545c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d102      	bne.n	8005446 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005440:	7b7b      	ldrb	r3, [r7, #13]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d001      	beq.n	800544a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e069      	b.n	800551e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545a:	e031      	b.n	80054c0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b04      	cmp	r3, #4
 8005460:	d110      	bne.n	8005484 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005468:	7b3b      	ldrb	r3, [r7, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e055      	b.n	800551e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005482:	e01d      	b.n	80054c0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d108      	bne.n	800549c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800548a:	7bbb      	ldrb	r3, [r7, #14]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d105      	bne.n	800549c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005490:	7b7b      	ldrb	r3, [r7, #13]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d102      	bne.n	800549c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005496:	7b3b      	ldrb	r3, [r7, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e03e      	b.n	800551e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_Encoder_Start+0xc4>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d008      	beq.n	80054de <HAL_TIM_Encoder_Start+0xd4>
 80054cc:	e00f      	b.n	80054ee <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f8c6 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 80054dc:	e016      	b.n	800550c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	2104      	movs	r1, #4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f8be 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 80054ec:	e00e      	b.n	800550c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f8b6 	bl	8005668 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	2104      	movs	r1, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f8af 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 800550a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a40      	ldr	r2, [pc, #256]	; (800563c <TIM_Base_SetConfig+0x114>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <TIM_Base_SetConfig+0x118>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <TIM_Base_SetConfig+0x11c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3b      	ldr	r2, [pc, #236]	; (8005648 <TIM_Base_SetConfig+0x120>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3a      	ldr	r2, [pc, #232]	; (800564c <TIM_Base_SetConfig+0x124>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2f      	ldr	r2, [pc, #188]	; (800563c <TIM_Base_SetConfig+0x114>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d027      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <TIM_Base_SetConfig+0x118>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d023      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2b      	ldr	r2, [pc, #172]	; (8005644 <TIM_Base_SetConfig+0x11c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01f      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <TIM_Base_SetConfig+0x120>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <TIM_Base_SetConfig+0x124>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d017      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <TIM_Base_SetConfig+0x128>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <TIM_Base_SetConfig+0x12c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <TIM_Base_SetConfig+0x130>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a25      	ldr	r2, [pc, #148]	; (800565c <TIM_Base_SetConfig+0x134>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a24      	ldr	r2, [pc, #144]	; (8005660 <TIM_Base_SetConfig+0x138>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a23      	ldr	r2, [pc, #140]	; (8005664 <TIM_Base_SetConfig+0x13c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a0a      	ldr	r2, [pc, #40]	; (800563c <TIM_Base_SetConfig+0x114>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a0c      	ldr	r2, [pc, #48]	; (800564c <TIM_Base_SetConfig+0x124>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d103      	bne.n	8005628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	615a      	str	r2, [r3, #20]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40010400 	.word	0x40010400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40001800 	.word	0x40001800
 8005660:	40001c00 	.word	0x40001c00
 8005664:	40002000 	.word	0x40002000

08005668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2201      	movs	r2, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	43db      	mvns	r3, r3
 800568a:	401a      	ands	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e05a      	b.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d022      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d01d      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d018      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10c      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4313      	orrs	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40001800 	.word	0x40001800

080057ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057ac:	b084      	sub	sp, #16
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	f107 001c 	add.w	r0, r7, #28
 80057ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d122      	bne.n	800580a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d105      	bne.n	80057fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9c0 	bl	8005b84 <USB_CoreReset>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e01a      	b.n	8005840 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9b4 	bl	8005b84 <USB_CoreReset>
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
 8005832:	e005      	b.n	8005840 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10b      	bne.n	800585e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f043 0206 	orr.w	r2, r3, #6
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800586a:	b004      	add	sp, #16
 800586c:	4770      	bx	lr

0800586e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 0201 	bic.w	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d115      	bne.n	8005900 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e0:	2001      	movs	r0, #1
 80058e2:	f7fb fd8f 	bl	8001404 <HAL_Delay>
      ms++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f93a 	bl	8005b66 <USB_GetMode>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d01e      	beq.n	8005936 <USB_SetCurrentMode+0x84>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b31      	cmp	r3, #49	; 0x31
 80058fc:	d9f0      	bls.n	80058e0 <USB_SetCurrentMode+0x2e>
 80058fe:	e01a      	b.n	8005936 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d115      	bne.n	8005932 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005912:	2001      	movs	r0, #1
 8005914:	f7fb fd76 	bl	8001404 <HAL_Delay>
      ms++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f921 	bl	8005b66 <USB_GetMode>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <USB_SetCurrentMode+0x84>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b31      	cmp	r3, #49	; 0x31
 800592e:	d9f0      	bls.n	8005912 <USB_SetCurrentMode+0x60>
 8005930:	e001      	b.n	8005936 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e005      	b.n	8005942 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b32      	cmp	r3, #50	; 0x32
 800593a:	d101      	bne.n	8005940 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <USB_FlushTxFifo+0x64>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d901      	bls.n	800596c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e01b      	b.n	80059a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	daf2      	bge.n	800595a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	019b      	lsls	r3, r3, #6
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <USB_FlushTxFifo+0x64>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e006      	b.n	80059a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d0f0      	beq.n	8005984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <USB_FlushRxFifo+0x5c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e018      	b.n	8005a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	daf2      	bge.n	80059c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2210      	movs	r2, #16
 80059e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <USB_FlushRxFifo+0x5c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e006      	b.n	8005a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d0f0      	beq.n	80059e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	00030d40 	.word	0x00030d40

08005a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	4611      	mov	r1, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	460b      	mov	r3, r1
 8005a24:	71fb      	strb	r3, [r7, #7]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d123      	bne.n	8005a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a3a:	88bb      	ldrh	r3, [r7, #4]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e018      	b.n	8005a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	031a      	lsls	r2, r3, #12
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a54:	461a      	mov	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3e2      	bcc.n	8005a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3724      	adds	r7, #36	; 0x24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b08b      	sub	sp, #44	; 0x2c
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	089b      	lsrs	r3, r3, #2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e014      	b.n	8005ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	3301      	adds	r3, #1
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	3301      	adds	r3, #1
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d3e6      	bcc.n	8005abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aee:	8bfb      	ldrh	r3, [r7, #30]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01e      	beq.n	8005b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afe:	461a      	mov	r2, r3
 8005b00:	f107 0310 	add.w	r3, r7, #16
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	701a      	strb	r2, [r3, #0]
      i++;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	3301      	adds	r3, #1
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b26:	8bfb      	ldrh	r3, [r7, #30]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b2c:	8bfb      	ldrh	r3, [r7, #30]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ea      	bne.n	8005b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	372c      	adds	r7, #44	; 0x2c
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0301 	and.w	r3, r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <USB_CoreReset+0x64>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e01b      	b.n	8005bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	daf2      	bge.n	8005b90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <USB_CoreReset+0x64>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e006      	b.n	8005bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d0f0      	beq.n	8005bba <USB_CoreReset+0x36>

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	00030d40 	.word	0x00030d40

08005bec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bec:	b084      	sub	sp, #16
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10a      	bne.n	8005c5e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c56:	f043 0304 	orr.w	r3, r3, #4
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e014      	b.n	8005c88 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c6c:	f023 0304 	bic.w	r3, r3, #4
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e009      	b.n	8005c88 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c82:	f023 0304 	bic.w	r3, r3, #4
 8005c86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c88:	2110      	movs	r1, #16
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fe5e 	bl	800594c <USB_FlushTxFifo>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fe8a 	bl	80059b4 <USB_FlushRxFifo>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e015      	b.n	8005cdc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3e5      	bcc.n	8005cb0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <USB_HostInit+0x16c>)
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <USB_HostInit+0x170>)
 8005d10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d14:	e009      	b.n	8005d2a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <USB_HostInit+0x174>)
 8005d20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a0f      	ldr	r2, [pc, #60]	; (8005d64 <USB_HostInit+0x178>)
 8005d26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f043 0210 	orr.w	r2, r3, #16
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <USB_HostInit+0x17c>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d54:	b004      	add	sp, #16
 8005d56:	4770      	bx	lr
 8005d58:	01000200 	.word	0x01000200
 8005d5c:	00e00300 	.word	0x00e00300
 8005d60:	00600080 	.word	0x00600080
 8005d64:	004000e0 	.word	0x004000e0
 8005d68:	a3200008 	.word	0xa3200008

08005d6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db4:	461a      	mov	r2, r3
 8005db6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dba:	6053      	str	r3, [r2, #4]
 8005dbc:	e009      	b.n	8005dd2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d106      	bne.n	8005dd2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dd0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e10:	2064      	movs	r0, #100	; 0x64
 8005e12:	f7fb faf7 	bl	8001404 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e24:	200a      	movs	r0, #10
 8005e26:	f7fb faed 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <USB_DriveVbus+0x44>
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d106      	bne.n	8005e78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	d109      	bne.n	8005e98 <USB_DriveVbus+0x64>
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0c5b      	lsrs	r3, r3, #17
 8005ec4:	f003 0303 	and.w	r3, r3, #3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	b29b      	uxth	r3, r3
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	70fb      	strb	r3, [r7, #3]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70bb      	strb	r3, [r7, #2]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d87e      	bhi.n	8006034 <USB_HC_Init+0x13c>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <USB_HC_Init+0x44>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005ff7 	.word	0x08005ff7
 8005f44:	08005f4d 	.word	0x08005f4d
 8005f48:	08005fb9 	.word	0x08005fb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da10      	bge.n	8005f8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f88:	e057      	b.n	800603a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d051      	beq.n	800603a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fb4:	60d3      	str	r3, [r2, #12]
      break;
 8005fb6:	e040      	b.n	800603a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da34      	bge.n	800603e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ff4:	e023      	b.n	800603e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	f240 2325 	movw	r3, #549	; 0x225
 8006008:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800600a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800600e:	2b00      	cmp	r3, #0
 8006010:	da17      	bge.n	8006042 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	440a      	add	r2, r1
 8006028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006030:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006032:	e006      	b.n	8006042 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
      break;
 8006038:	e004      	b.n	8006044 <USB_HC_Init+0x14c>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <USB_HC_Init+0x14c>
      break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <USB_HC_Init+0x14c>
      break;
 8006042:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	440a      	add	r2, r1
 800605a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605e:	f043 0302 	orr.w	r3, r3, #2
 8006062:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	2101      	movs	r1, #1
 8006074:	fa01 f303 	lsl.w	r3, r1, r3
 8006078:	6939      	ldr	r1, [r7, #16]
 800607a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800607e:	4313      	orrs	r3, r2
 8006080:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800608e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da03      	bge.n	800609e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	e001      	b.n	80060a2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff feff 	bl	8005ea6 <USB_GetHostSpeed>
 80060a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d106      	bne.n	80060c0 <USB_HC_Init+0x1c8>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d003      	beq.n	80060c0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e001      	b.n	80060c4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060c4:	787b      	ldrb	r3, [r7, #1]
 80060c6:	059b      	lsls	r3, r3, #22
 80060c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	02db      	lsls	r3, r3, #11
 80060d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060da:	049b      	lsls	r3, r3, #18
 80060dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	0159      	lsls	r1, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006100:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006106:	2b03      	cmp	r3, #3
 8006108:	d003      	beq.n	8006112 <USB_HC_Init+0x21a>
 800610a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d10f      	bne.n	8006132 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006130:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006132:	7ffb      	ldrb	r3, [r7, #31]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006158:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02d      	beq.n	80061c2 <USB_HC_StartXfer+0x86>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	791b      	ldrb	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d129      	bne.n	80061c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d117      	bne.n	80061a4 <USB_HC_StartXfer+0x68>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	79db      	ldrb	r3, [r3, #7]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <USB_HC_StartXfer+0x48>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	79db      	ldrb	r3, [r3, #7]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d10f      	bne.n	80061a4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	440a      	add	r2, r1
 800619a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <USB_HC_StartXfer+0x86>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	795b      	ldrb	r3, [r3, #5]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d107      	bne.n	80061c2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fa0f 	bl	80065dc <USB_DoPing>
      return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e0f8      	b.n	80063b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d018      	beq.n	80061fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	8912      	ldrh	r2, [r2, #8]
 80061d2:	4413      	add	r3, r2
 80061d4:	3b01      	subs	r3, #1
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	8912      	ldrh	r2, [r2, #8]
 80061da:	fbb3 f3f2 	udiv	r3, r3, r2
 80061de:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061e2:	8b7b      	ldrh	r3, [r7, #26]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d90b      	bls.n	8006200 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061e8:	8b7b      	ldrh	r3, [r7, #26]
 80061ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	8912      	ldrh	r2, [r2, #8]
 80061f2:	fb03 f202 	mul.w	r2, r3, r2
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	e001      	b.n	8006200 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061fc:	2301      	movs	r3, #1
 80061fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	8912      	ldrh	r2, [r2, #8]
 800620e:	fb03 f202 	mul.w	r2, r3, r2
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	611a      	str	r2, [r3, #16]
 8006216:	e003      	b.n	8006220 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800622a:	04d9      	lsls	r1, r3, #19
 800622c:	4b63      	ldr	r3, [pc, #396]	; (80063bc <USB_HC_StartXfer+0x280>)
 800622e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006230:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	7a9b      	ldrb	r3, [r3, #10]
 8006236:	075b      	lsls	r3, r3, #29
 8006238:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800623c:	69f9      	ldr	r1, [r7, #28]
 800623e:	0148      	lsls	r0, r1, #5
 8006240:	6a39      	ldr	r1, [r7, #32]
 8006242:	4401      	add	r1, r0
 8006244:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006248:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800624a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	460a      	mov	r2, r1
 8006264:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf0c      	ite	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	2300      	movne	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	440a      	add	r2, r1
 8006294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800629c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	7e7b      	ldrb	r3, [r7, #25]
 80062ae:	075b      	lsls	r3, r3, #29
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	0148      	lsls	r0, r1, #5
 80062b4:	6a39      	ldr	r1, [r7, #32]
 80062b6:	4401      	add	r1, r0
 80062b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	78db      	ldrb	r3, [r3, #3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	e003      	b.n	80062f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	461a      	mov	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e04e      	b.n	80063b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	78db      	ldrb	r3, [r3, #3]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d149      	bne.n	80063b2 <USB_HC_StartXfer+0x276>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d045      	beq.n	80063b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	79db      	ldrb	r3, [r3, #7]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d830      	bhi.n	8006390 <USB_HC_StartXfer+0x254>
 800632e:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <USB_HC_StartXfer+0x1f8>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006345 	.word	0x08006345
 8006338:	08006369 	.word	0x08006369
 800633c:	08006345 	.word	0x08006345
 8006340:	08006369 	.word	0x08006369
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	3303      	adds	r3, #3
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800634e:	8afa      	ldrh	r2, [r7, #22]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	b29b      	uxth	r3, r3
 8006356:	429a      	cmp	r2, r3
 8006358:	d91c      	bls.n	8006394 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	619a      	str	r2, [r3, #24]
        }
        break;
 8006366:	e015      	b.n	8006394 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	3303      	adds	r3, #3
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006372:	8afa      	ldrh	r2, [r7, #22]
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	b29b      	uxth	r3, r3
 800637e:	429a      	cmp	r2, r3
 8006380:	d90a      	bls.n	8006398 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	619a      	str	r2, [r3, #24]
        }
        break;
 800638e:	e003      	b.n	8006398 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <USB_HC_StartXfer+0x25e>
        break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <USB_HC_StartXfer+0x25e>
        break;
 8006398:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	68d9      	ldr	r1, [r3, #12]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785a      	ldrb	r2, [r3, #1]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2000      	movs	r0, #0
 80063aa:	9000      	str	r0, [sp, #0]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff fb31 	bl	8005a14 <USB_WritePacket>
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	; 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	1ff80000 	.word	0x1ff80000

080063c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	b29b      	uxth	r3, r3
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b089      	sub	sp, #36	; 0x24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	0c9b      	lsrs	r3, r3, #18
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	0fdb      	lsrs	r3, r3, #31
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b20      	cmp	r3, #32
 8006430:	d104      	bne.n	800643c <USB_HC_Halt+0x5a>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e0c8      	b.n	80065ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <USB_HC_Halt+0x66>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d163      	bne.n	8006510 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006466:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 80ab 	bne.w	80065cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d133      	bne.n	80064ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	440a      	add	r2, r1
 8006498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ce:	d81d      	bhi.n	800650c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e6:	d0ec      	beq.n	80064c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064e8:	e070      	b.n	80065cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006508:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650a:	e05f      	b.n	80065cc <USB_HC_Halt+0x1ea>
            break;
 800650c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650e:	e05d      	b.n	80065cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d133      	bne.n	80065a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	440a      	add	r2, r1
 8006556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800655e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800657e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800658c:	d81d      	bhi.n	80065ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a4:	d0ec      	beq.n	8006580 <USB_HC_Halt+0x19e>
 80065a6:	e011      	b.n	80065cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e000      	b.n	80065cc <USB_HC_Halt+0x1ea>
          break;
 80065ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3724      	adds	r7, #36	; 0x24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065f0:	2301      	movs	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	04da      	lsls	r2, r3, #19
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <USB_DoPing+0x74>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	440a      	add	r2, r1
 8006604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800660c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006624:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800662c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	461a      	mov	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	1ff80000 	.word	0x1ff80000

08006654 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff f911 	bl	8005890 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800666e:	2110      	movs	r1, #16
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f96b 	bl	800594c <USB_FlushTxFifo>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff f997 	bl	80059b4 <USB_FlushRxFifo>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e01f      	b.n	80066d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d9dc      	bls.n	8006696 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e034      	b.n	800674c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006708:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	461a      	mov	r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006728:	d80c      	bhi.n	8006744 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800673c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006740:	d0ec      	beq.n	800671c <USB_StopHost+0xc8>
 8006742:	e000      	b.n	8006746 <USB_StopHost+0xf2>
        break;
 8006744:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	3301      	adds	r3, #1
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	d9c7      	bls.n	80066e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006758:	461a      	mov	r2, r3
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f04f 32ff 	mov.w	r2, #4294967295
 8006766:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff f880 	bl	800586e <USB_EnableGlobalInt>

  return ret;
 800676e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b089      	sub	sp, #36	; 0x24
 800677c:	af04      	add	r7, sp, #16
 800677e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006780:	2301      	movs	r3, #1
 8006782:	2202      	movs	r2, #2
 8006784:	2102      	movs	r1, #2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fc66 	bl	8007058 <USBH_FindInterface>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2bff      	cmp	r3, #255	; 0xff
 8006794:	d002      	beq.n	800679c <USBH_CDC_InterfaceInit+0x24>
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d901      	bls.n	80067a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	e13d      	b.n	8006a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fc3b 	bl	8007020 <USBH_SelectInterface>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067b4:	2302      	movs	r3, #2
 80067b6:	e131      	b.n	8006a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067be:	2050      	movs	r0, #80	; 0x50
 80067c0:	f002 fafa 	bl	8008db8 <malloc>
 80067c4:	4603      	mov	r3, r0
 80067c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067d8:	2302      	movs	r3, #2
 80067da:	e11f      	b.n	8006a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067dc:	2250      	movs	r2, #80	; 0x50
 80067de:	2100      	movs	r1, #0
 80067e0:	68b8      	ldr	r0, [r7, #8]
 80067e2:	f002 fb07 	bl	8008df4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	211a      	movs	r1, #26
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da15      	bge.n	800682a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	211a      	movs	r1, #26
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	211a      	movs	r1, #26
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 ff2c 	bl	800868e <USBH_AllocPipe>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	7819      	ldrb	r1, [r3, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	7858      	ldrb	r0, [r3, #1]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	8952      	ldrh	r2, [r2, #10]
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	2203      	movs	r2, #3
 800685a:	9201      	str	r2, [sp, #4]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	4623      	mov	r3, r4
 8006860:	4602      	mov	r2, r0
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fee4 	bl	8008630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2200      	movs	r2, #0
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f002 f9f3 	bl	8008c5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006876:	2300      	movs	r3, #0
 8006878:	2200      	movs	r2, #0
 800687a:	210a      	movs	r1, #10
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fbeb 	bl	8007058 <USBH_FindInterface>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2bff      	cmp	r3, #255	; 0xff
 800688a:	d002      	beq.n	8006892 <USBH_CDC_InterfaceInit+0x11a>
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d901      	bls.n	8006896 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006892:	2302      	movs	r3, #2
 8006894:	e0c2      	b.n	8006a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da16      	bge.n	80068dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	211a      	movs	r1, #26
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	835a      	strh	r2, [r3, #26]
 80068da:	e015      	b.n	8006908 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	211a      	movs	r1, #26
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	211a      	movs	r1, #26
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006902:	881a      	ldrh	r2, [r3, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	211a      	movs	r1, #26
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	4413      	add	r3, r2
 8006914:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b25b      	sxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	da16      	bge.n	800694e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	211a      	movs	r1, #26
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	211a      	movs	r1, #26
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	835a      	strh	r2, [r3, #26]
 800694c:	e015      	b.n	800697a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	211a      	movs	r1, #26
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	4413      	add	r3, r2
 800695a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	211a      	movs	r1, #26
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	7b9b      	ldrb	r3, [r3, #14]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fe84 	bl	800868e <USBH_AllocPipe>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	7bdb      	ldrb	r3, [r3, #15]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fe7a 	bl	800868e <USBH_AllocPipe>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	7b59      	ldrb	r1, [r3, #13]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	7b98      	ldrb	r0, [r3, #14]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	8b12      	ldrh	r2, [r2, #24]
 80069ba:	9202      	str	r2, [sp, #8]
 80069bc:	2202      	movs	r2, #2
 80069be:	9201      	str	r2, [sp, #4]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4623      	mov	r3, r4
 80069c4:	4602      	mov	r2, r0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fe32 	bl	8008630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	7b19      	ldrb	r1, [r3, #12]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	7bd8      	ldrb	r0, [r3, #15]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	8b52      	ldrh	r2, [r2, #26]
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	2202      	movs	r2, #2
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4623      	mov	r3, r4
 80069ee:	4602      	mov	r2, r0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe1d 	bl	8008630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	7b5b      	ldrb	r3, [r3, #13]
 8006a02:	2200      	movs	r2, #0
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 f928 	bl	8008c5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	7b1b      	ldrb	r3, [r3, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f002 f921 	bl	8008c5c <USBH_LL_SetToggle>

  return USBH_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}

08006a24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fe12 	bl	800866e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fe3d 	bl	80086d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7b1b      	ldrb	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00e      	beq.n	8006a82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	7b1b      	ldrb	r3, [r3, #12]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fdff 	bl	800866e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7b1b      	ldrb	r3, [r3, #12]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fe2a 	bl	80086d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	7b5b      	ldrb	r3, [r3, #13]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fdec 	bl	800866e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	7b5b      	ldrb	r3, [r3, #13]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fe17 	bl	80086d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f002 f983 	bl	8008dc8 <free>
    phost->pActiveClass->pData = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac8:	2200      	movs	r2, #0
 8006aca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3340      	adds	r3, #64	; 0x40
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8b1 	bl	8006c56 <GetLineCoding>
 8006af4:	4603      	mov	r3, r0
 8006af6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b04:	2102      	movs	r1, #2
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d877      	bhi.n	8006c28 <USBH_CDC_Process+0x114>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBH_CDC_Process+0x2c>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b5b 	.word	0x08006b5b
 8006b48:	08006b8b 	.word	0x08006b8b
 8006b4c:	08006bff 	.word	0x08006bff
 8006b50:	08006c0d 	.word	0x08006c0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
      break;
 8006b58:	e06d      	b.n	8006c36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f897 	bl	8006c94 <SetLineCoding>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b78:	e058      	b.n	8006c2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d055      	beq.n	8006c2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b88:	e050      	b.n	8006c2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3340      	adds	r3, #64	; 0x40
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f860 	bl	8006c56 <GetLineCoding>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d126      	bne.n	8006bee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	791b      	ldrb	r3, [r3, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d13b      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d133      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d12b      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d124      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f958 	bl	8006e9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bec:	e020      	b.n	8006c30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d01d      	beq.n	8006c30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bfc:	e018      	b.n	8006c30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f867 	bl	8006cd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f8da 	bl	8006dbe <CDC_ProcessReception>
      break;
 8006c0a:	e014      	b.n	8006c36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 ffef 	bl	8007bf2 <USBH_ClrFeature>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c26:	e005      	b.n	8006c34 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c28:	bf00      	nop
 8006c2a:	e004      	b.n	8006c36 <USBH_CDC_Process+0x122>
      break;
 8006c2c:	bf00      	nop
 8006c2e:	e002      	b.n	8006c36 <USBH_CDC_Process+0x122>
      break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <USBH_CDC_Process+0x122>
      break;
 8006c34:	bf00      	nop

  }

  return status;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	22a1      	movs	r2, #161	; 0xa1
 8006c64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2207      	movs	r2, #7
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa81 	bl	800818c <USBH_CtlReq>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2221      	movs	r2, #33	; 0x21
 8006ca2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2207      	movs	r2, #7
 8006cba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2207      	movs	r2, #7
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fa62 	bl	800818c <USBH_CtlReq>
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af02      	add	r7, sp, #8
 8006cd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <CDC_ProcessTransmission+0x26>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d023      	beq.n	8006d3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cf6:	e05e      	b.n	8006db6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	8b12      	ldrh	r2, [r2, #24]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d90b      	bls.n	8006d1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8b1a      	ldrh	r2, [r3, #24]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	7b5b      	ldrb	r3, [r3, #13]
 8006d10:	2001      	movs	r0, #1
 8006d12:	9000      	str	r0, [sp, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fc48 	bl	80085aa <USBH_BulkSendData>
 8006d1a:	e00b      	b.n	8006d34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	7b5b      	ldrb	r3, [r3, #13]
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	9000      	str	r0, [sp, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fc3b 	bl	80085aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d3c:	e03b      	b.n	8006db6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	7b5b      	ldrb	r3, [r3, #13]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 ff5f 	bl	8008c08 <USBH_LL_GetURBState>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d128      	bne.n	8006da6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	8b12      	ldrh	r2, [r2, #24]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d90e      	bls.n	8006d7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	8b12      	ldrh	r2, [r2, #24]
 8006d68:	1a9a      	subs	r2, r3, r2
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	8b12      	ldrh	r2, [r2, #24]
 8006d76:	441a      	add	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	61da      	str	r2, [r3, #28]
 8006d7c:	e002      	b.n	8006d84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d94:	e00e      	b.n	8006db4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f868 	bl	8006e74 <USBH_CDC_TransmitCallback>
      break;
 8006da4:	e006      	b.n	8006db4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006da6:	7afb      	ldrb	r3, [r7, #11]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d103      	bne.n	8006db4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006db4:	bf00      	nop
  }
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d002      	beq.n	8006de4 <CDC_ProcessReception+0x26>
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00e      	beq.n	8006e00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006de2:	e043      	b.n	8006e6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6a19      	ldr	r1, [r3, #32]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	8b5a      	ldrh	r2, [r3, #26]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	7b1b      	ldrb	r3, [r3, #12]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fbff 	bl	80085f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dfe:	e035      	b.n	8006e6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	7b1b      	ldrb	r3, [r3, #12]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fefe 	bl	8008c08 <USBH_LL_GetURBState>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e10:	7cfb      	ldrb	r3, [r7, #19]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d129      	bne.n	8006e6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	7b1b      	ldrb	r3, [r3, #12]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fe61 	bl	8008ae4 <USBH_LL_GetLastXferSize>
 8006e22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d016      	beq.n	8006e5c <CDC_ProcessReception+0x9e>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	8b5b      	ldrh	r3, [r3, #26]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d910      	bls.n	8006e5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2203      	movs	r2, #3
 8006e56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e5a:	e006      	b.n	8006e6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f80f 	bl	8006e88 <USBH_CDC_ReceiveCallback>
      break;
 8006e6a:	bf00      	nop
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e029      	b.n	8006f1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	79fa      	ldrb	r2, [r7, #7]
 8006ecc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f81f 	bl	8006f24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 fd31 	bl	800897c <USBH_LL_Init>

  return USBH_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e009      	b.n	8006f4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	33e0      	adds	r3, #224	; 0xe0
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	2200      	movs	r2, #0
 8006f42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d9f2      	bls.n	8006f36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e009      	b.n	8006f6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f70:	d3f1      	bcc.n	8006f56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d016      	beq.n	800700e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10e      	bne.n	8007008 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	33de      	adds	r3, #222	; 0xde
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	e004      	b.n	8007012 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007008:	2302      	movs	r3, #2
 800700a:	73fb      	strb	r3, [r7, #15]
 800700c:	e001      	b.n	8007012 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	429a      	cmp	r2, r3
 800703a:	d204      	bcs.n	8007046 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007044:	e001      	b.n	800704a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007046:	2302      	movs	r3, #2
 8007048:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4603      	mov	r3, r0
 8007068:	70fb      	strb	r3, [r7, #3]
 800706a:	460b      	mov	r3, r1
 800706c:	70bb      	strb	r3, [r7, #2]
 800706e:	4613      	mov	r3, r2
 8007070:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007080:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007082:	e025      	b.n	80070d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	221a      	movs	r2, #26
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	3308      	adds	r3, #8
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	3302      	adds	r3, #2
 8007094:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	429a      	cmp	r2, r3
 800709e:	d002      	beq.n	80070a6 <USBH_FindInterface+0x4e>
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	2bff      	cmp	r3, #255	; 0xff
 80070a4:	d111      	bne.n	80070ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070aa:	78ba      	ldrb	r2, [r7, #2]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d002      	beq.n	80070b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070b0:	78bb      	ldrb	r3, [r7, #2]
 80070b2:	2bff      	cmp	r3, #255	; 0xff
 80070b4:	d109      	bne.n	80070ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070ba:	787a      	ldrb	r2, [r7, #1]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d002      	beq.n	80070c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070c0:	787b      	ldrb	r3, [r7, #1]
 80070c2:	2bff      	cmp	r3, #255	; 0xff
 80070c4:	d101      	bne.n	80070ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	e006      	b.n	80070d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	3301      	adds	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d9d6      	bls.n	8007084 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070d6:	23ff      	movs	r3, #255	; 0xff
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fc81 	bl	80089f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fd9a 	bl	8008c2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af04      	add	r7, sp, #16
 800710a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800710c:	2302      	movs	r3, #2
 800710e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	d102      	bne.n	8007126 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2203      	movs	r2, #3
 8007124:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b0b      	cmp	r3, #11
 800712e:	f200 81be 	bhi.w	80074ae <USBH_Process+0x3aa>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <USBH_Process+0x34>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007169 	.word	0x08007169
 800713c:	0800719b 	.word	0x0800719b
 8007140:	08007203 	.word	0x08007203
 8007144:	08007449 	.word	0x08007449
 8007148:	080074af 	.word	0x080074af
 800714c:	080072a7 	.word	0x080072a7
 8007150:	080073ef 	.word	0x080073ef
 8007154:	080072dd 	.word	0x080072dd
 8007158:	080072fd 	.word	0x080072fd
 800715c:	0800731d 	.word	0x0800731d
 8007160:	08007361 	.word	0x08007361
 8007164:	08007431 	.word	0x08007431
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 819e 	beq.w	80074b2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800717c:	20c8      	movs	r0, #200	; 0xc8
 800717e:	f001 fd9d 	bl	8008cbc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fc93 	bl	8008aae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007198:	e18b      	b.n	80074b2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b2:	e18d      	b.n	80074d0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071be:	d914      	bls.n	80071ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071c6:	3301      	adds	r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d903      	bls.n	80071e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	220d      	movs	r2, #13
 80071de:	701a      	strb	r2, [r3, #0]
      break;
 80071e0:	e176      	b.n	80074d0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e172      	b.n	80074d0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071f0:	f103 020a 	add.w	r2, r3, #10
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071fa:	200a      	movs	r0, #10
 80071fc:	f001 fd5e 	bl	8008cbc <USBH_Delay>
      break;
 8007200:	e166      	b.n	80074d0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007212:	2104      	movs	r1, #4
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007218:	2064      	movs	r0, #100	; 0x64
 800721a:	f001 fd4f 	bl	8008cbc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fc1e 	bl	8008a60 <USBH_LL_GetSpeed>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2205      	movs	r2, #5
 8007232:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007234:	2100      	movs	r1, #0
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fa29 	bl	800868e <USBH_AllocPipe>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007244:	2180      	movs	r1, #128	; 0x80
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fa21 	bl	800868e <USBH_AllocPipe>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7919      	ldrb	r1, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007268:	b292      	uxth	r2, r2
 800726a:	9202      	str	r2, [sp, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	9201      	str	r2, [sp, #4]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4603      	mov	r3, r0
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f9da 	bl	8008630 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7959      	ldrb	r1, [r3, #5]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007290:	b292      	uxth	r2, r2
 8007292:	9202      	str	r2, [sp, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4603      	mov	r3, r0
 800729c:	2200      	movs	r2, #0
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 f9c6 	bl	8008630 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a4:	e114      	b.n	80074d0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f918 	bl	80074dc <USBH_HandleEnum>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 80fe 	bne.w	80074b6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d103      	bne.n	80072d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2208      	movs	r2, #8
 80072d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072d2:	e0f0      	b.n	80074b6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2207      	movs	r2, #7
 80072d8:	701a      	strb	r2, [r3, #0]
      break;
 80072da:	e0ec      	b.n	80074b6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80e9 	beq.w	80074ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2208      	movs	r2, #8
 80072f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072fa:	e0de      	b.n	80074ba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fc2c 	bl	8007b64 <USBH_SetCfg>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 80d5 	bne.w	80074be <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2209      	movs	r2, #9
 8007318:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800731a:	e0d0      	b.n	80074be <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800732a:	2101      	movs	r1, #1
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc3c 	bl	8007baa <USBH_SetFeature>
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220a      	movs	r2, #10
 8007342:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007344:	e0bd      	b.n	80074c2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	f040 80b9 	bne.w	80074c2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	220a      	movs	r2, #10
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e0b4      	b.n	80074c2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220a      	movs	r2, #10
 800735c:	701a      	strb	r2, [r3, #0]
      break;
 800735e:	e0b0      	b.n	80074c2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80ad 	beq.w	80074c6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	e016      	b.n	80073a8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800737a:	7bfa      	ldrb	r2, [r7, #15]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	32de      	adds	r2, #222	; 0xde
 8007380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007384:	791a      	ldrb	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800738c:	429a      	cmp	r2, r3
 800738e:	d108      	bne.n	80073a2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007390:	7bfa      	ldrb	r2, [r7, #15]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32de      	adds	r2, #222	; 0xde
 8007396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80073a0:	e005      	b.n	80073ae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	3301      	adds	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0e5      	beq.n	800737a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d016      	beq.n	80073e6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2206      	movs	r2, #6
 80073ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073d6:	2103      	movs	r1, #3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073dc:	e073      	b.n	80074c6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	220d      	movs	r2, #13
 80073e2:	701a      	strb	r2, [r3, #0]
      break;
 80073e4:	e06f      	b.n	80074c6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	220d      	movs	r2, #13
 80073ea:	701a      	strb	r2, [r3, #0]
      break;
 80073ec:	e06b      	b.n	80074c6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d017      	beq.n	8007428 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
 8007404:	4603      	mov	r3, r0
 8007406:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	220b      	movs	r2, #11
 8007414:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007416:	e058      	b.n	80074ca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d154      	bne.n	80074ca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220d      	movs	r2, #13
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e050      	b.n	80074ca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220d      	movs	r2, #13
 800742c:	701a      	strb	r2, [r3, #0]
      break;
 800742e:	e04c      	b.n	80074ca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d049      	beq.n	80074ce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
      }
      break;
 8007446:	e042      	b.n	80074ce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fd67 	bl	8006f24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007484:	2105      	movs	r1, #5
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b01      	cmp	r3, #1
 8007494:	d107      	bne.n	80074a6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fe20 	bl	80070e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a4:	e014      	b.n	80074d0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 faa4 	bl	80089f4 <USBH_LL_Start>
      break;
 80074ac:	e010      	b.n	80074d0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074ae:	bf00      	nop
 80074b0:	e00e      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074b2:	bf00      	nop
 80074b4:	e00c      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074b6:	bf00      	nop
 80074b8:	e00a      	b.n	80074d0 <USBH_Process+0x3cc>
    break;
 80074ba:	bf00      	nop
 80074bc:	e008      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <USBH_Process+0x3cc>
      break;
 80074ce:	bf00      	nop
  }
  return USBH_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af04      	add	r7, sp, #16
 80074e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	f200 81c1 	bhi.w	8007878 <USBH_HandleEnum+0x39c>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <USBH_HandleEnum+0x20>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	080075db 	.word	0x080075db
 8007504:	08007645 	.word	0x08007645
 8007508:	080076d3 	.word	0x080076d3
 800750c:	0800773d 	.word	0x0800773d
 8007510:	080077ad 	.word	0x080077ad
 8007514:	080077f3 	.word	0x080077f3
 8007518:	08007839 	.word	0x08007839
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800751c:	2108      	movs	r1, #8
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa50 	bl	80079c4 <USBH_Get_DevDesc>
 8007524:	4603      	mov	r3, r0
 8007526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d130      	bne.n	8007590 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	7919      	ldrb	r1, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007552:	b292      	uxth	r2, r2
 8007554:	9202      	str	r2, [sp, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	9201      	str	r2, [sp, #4]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4603      	mov	r3, r0
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f865 	bl	8008630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7959      	ldrb	r1, [r3, #5]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800757a:	b292      	uxth	r2, r2
 800757c:	9202      	str	r2, [sp, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	9201      	str	r2, [sp, #4]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4603      	mov	r3, r0
 8007586:	2200      	movs	r2, #0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 f851 	bl	8008630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800758e:	e175      	b.n	800787c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b03      	cmp	r3, #3
 8007594:	f040 8172 	bne.w	800787c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800759e:	3301      	adds	r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d903      	bls.n	80075ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	220d      	movs	r2, #13
 80075b6:	701a      	strb	r2, [r3, #0]
      break;
 80075b8:	e160      	b.n	800787c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	795b      	ldrb	r3, [r3, #5]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f885 	bl	80086d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f87f 	bl	80086d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
      break;
 80075d8:	e150      	b.n	800787c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075da:	2112      	movs	r1, #18
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f9f1 	bl	80079c4 <USBH_Get_DevDesc>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075f2:	e145      	b.n	8007880 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f040 8142 	bne.w	8007880 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007602:	3301      	adds	r3, #1
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007612:	2b03      	cmp	r3, #3
 8007614:	d903      	bls.n	800761e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	220d      	movs	r2, #13
 800761a:	701a      	strb	r2, [r3, #0]
      break;
 800761c:	e130      	b.n	8007880 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	795b      	ldrb	r3, [r3, #5]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f853 	bl	80086d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f84d 	bl	80086d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
      break;
 8007642:	e11d      	b.n	8007880 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007644:	2101      	movs	r1, #1
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa68 	bl	8007b1c <USBH_SetAddress>
 800764c:	4603      	mov	r3, r0
 800764e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d132      	bne.n	80076bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007656:	2002      	movs	r0, #2
 8007658:	f001 fb30 	bl	8008cbc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2203      	movs	r2, #3
 8007668:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7919      	ldrb	r1, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800767e:	b292      	uxth	r2, r2
 8007680:	9202      	str	r2, [sp, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	9201      	str	r2, [sp, #4]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	4603      	mov	r3, r0
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 ffcf 	bl	8008630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7959      	ldrb	r1, [r3, #5]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076a6:	b292      	uxth	r2, r2
 80076a8:	9202      	str	r2, [sp, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	9201      	str	r2, [sp, #4]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	4603      	mov	r3, r0
 80076b2:	2200      	movs	r2, #0
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 ffbb 	bl	8008630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e0e3      	b.n	8007884 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 80e0 	bne.w	8007884 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	220d      	movs	r2, #13
 80076c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	705a      	strb	r2, [r3, #1]
      break;
 80076d0:	e0d8      	b.n	8007884 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076d2:	2109      	movs	r1, #9
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f99d 	bl	8007a14 <USBH_Get_CfgDesc>
 80076da:	4603      	mov	r3, r0
 80076dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2204      	movs	r2, #4
 80076e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ea:	e0cd      	b.n	8007888 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f040 80ca 	bne.w	8007888 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076fa:	3301      	adds	r3, #1
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770a:	2b03      	cmp	r3, #3
 800770c:	d903      	bls.n	8007716 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	220d      	movs	r2, #13
 8007712:	701a      	strb	r2, [r3, #0]
      break;
 8007714:	e0b8      	b.n	8007888 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	795b      	ldrb	r3, [r3, #5]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 ffd7 	bl	80086d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ffd1 	bl	80086d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	e0a5      	b.n	8007888 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f965 	bl	8007a14 <USBH_Get_CfgDesc>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2205      	movs	r2, #5
 8007758:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800775a:	e097      	b.n	800788c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b03      	cmp	r3, #3
 8007760:	f040 8094 	bne.w	800788c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800776a:	3301      	adds	r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800777a:	2b03      	cmp	r3, #3
 800777c:	d903      	bls.n	8007786 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	220d      	movs	r2, #13
 8007782:	701a      	strb	r2, [r3, #0]
      break;
 8007784:	e082      	b.n	800788c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	795b      	ldrb	r3, [r3, #5]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff9f 	bl	80086d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	791b      	ldrb	r3, [r3, #4]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ff99 	bl	80086d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e06f      	b.n	800788c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d019      	beq.n	80077ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077c2:	23ff      	movs	r3, #255	; 0xff
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f949 	bl	8007a5c <USBH_Get_StringDesc>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2206      	movs	r2, #6
 80077d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077da:	e059      	b.n	8007890 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d156      	bne.n	8007890 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2206      	movs	r2, #6
 80077e6:	705a      	strb	r2, [r3, #1]
      break;
 80077e8:	e052      	b.n	8007890 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2206      	movs	r2, #6
 80077ee:	705a      	strb	r2, [r3, #1]
      break;
 80077f0:	e04e      	b.n	8007890 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d019      	beq.n	8007830 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007808:	23ff      	movs	r3, #255	; 0xff
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f926 	bl	8007a5c <USBH_Get_StringDesc>
 8007810:	4603      	mov	r3, r0
 8007812:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2207      	movs	r2, #7
 800781e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007820:	e038      	b.n	8007894 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d135      	bne.n	8007894 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2207      	movs	r2, #7
 800782c:	705a      	strb	r2, [r3, #1]
      break;
 800782e:	e031      	b.n	8007894 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2207      	movs	r2, #7
 8007834:	705a      	strb	r2, [r3, #1]
      break;
 8007836:	e02d      	b.n	8007894 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800783e:	2b00      	cmp	r3, #0
 8007840:	d017      	beq.n	8007872 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800784e:	23ff      	movs	r3, #255	; 0xff
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f903 	bl	8007a5c <USBH_Get_StringDesc>
 8007856:	4603      	mov	r3, r0
 8007858:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007864:	e018      	b.n	8007898 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b03      	cmp	r3, #3
 800786a:	d115      	bne.n	8007898 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
      break;
 8007870:	e012      	b.n	8007898 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
      break;
 8007876:	e00f      	b.n	8007898 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007878:	bf00      	nop
 800787a:	e00e      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 800787c:	bf00      	nop
 800787e:	e00c      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007880:	bf00      	nop
 8007882:	e00a      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007884:	bf00      	nop
 8007886:	e008      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007888:	bf00      	nop
 800788a:	e006      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 800788c:	bf00      	nop
 800788e:	e004      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <USBH_HandleEnum+0x3be>
      break;
 8007898:	bf00      	nop
  }
  return Status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f804 	bl	80078e6 <USBH_HandleSof>
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b0b      	cmp	r3, #11
 80078f6:	d10a      	bne.n	800790e <USBH_HandleSof+0x28>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007926:	bf00      	nop
}
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007942:	bf00      	nop
}
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f844 	bl	8008a2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fe91 	bl	80086d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fe8b 	bl	80086d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e2:	2100      	movs	r1, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f864 	bl	8007ab2 <USBH_GetDescriptor>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	b292      	uxth	r2, r2
 8007a04:	4619      	mov	r1, r3
 8007a06:	f000 f918 	bl	8007c3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	331c      	adds	r3, #28
 8007a24:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f83d 	bl	8007ab2 <USBH_GetDescriptor>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	461a      	mov	r2, r3
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f987 	bl	8007d5c <USBH_ParseCfgDesc>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	607a      	str	r2, [r7, #4]
 8007a66:	461a      	mov	r2, r3
 8007a68:	460b      	mov	r3, r1
 8007a6a:	72fb      	strb	r3, [r7, #11]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a78:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a80:	893b      	ldrh	r3, [r7, #8]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	460b      	mov	r3, r1
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f812 	bl	8007ab2 <USBH_GetDescriptor>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d107      	bne.n	8007aa8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a9e:	893a      	ldrh	r2, [r7, #8]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fb24 	bl	80080f0 <USBH_ParseStringDesc>
  }

  return status;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	607b      	str	r3, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	72fb      	strb	r3, [r7, #11]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	789b      	ldrb	r3, [r3, #2]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d11c      	bne.n	8007b06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2206      	movs	r2, #6
 8007adc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	893a      	ldrh	r2, [r7, #8]
 8007ae2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ae4:	893b      	ldrh	r3, [r7, #8]
 8007ae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aee:	d104      	bne.n	8007afa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f240 4209 	movw	r2, #1033	; 0x409
 8007af6:	829a      	strh	r2, [r3, #20]
 8007af8:	e002      	b.n	8007b00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8b3a      	ldrh	r2, [r7, #24]
 8007b04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b06:	8b3b      	ldrh	r3, [r7, #24]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fb3d 	bl	800818c <USBH_CtlReq>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	789b      	ldrb	r3, [r3, #2]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10f      	bne.n	8007b50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2205      	movs	r2, #5
 8007b3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2100      	movs	r1, #0
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fb19 	bl	800818c <USBH_CtlReq>
 8007b5a:	4603      	mov	r3, r0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	789b      	ldrb	r3, [r3, #2]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10e      	bne.n	8007b96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2209      	movs	r2, #9
 8007b82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	887a      	ldrh	r2, [r7, #2]
 8007b88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 faf6 	bl	800818c <USBH_CtlReq>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10f      	bne.n	8007bde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bde:	2200      	movs	r2, #0
 8007be0:	2100      	movs	r1, #0
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fad2 	bl	800818c <USBH_CtlReq>
 8007be8:	4603      	mov	r3, r0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	789b      	ldrb	r3, [r3, #2]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d10f      	bne.n	8007c26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 faae 	bl	800818c <USBH_CtlReq>
 8007c30:	4603      	mov	r3, r0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	785a      	ldrb	r2, [r3, #1]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3303      	adds	r3, #3
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	791a      	ldrb	r2, [r3, #4]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	795a      	ldrb	r2, [r3, #5]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	799a      	ldrb	r2, [r3, #6]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	79da      	ldrb	r2, [r3, #7]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	79db      	ldrb	r3, [r3, #7]
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	dc11      	bgt.n	8007cc0 <USBH_ParseDevDesc+0x86>
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	db16      	blt.n	8007cce <USBH_ParseDevDesc+0x94>
 8007ca0:	3b08      	subs	r3, #8
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <USBH_ParseDevDesc+0x8a>
 8007cbe:	e006      	b.n	8007cce <USBH_ParseDevDesc+0x94>
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d104      	bne.n	8007cce <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	79da      	ldrb	r2, [r3, #7]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	71da      	strb	r2, [r3, #7]
      break;
 8007ccc:	e003      	b.n	8007cd6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2240      	movs	r2, #64	; 0x40
 8007cd2:	71da      	strb	r2, [r3, #7]
      break;
 8007cd4:	bf00      	nop
  }

  if (length > 8U)
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d939      	bls.n	8007d50 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3309      	adds	r3, #9
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	330a      	adds	r3, #10
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	330b      	adds	r3, #11
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	330c      	adds	r3, #12
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	330d      	adds	r3, #13
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	7b9a      	ldrb	r2, [r3, #14]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	7bda      	ldrb	r2, [r3, #15]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	7c1a      	ldrb	r2, [r3, #16]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	7c5a      	ldrb	r2, [r3, #17]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	745a      	strb	r2, [r3, #17]
  }
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08c      	sub	sp, #48	; 0x30
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	785a      	ldrb	r2, [r3, #1]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	3303      	adds	r3, #3
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db8:	bf28      	it	cs
 8007dba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	791a      	ldrb	r2, [r3, #4]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	795a      	ldrb	r2, [r3, #5]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	799a      	ldrb	r2, [r3, #6]
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	79da      	ldrb	r2, [r3, #7]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	7a1a      	ldrb	r2, [r3, #8]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	d002      	beq.n	8007dfa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	2209      	movs	r2, #9
 8007df8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	2b09      	cmp	r3, #9
 8007dfe:	f240 809d 	bls.w	8007f3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e02:	2309      	movs	r3, #9
 8007e04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e0a:	e081      	b.n	8007f10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e0c:	f107 0316 	add.w	r3, r7, #22
 8007e10:	4619      	mov	r1, r3
 8007e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e14:	f000 f99f 	bl	8008156 <USBH_GetNextDesc>
 8007e18:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d176      	bne.n	8007f10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d002      	beq.n	8007e30 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2209      	movs	r2, #9
 8007e2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e34:	221a      	movs	r2, #26
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	6a3a      	ldr	r2, [r7, #32]
 8007e3e:	4413      	add	r3, r2
 8007e40:	3302      	adds	r3, #2
 8007e42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e46:	69f8      	ldr	r0, [r7, #28]
 8007e48:	f000 f87e 	bl	8007f48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e56:	e043      	b.n	8007ee0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e58:	f107 0316 	add.w	r3, r7, #22
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e60:	f000 f979 	bl	8008156 <USBH_GetNextDesc>
 8007e64:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d138      	bne.n	8007ee0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d10f      	bne.n	8007e96 <USBH_ParseCfgDesc+0x13a>
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	799b      	ldrb	r3, [r3, #6]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d10b      	bne.n	8007e96 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	79db      	ldrb	r3, [r3, #7]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10f      	bne.n	8007ea6 <USBH_ParseCfgDesc+0x14a>
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d00b      	beq.n	8007ea6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	2209      	movs	r2, #9
 8007e92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e94:	e007      	b.n	8007ea6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d004      	beq.n	8007ea8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e000      	b.n	8007ea8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ea6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007eb0:	3201      	adds	r2, #1
 8007eb2:	00d2      	lsls	r2, r2, #3
 8007eb4:	211a      	movs	r1, #26
 8007eb6:	fb01 f303 	mul.w	r3, r1, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	6a3a      	ldr	r2, [r7, #32]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec8:	69b9      	ldr	r1, [r7, #24]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f86b 	bl	8007fa6 <USBH_ParseEPDesc>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007eda:	3301      	adds	r3, #1
 8007edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	791b      	ldrb	r3, [r3, #4]
 8007ee4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d204      	bcs.n	8007ef6 <USBH_ParseCfgDesc+0x19a>
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	885a      	ldrh	r2, [r3, #2]
 8007ef0:	8afb      	ldrh	r3, [r7, #22]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d8b0      	bhi.n	8007e58 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d201      	bcs.n	8007f06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e01c      	b.n	8007f40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d805      	bhi.n	8007f24 <USBH_ParseCfgDesc+0x1c8>
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	885a      	ldrh	r2, [r3, #2]
 8007f1c:	8afb      	ldrh	r3, [r7, #22]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	f63f af74 	bhi.w	8007e0c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	bf28      	it	cs
 8007f2c:	2302      	movcs	r3, #2
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d201      	bcs.n	8007f3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e001      	b.n	8007f40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3730      	adds	r7, #48	; 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	785a      	ldrb	r2, [r3, #1]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	789a      	ldrb	r2, [r3, #2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	78da      	ldrb	r2, [r3, #3]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	791a      	ldrb	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	795a      	ldrb	r2, [r3, #5]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	799a      	ldrb	r2, [r3, #6]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	79da      	ldrb	r2, [r3, #7]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	7a1a      	ldrb	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	721a      	strb	r2, [r3, #8]
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b087      	sub	sp, #28
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	785a      	ldrb	r2, [r3, #1]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	789a      	ldrb	r2, [r3, #2]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	78da      	ldrb	r2, [r3, #3]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3305      	adds	r3, #5
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	799a      	ldrb	r2, [r3, #6]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d102      	bne.n	8008008 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008002:	2303      	movs	r3, #3
 8008004:	75fb      	strb	r3, [r7, #23]
 8008006:	e033      	b.n	8008070 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	889b      	ldrh	r3, [r3, #4]
 800800c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008010:	f023 0307 	bic.w	r3, r3, #7
 8008014:	b29a      	uxth	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	889b      	ldrh	r3, [r3, #4]
 800801e:	b21a      	sxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b299      	uxth	r1, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3305      	adds	r3, #5
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	b29b      	uxth	r3, r3
 8008034:	430b      	orrs	r3, r1
 8008036:	b29b      	uxth	r3, r3
 8008038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800803c:	2b00      	cmp	r3, #0
 800803e:	d110      	bne.n	8008062 <USBH_ParseEPDesc+0xbc>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b299      	uxth	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3305      	adds	r3, #5
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b29b      	uxth	r3, r3
 8008054:	430b      	orrs	r3, r1
 8008056:	b29b      	uxth	r3, r3
 8008058:	b21b      	sxth	r3, r3
 800805a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805e:	b21b      	sxth	r3, r3
 8008060:	e001      	b.n	8008066 <USBH_ParseEPDesc+0xc0>
 8008062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008066:	4313      	orrs	r3, r2
 8008068:	b21b      	sxth	r3, r3
 800806a:	b29a      	uxth	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008076:	2b00      	cmp	r3, #0
 8008078:	d116      	bne.n	80080a8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	78db      	ldrb	r3, [r3, #3]
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	2b01      	cmp	r3, #1
 8008084:	d005      	beq.n	8008092 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	78db      	ldrb	r3, [r3, #3]
 800808a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800808e:	2b03      	cmp	r3, #3
 8008090:	d127      	bne.n	80080e2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	799b      	ldrb	r3, [r3, #6]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <USBH_ParseEPDesc+0xfc>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	799b      	ldrb	r3, [r3, #6]
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d91f      	bls.n	80080e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080a2:	2303      	movs	r3, #3
 80080a4:	75fb      	strb	r3, [r7, #23]
 80080a6:	e01c      	b.n	80080e2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	78db      	ldrb	r3, [r3, #3]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d10a      	bne.n	80080ca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	799b      	ldrb	r3, [r3, #6]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <USBH_ParseEPDesc+0x11e>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	799b      	ldrb	r3, [r3, #6]
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d90e      	bls.n	80080e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080c4:	2303      	movs	r3, #3
 80080c6:	75fb      	strb	r3, [r7, #23]
 80080c8:	e00b      	b.n	80080e2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	78db      	ldrb	r3, [r3, #3]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d105      	bne.n	80080e2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	799b      	ldrb	r3, [r3, #6]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080de:	2303      	movs	r3, #3
 80080e0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d120      	bne.n	800814a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	1e9a      	subs	r2, r3, #2
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	4293      	cmp	r3, r2
 8008112:	bf28      	it	cs
 8008114:	4613      	movcs	r3, r2
 8008116:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3302      	adds	r3, #2
 800811c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800811e:	2300      	movs	r3, #0
 8008120:	82fb      	strh	r3, [r7, #22]
 8008122:	e00b      	b.n	800813c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008124:	8afb      	ldrh	r3, [r7, #22]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3301      	adds	r3, #1
 8008134:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008136:	8afb      	ldrh	r3, [r7, #22]
 8008138:	3302      	adds	r3, #2
 800813a:	82fb      	strh	r3, [r7, #22]
 800813c:	8afa      	ldrh	r2, [r7, #22]
 800813e:	8abb      	ldrh	r3, [r7, #20]
 8008140:	429a      	cmp	r2, r3
 8008142:	d3ef      	bcc.n	8008124 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
  }
}
 800814a:	bf00      	nop
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	881a      	ldrh	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	4413      	add	r3, r2
 800816c:	b29a      	uxth	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800817e:	68fb      	ldr	r3, [r7, #12]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800819a:	2301      	movs	r3, #1
 800819c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	789b      	ldrb	r3, [r3, #2]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d002      	beq.n	80081ac <USBH_CtlReq+0x20>
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d00f      	beq.n	80081ca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081aa:	e027      	b.n	80081fc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2202      	movs	r2, #2
 80081c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081c4:	2301      	movs	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
      break;
 80081c8:	e018      	b.n	80081fc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f81c 	bl	8008208 <USBH_HandleControl>
 80081d0:	4603      	mov	r3, r0
 80081d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <USBH_CtlReq+0x54>
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d106      	bne.n	80081ee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2201      	movs	r2, #1
 80081e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	761a      	strb	r2, [r3, #24]
      break;
 80081ec:	e005      	b.n	80081fa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d102      	bne.n	80081fa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	709a      	strb	r2, [r3, #2]
      break;
 80081fa:	bf00      	nop
  }
  return status;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008214:	2300      	movs	r3, #0
 8008216:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7e1b      	ldrb	r3, [r3, #24]
 800821c:	3b01      	subs	r3, #1
 800821e:	2b0a      	cmp	r3, #10
 8008220:	f200 8156 	bhi.w	80084d0 <USBH_HandleControl+0x2c8>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBH_HandleControl+0x24>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	08008259 	.word	0x08008259
 8008230:	08008273 	.word	0x08008273
 8008234:	080082dd 	.word	0x080082dd
 8008238:	08008303 	.word	0x08008303
 800823c:	0800833b 	.word	0x0800833b
 8008240:	08008365 	.word	0x08008365
 8008244:	080083b7 	.word	0x080083b7
 8008248:	080083d9 	.word	0x080083d9
 800824c:	08008415 	.word	0x08008415
 8008250:	0800843b 	.word	0x0800843b
 8008254:	08008479 	.word	0x08008479
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 0110 	add.w	r1, r3, #16
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	795b      	ldrb	r3, [r3, #5]
 8008262:	461a      	mov	r2, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f943 	bl	80084f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	761a      	strb	r2, [r3, #24]
      break;
 8008270:	e139      	b.n	80084e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fcc5 	bl	8008c08 <USBH_LL_GetURBState>
 800827e:	4603      	mov	r3, r0
 8008280:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d11e      	bne.n	80082c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7c1b      	ldrb	r3, [r3, #16]
 800828c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008290:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8adb      	ldrh	r3, [r3, #22]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800829a:	7b7b      	ldrb	r3, [r7, #13]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d103      	bne.n	80082a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2203      	movs	r2, #3
 80082a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082a6:	e115      	b.n	80084d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2205      	movs	r2, #5
 80082ac:	761a      	strb	r2, [r3, #24]
      break;
 80082ae:	e111      	b.n	80084d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082b0:	7b7b      	ldrb	r3, [r7, #13]
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d103      	bne.n	80082be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2209      	movs	r2, #9
 80082ba:	761a      	strb	r2, [r3, #24]
      break;
 80082bc:	e10a      	b.n	80084d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2207      	movs	r2, #7
 80082c2:	761a      	strb	r2, [r3, #24]
      break;
 80082c4:	e106      	b.n	80084d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d003      	beq.n	80082d4 <USBH_HandleControl+0xcc>
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	f040 8100 	bne.w	80084d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220b      	movs	r2, #11
 80082d8:	761a      	strb	r2, [r3, #24]
      break;
 80082da:	e0fb      	b.n	80084d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6899      	ldr	r1, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	899a      	ldrh	r2, [r3, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f93a 	bl	800856e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2204      	movs	r2, #4
 80082fe:	761a      	strb	r2, [r3, #24]
      break;
 8008300:	e0f1      	b.n	80084e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	791b      	ldrb	r3, [r3, #4]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc7d 	bl	8008c08 <USBH_LL_GetURBState>
 800830e:	4603      	mov	r3, r0
 8008310:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d102      	bne.n	800831e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2209      	movs	r2, #9
 800831c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b05      	cmp	r3, #5
 8008322:	d102      	bne.n	800832a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008324:	2303      	movs	r3, #3
 8008326:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008328:	e0d6      	b.n	80084d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b04      	cmp	r3, #4
 800832e:	f040 80d3 	bne.w	80084d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220b      	movs	r2, #11
 8008336:	761a      	strb	r2, [r3, #24]
      break;
 8008338:	e0ce      	b.n	80084d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6899      	ldr	r1, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	899a      	ldrh	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	795b      	ldrb	r3, [r3, #5]
 8008346:	2001      	movs	r0, #1
 8008348:	9000      	str	r0, [sp, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8ea 	bl	8008524 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2206      	movs	r2, #6
 8008360:	761a      	strb	r2, [r3, #24]
      break;
 8008362:	e0c0      	b.n	80084e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	795b      	ldrb	r3, [r3, #5]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc4c 	bl	8008c08 <USBH_LL_GetURBState>
 8008370:	4603      	mov	r3, r0
 8008372:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d103      	bne.n	8008382 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2207      	movs	r2, #7
 800837e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008380:	e0ac      	b.n	80084dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b05      	cmp	r3, #5
 8008386:	d105      	bne.n	8008394 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	220c      	movs	r2, #12
 800838c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800838e:	2303      	movs	r3, #3
 8008390:	73fb      	strb	r3, [r7, #15]
      break;
 8008392:	e0a3      	b.n	80084dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d103      	bne.n	80083a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2205      	movs	r2, #5
 800839e:	761a      	strb	r2, [r3, #24]
      break;
 80083a0:	e09c      	b.n	80084dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	f040 8099 	bne.w	80084dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	220b      	movs	r2, #11
 80083ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083b0:	2302      	movs	r3, #2
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	e092      	b.n	80084dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	791b      	ldrb	r3, [r3, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8d5 	bl	800856e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2208      	movs	r2, #8
 80083d4:	761a      	strb	r2, [r3, #24]

      break;
 80083d6:	e086      	b.n	80084e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	791b      	ldrb	r3, [r3, #4]
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fc12 	bl	8008c08 <USBH_LL_GetURBState>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d105      	bne.n	80083fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220d      	movs	r2, #13
 80083f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083f8:	e072      	b.n	80084e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d103      	bne.n	8008408 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	220b      	movs	r2, #11
 8008404:	761a      	strb	r2, [r3, #24]
      break;
 8008406:	e06b      	b.n	80084e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b05      	cmp	r3, #5
 800840c:	d168      	bne.n	80084e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800840e:	2303      	movs	r3, #3
 8008410:	73fb      	strb	r3, [r7, #15]
      break;
 8008412:	e065      	b.n	80084e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	795b      	ldrb	r3, [r3, #5]
 8008418:	2201      	movs	r2, #1
 800841a:	9200      	str	r2, [sp, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f87f 	bl	8008524 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800842c:	b29a      	uxth	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	220a      	movs	r2, #10
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e055      	b.n	80084e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	795b      	ldrb	r3, [r3, #5]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fbe1 	bl	8008c08 <USBH_LL_GetURBState>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d105      	bne.n	800845c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220d      	movs	r2, #13
 8008458:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800845a:	e043      	b.n	80084e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d103      	bne.n	800846a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2209      	movs	r2, #9
 8008466:	761a      	strb	r2, [r3, #24]
      break;
 8008468:	e03c      	b.n	80084e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b04      	cmp	r3, #4
 800846e:	d139      	bne.n	80084e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	220b      	movs	r2, #11
 8008474:	761a      	strb	r2, [r3, #24]
      break;
 8008476:	e035      	b.n	80084e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7e5b      	ldrb	r3, [r3, #25]
 800847c:	3301      	adds	r3, #1
 800847e:	b2da      	uxtb	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	765a      	strb	r2, [r3, #25]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7e5b      	ldrb	r3, [r3, #25]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d806      	bhi.n	800849a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008498:	e025      	b.n	80084e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084a0:	2106      	movs	r1, #6
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	795b      	ldrb	r3, [r3, #5]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f90c 	bl	80086d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	791b      	ldrb	r3, [r3, #4]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f906 	bl	80086d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084ca:	2302      	movs	r3, #2
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	e00a      	b.n	80084e6 <USBH_HandleControl+0x2de>

    default:
      break;
 80084d0:	bf00      	nop
 80084d2:	e008      	b.n	80084e6 <USBH_HandleControl+0x2de>
      break;
 80084d4:	bf00      	nop
 80084d6:	e006      	b.n	80084e6 <USBH_HandleControl+0x2de>
      break;
 80084d8:	bf00      	nop
 80084da:	e004      	b.n	80084e6 <USBH_HandleControl+0x2de>
      break;
 80084dc:	bf00      	nop
 80084de:	e002      	b.n	80084e6 <USBH_HandleControl+0x2de>
      break;
 80084e0:	bf00      	nop
 80084e2:	e000      	b.n	80084e6 <USBH_HandleControl+0x2de>
      break;
 80084e4:	bf00      	nop
  }

  return status;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084fe:	79f9      	ldrb	r1, [r7, #7]
 8008500:	2300      	movs	r3, #0
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	2308      	movs	r3, #8
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2300      	movs	r3, #0
 8008512:	2200      	movs	r2, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fb46 	bl	8008ba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af04      	add	r7, sp, #16
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4611      	mov	r1, r2
 8008530:	461a      	mov	r2, r3
 8008532:	460b      	mov	r3, r1
 8008534:	80fb      	strh	r3, [r7, #6]
 8008536:	4613      	mov	r3, r2
 8008538:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008548:	7979      	ldrb	r1, [r7, #5]
 800854a:	7e3b      	ldrb	r3, [r7, #24]
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	2301      	movs	r3, #1
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fb21 	bl	8008ba6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b088      	sub	sp, #32
 8008572:	af04      	add	r7, sp, #16
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	460b      	mov	r3, r1
 800857e:	80fb      	strh	r3, [r7, #6]
 8008580:	4613      	mov	r3, r2
 8008582:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008584:	7979      	ldrb	r1, [r7, #5]
 8008586:	2300      	movs	r3, #0
 8008588:	9303      	str	r3, [sp, #12]
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	2301      	movs	r3, #1
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	2201      	movs	r2, #1
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fb03 	bl	8008ba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085a0:	2300      	movs	r3, #0

}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af04      	add	r7, sp, #16
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	4611      	mov	r1, r2
 80085b6:	461a      	mov	r2, r3
 80085b8:	460b      	mov	r3, r1
 80085ba:	80fb      	strh	r3, [r7, #6]
 80085bc:	4613      	mov	r3, r2
 80085be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ce:	7979      	ldrb	r1, [r7, #5]
 80085d0:	7e3b      	ldrb	r3, [r7, #24]
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	2301      	movs	r3, #1
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2302      	movs	r3, #2
 80085e2:	2200      	movs	r2, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fade 	bl	8008ba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	460b      	mov	r3, r1
 8008604:	80fb      	strh	r3, [r7, #6]
 8008606:	4613      	mov	r3, r2
 8008608:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800860a:	7979      	ldrb	r1, [r7, #5]
 800860c:	2300      	movs	r3, #0
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	2301      	movs	r3, #1
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2302      	movs	r3, #2
 800861e:	2201      	movs	r2, #1
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 fac0 	bl	8008ba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af04      	add	r7, sp, #16
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	461a      	mov	r2, r3
 800863e:	4603      	mov	r3, r0
 8008640:	70fb      	strb	r3, [r7, #3]
 8008642:	460b      	mov	r3, r1
 8008644:	70bb      	strb	r3, [r7, #2]
 8008646:	4613      	mov	r3, r2
 8008648:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800864a:	7878      	ldrb	r0, [r7, #1]
 800864c:	78ba      	ldrb	r2, [r7, #2]
 800864e:	78f9      	ldrb	r1, [r7, #3]
 8008650:	8b3b      	ldrh	r3, [r7, #24]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	7d3b      	ldrb	r3, [r7, #20]
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	7c3b      	ldrb	r3, [r7, #16]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4603      	mov	r3, r0
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa53 	bl	8008b0a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa72 	bl	8008b68 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f836 	bl	800870c <USBH_GetFreePipe>
 80086a0:	4603      	mov	r3, r0
 80086a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00a      	beq.n	80086c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	33e0      	adds	r3, #224	; 0xe0
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	b2db      	uxtb	r3, r3
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	2b0f      	cmp	r3, #15
 80086e0:	d80d      	bhi.n	80086fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	33e0      	adds	r3, #224	; 0xe0
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	33e0      	adds	r3, #224	; 0xe0
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e00f      	b.n	800873e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	33e0      	adds	r3, #224	; 0xe0
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	b29b      	uxth	r3, r3
 8008736:	e007      	b.n	8008748 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	3301      	adds	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b0f      	cmp	r3, #15
 8008742:	d9ec      	bls.n	800871e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008744:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008758:	2201      	movs	r2, #1
 800875a:	490e      	ldr	r1, [pc, #56]	; (8008794 <MX_USB_HOST_Init+0x40>)
 800875c:	480e      	ldr	r0, [pc, #56]	; (8008798 <MX_USB_HOST_Init+0x44>)
 800875e:	f7fe fba7 	bl	8006eb0 <USBH_Init>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008768:	f7f8 fbae 	bl	8000ec8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800876c:	490b      	ldr	r1, [pc, #44]	; (800879c <MX_USB_HOST_Init+0x48>)
 800876e:	480a      	ldr	r0, [pc, #40]	; (8008798 <MX_USB_HOST_Init+0x44>)
 8008770:	f7fe fc2c 	bl	8006fcc <USBH_RegisterClass>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800877a:	f7f8 fba5 	bl	8000ec8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800877e:	4806      	ldr	r0, [pc, #24]	; (8008798 <MX_USB_HOST_Init+0x44>)
 8008780:	f7fe fcb0 	bl	80070e4 <USBH_Start>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800878a:	f7f8 fb9d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	080087b5 	.word	0x080087b5
 8008798:	200001f0 	.word	0x200001f0
 800879c:	2000000c 	.word	0x2000000c

080087a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087a4:	4802      	ldr	r0, [pc, #8]	; (80087b0 <MX_USB_HOST_Process+0x10>)
 80087a6:	f7fe fcad 	bl	8007104 <USBH_Process>
}
 80087aa:	bf00      	nop
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200001f0 	.word	0x200001f0

080087b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d819      	bhi.n	80087fc <USBH_UserProcess+0x48>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <USBH_UserProcess+0x1c>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087fd 	.word	0x080087fd
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	080087f5 	.word	0x080087f5
 80087e0:	080087e5 	.word	0x080087e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <USBH_UserProcess+0x58>)
 80087e6:	2203      	movs	r2, #3
 80087e8:	701a      	strb	r2, [r3, #0]
  break;
 80087ea:	e008      	b.n	80087fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <USBH_UserProcess+0x58>)
 80087ee:	2202      	movs	r2, #2
 80087f0:	701a      	strb	r2, [r3, #0]
  break;
 80087f2:	e004      	b.n	80087fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <USBH_UserProcess+0x58>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	701a      	strb	r2, [r3, #0]
  break;
 80087fa:	e000      	b.n	80087fe <USBH_UserProcess+0x4a>

  default:
  break;
 80087fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	200005c8 	.word	0x200005c8

08008810 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	605a      	str	r2, [r3, #4]
 8008822:	609a      	str	r2, [r3, #8]
 8008824:	60da      	str	r2, [r3, #12]
 8008826:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008830:	d147      	bne.n	80088c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	4a24      	ldr	r2, [pc, #144]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 800883c:	f043 0301 	orr.w	r3, r3, #1
 8008840:	6313      	str	r3, [r2, #48]	; 0x30
 8008842:	4b22      	ldr	r3, [pc, #136]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800884e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008854:	2300      	movs	r3, #0
 8008856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008858:	2300      	movs	r3, #0
 800885a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	4619      	mov	r1, r3
 8008862:	481b      	ldr	r0, [pc, #108]	; (80088d0 <HAL_HCD_MspInit+0xc0>)
 8008864:	f7f8 ff04 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008868:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800886c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800886e:	2302      	movs	r3, #2
 8008870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008872:	2300      	movs	r3, #0
 8008874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008876:	2300      	movs	r3, #0
 8008878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800887a:	230a      	movs	r3, #10
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800887e:	f107 0314 	add.w	r3, r7, #20
 8008882:	4619      	mov	r1, r3
 8008884:	4812      	ldr	r0, [pc, #72]	; (80088d0 <HAL_HCD_MspInit+0xc0>)
 8008886:	f7f8 fef3 	bl	8001670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800888a:	4b10      	ldr	r3, [pc, #64]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 800888c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888e:	4a0f      	ldr	r2, [pc, #60]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 8008890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008894:	6353      	str	r3, [r2, #52]	; 0x34
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 80088a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088a4:	6453      	str	r3, [r2, #68]	; 0x44
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <HAL_HCD_MspInit+0xbc>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088b2:	2200      	movs	r2, #0
 80088b4:	2100      	movs	r1, #0
 80088b6:	2043      	movs	r0, #67	; 0x43
 80088b8:	f7f8 fea3 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088bc:	2043      	movs	r0, #67	; 0x43
 80088be:	f7f8 febc 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088c2:	bf00      	nop
 80088c4:	3728      	adds	r7, #40	; 0x28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40020000 	.word	0x40020000

080088d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe ffed 	bl	80078c2 <USBH_LL_IncTimer>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f825 	bl	800794e <USBH_LL_Connect>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff f82e 	bl	800797c <USBH_LL_Disconnect>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
 8008934:	4613      	mov	r3, r2
 8008936:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe ffdf 	bl	8007916 <USBH_LL_PortEnabled>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ffdf 	bl	8007932 <USBH_LL_PortDisabled>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800898a:	2b01      	cmp	r3, #1
 800898c:	d12a      	bne.n	80089e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800898e:	4a18      	ldr	r2, [pc, #96]	; (80089f0 <USBH_LL_Init+0x74>)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a15      	ldr	r2, [pc, #84]	; (80089f0 <USBH_LL_Init+0x74>)
 800899a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800899e:	4b14      	ldr	r3, [pc, #80]	; (80089f0 <USBH_LL_Init+0x74>)
 80089a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089a6:	4b12      	ldr	r3, [pc, #72]	; (80089f0 <USBH_LL_Init+0x74>)
 80089a8:	2208      	movs	r2, #8
 80089aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089ac:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <USBH_LL_Init+0x74>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <USBH_LL_Init+0x74>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <USBH_LL_Init+0x74>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <USBH_LL_Init+0x74>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089c4:	480a      	ldr	r0, [pc, #40]	; (80089f0 <USBH_LL_Init+0x74>)
 80089c6:	f7f9 f808 	bl	80019da <HAL_HCD_Init>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089d0:	f7f8 fa7a 	bl	8000ec8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089d4:	4806      	ldr	r0, [pc, #24]	; (80089f0 <USBH_LL_Init+0x74>)
 80089d6:	f7f9 fbec 	bl	80021b2 <HAL_HCD_GetCurrentFrame>
 80089da:	4603      	mov	r3, r0
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fe ff60 	bl	80078a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200005cc 	.word	0x200005cc

080089f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f9 fb5b 	bl	80020c6 <HAL_HCD_Start>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f95c 	bl	8008cd4 <USBH_Get_USB_Status>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f9 fb63 	bl	800210c <HAL_HCD_Stop>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f941 	bl	8008cd4 <USBH_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f9 fbab 	bl	80021ce <HAL_HCD_GetCurrentSpeed>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d00c      	beq.n	8008a98 <USBH_LL_GetSpeed+0x38>
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d80d      	bhi.n	8008a9e <USBH_LL_GetSpeed+0x3e>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <USBH_LL_GetSpeed+0x2c>
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d003      	beq.n	8008a92 <USBH_LL_GetSpeed+0x32>
 8008a8a:	e008      	b.n	8008a9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e008      	b.n	8008aa4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a92:	2301      	movs	r3, #1
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	e005      	b.n	8008aa4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e002      	b.n	8008aa4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	bf00      	nop
  }
  return  speed;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f9 fb3e 	bl	8002146 <HAL_HCD_ResetPort>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f8ff 	bl	8008cd4 <USBH_Get_USB_Status>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f9 fb45 	bl	800218a <HAL_HCD_HC_GetXferCount>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b0a:	b590      	push	{r4, r7, lr}
 8008b0c:	b089      	sub	sp, #36	; 0x24
 8008b0e:	af04      	add	r7, sp, #16
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	70fb      	strb	r3, [r7, #3]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70bb      	strb	r3, [r7, #2]
 8008b20:	4613      	mov	r3, r2
 8008b22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b32:	787c      	ldrb	r4, [r7, #1]
 8008b34:	78ba      	ldrb	r2, [r7, #2]
 8008b36:	78f9      	ldrb	r1, [r7, #3]
 8008b38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4623      	mov	r3, r4
 8008b4a:	f7f8 ffa8 	bl	8001a9e <HAL_HCD_HC_Init>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f8bd 	bl	8008cd4 <USBH_Get_USB_Status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd90      	pop	{r4, r7, pc}

08008b68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7f9 f818 	bl	8001bbc <HAL_HCD_HC_Halt>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f89e 	bl	8008cd4 <USBH_Get_USB_Status>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ba6:	b590      	push	{r4, r7, lr}
 8008ba8:	b089      	sub	sp, #36	; 0x24
 8008baa:	af04      	add	r7, sp, #16
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	70fb      	strb	r3, [r7, #3]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70bb      	strb	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bce:	787c      	ldrb	r4, [r7, #1]
 8008bd0:	78ba      	ldrb	r2, [r7, #2]
 8008bd2:	78f9      	ldrb	r1, [r7, #3]
 8008bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bdc:	9302      	str	r3, [sp, #8]
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4623      	mov	r3, r4
 8008bea:	f7f9 f80b 	bl	8001c04 <HAL_HCD_HC_SubmitRequest>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 f86d 	bl	8008cd4 <USBH_Get_USB_Status>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}

08008c08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f9 fa9f 	bl	8002162 <HAL_HCD_HC_GetURBState>
 8008c24:	4603      	mov	r3, r0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d103      	bne.n	8008c4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f870 	bl	8008d2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c4c:	20c8      	movs	r0, #200	; 0xc8
 8008c4e:	f7f8 fbd9 	bl	8001404 <HAL_Delay>
  return USBH_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	212c      	movs	r1, #44	; 0x2c
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	333b      	adds	r3, #59	; 0x3b
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	212c      	movs	r1, #44	; 0x2c
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	3354      	adds	r3, #84	; 0x54
 8008c96:	78ba      	ldrb	r2, [r7, #2]
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	e008      	b.n	8008cae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	212c      	movs	r1, #44	; 0x2c
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3355      	adds	r3, #85	; 0x55
 8008caa:	78ba      	ldrb	r2, [r7, #2]
 8008cac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7f8 fb9d 	bl	8001404 <HAL_Delay>
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d817      	bhi.n	8008d18 <USBH_Get_USB_Status+0x44>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <USBH_Get_USB_Status+0x1c>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d07 	.word	0x08008d07
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d13 	.word	0x08008d13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
    break;
 8008d04:	e00b      	b.n	8008d1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0a:	e008      	b.n	8008d1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	e005      	b.n	8008d1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d12:	2302      	movs	r3, #2
 8008d14:	73fb      	strb	r3, [r7, #15]
    break;
 8008d16:	e002      	b.n	8008d1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1c:	bf00      	nop
  }
  return usb_status;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e001      	b.n	8008d4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d46:	2301      	movs	r3, #1
 8008d48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4803      	ldr	r0, [pc, #12]	; (8008d60 <MX_DriverVbusFS+0x34>)
 8008d52:	f7f8 fe29 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40020800 	.word	0x40020800

08008d64 <__errno>:
 8008d64:	4b01      	ldr	r3, [pc, #4]	; (8008d6c <__errno+0x8>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	2000002c 	.word	0x2000002c

08008d70 <__libc_init_array>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4d0d      	ldr	r5, [pc, #52]	; (8008da8 <__libc_init_array+0x38>)
 8008d74:	4c0d      	ldr	r4, [pc, #52]	; (8008dac <__libc_init_array+0x3c>)
 8008d76:	1b64      	subs	r4, r4, r5
 8008d78:	10a4      	asrs	r4, r4, #2
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	42a6      	cmp	r6, r4
 8008d7e:	d109      	bne.n	8008d94 <__libc_init_array+0x24>
 8008d80:	4d0b      	ldr	r5, [pc, #44]	; (8008db0 <__libc_init_array+0x40>)
 8008d82:	4c0c      	ldr	r4, [pc, #48]	; (8008db4 <__libc_init_array+0x44>)
 8008d84:	f000 fcb2 	bl	80096ec <_init>
 8008d88:	1b64      	subs	r4, r4, r5
 8008d8a:	10a4      	asrs	r4, r4, #2
 8008d8c:	2600      	movs	r6, #0
 8008d8e:	42a6      	cmp	r6, r4
 8008d90:	d105      	bne.n	8008d9e <__libc_init_array+0x2e>
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d98:	4798      	blx	r3
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7ee      	b.n	8008d7c <__libc_init_array+0xc>
 8008d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da2:	4798      	blx	r3
 8008da4:	3601      	adds	r6, #1
 8008da6:	e7f2      	b.n	8008d8e <__libc_init_array+0x1e>
 8008da8:	0800977c 	.word	0x0800977c
 8008dac:	0800977c 	.word	0x0800977c
 8008db0:	0800977c 	.word	0x0800977c
 8008db4:	08009780 	.word	0x08009780

08008db8 <malloc>:
 8008db8:	4b02      	ldr	r3, [pc, #8]	; (8008dc4 <malloc+0xc>)
 8008dba:	4601      	mov	r1, r0
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	f000 b88d 	b.w	8008edc <_malloc_r>
 8008dc2:	bf00      	nop
 8008dc4:	2000002c 	.word	0x2000002c

08008dc8 <free>:
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <free+0xc>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	f000 b819 	b.w	8008e04 <_free_r>
 8008dd2:	bf00      	nop
 8008dd4:	2000002c 	.word	0x2000002c

08008dd8 <memcpy>:
 8008dd8:	440a      	add	r2, r1
 8008dda:	4291      	cmp	r1, r2
 8008ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008de0:	d100      	bne.n	8008de4 <memcpy+0xc>
 8008de2:	4770      	bx	lr
 8008de4:	b510      	push	{r4, lr}
 8008de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dee:	4291      	cmp	r1, r2
 8008df0:	d1f9      	bne.n	8008de6 <memcpy+0xe>
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <memset>:
 8008df4:	4402      	add	r2, r0
 8008df6:	4603      	mov	r3, r0
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d100      	bne.n	8008dfe <memset+0xa>
 8008dfc:	4770      	bx	lr
 8008dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008e02:	e7f9      	b.n	8008df8 <memset+0x4>

08008e04 <_free_r>:
 8008e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e06:	2900      	cmp	r1, #0
 8008e08:	d044      	beq.n	8008e94 <_free_r+0x90>
 8008e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0e:	9001      	str	r0, [sp, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f1a1 0404 	sub.w	r4, r1, #4
 8008e16:	bfb8      	it	lt
 8008e18:	18e4      	addlt	r4, r4, r3
 8008e1a:	f000 f917 	bl	800904c <__malloc_lock>
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <_free_r+0x94>)
 8008e20:	9801      	ldr	r0, [sp, #4]
 8008e22:	6813      	ldr	r3, [r2, #0]
 8008e24:	b933      	cbnz	r3, 8008e34 <_free_r+0x30>
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	6014      	str	r4, [r2, #0]
 8008e2a:	b003      	add	sp, #12
 8008e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e30:	f000 b912 	b.w	8009058 <__malloc_unlock>
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	d908      	bls.n	8008e4a <_free_r+0x46>
 8008e38:	6825      	ldr	r5, [r4, #0]
 8008e3a:	1961      	adds	r1, r4, r5
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	bf01      	itttt	eq
 8008e40:	6819      	ldreq	r1, [r3, #0]
 8008e42:	685b      	ldreq	r3, [r3, #4]
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	e7ed      	b.n	8008e26 <_free_r+0x22>
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b10b      	cbz	r3, 8008e54 <_free_r+0x50>
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d9fa      	bls.n	8008e4a <_free_r+0x46>
 8008e54:	6811      	ldr	r1, [r2, #0]
 8008e56:	1855      	adds	r5, r2, r1
 8008e58:	42a5      	cmp	r5, r4
 8008e5a:	d10b      	bne.n	8008e74 <_free_r+0x70>
 8008e5c:	6824      	ldr	r4, [r4, #0]
 8008e5e:	4421      	add	r1, r4
 8008e60:	1854      	adds	r4, r2, r1
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	d1e0      	bne.n	8008e2a <_free_r+0x26>
 8008e68:	681c      	ldr	r4, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	6053      	str	r3, [r2, #4]
 8008e6e:	4421      	add	r1, r4
 8008e70:	6011      	str	r1, [r2, #0]
 8008e72:	e7da      	b.n	8008e2a <_free_r+0x26>
 8008e74:	d902      	bls.n	8008e7c <_free_r+0x78>
 8008e76:	230c      	movs	r3, #12
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	e7d6      	b.n	8008e2a <_free_r+0x26>
 8008e7c:	6825      	ldr	r5, [r4, #0]
 8008e7e:	1961      	adds	r1, r4, r5
 8008e80:	428b      	cmp	r3, r1
 8008e82:	bf04      	itt	eq
 8008e84:	6819      	ldreq	r1, [r3, #0]
 8008e86:	685b      	ldreq	r3, [r3, #4]
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	bf04      	itt	eq
 8008e8c:	1949      	addeq	r1, r1, r5
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	6054      	str	r4, [r2, #4]
 8008e92:	e7ca      	b.n	8008e2a <_free_r+0x26>
 8008e94:	b003      	add	sp, #12
 8008e96:	bd30      	pop	{r4, r5, pc}
 8008e98:	200008d0 	.word	0x200008d0

08008e9c <sbrk_aligned>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	4e0e      	ldr	r6, [pc, #56]	; (8008ed8 <sbrk_aligned+0x3c>)
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	6831      	ldr	r1, [r6, #0]
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	b911      	cbnz	r1, 8008eae <sbrk_aligned+0x12>
 8008ea8:	f000 f88c 	bl	8008fc4 <_sbrk_r>
 8008eac:	6030      	str	r0, [r6, #0]
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f887 	bl	8008fc4 <_sbrk_r>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d00a      	beq.n	8008ed0 <sbrk_aligned+0x34>
 8008eba:	1cc4      	adds	r4, r0, #3
 8008ebc:	f024 0403 	bic.w	r4, r4, #3
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d007      	beq.n	8008ed4 <sbrk_aligned+0x38>
 8008ec4:	1a21      	subs	r1, r4, r0
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f87c 	bl	8008fc4 <_sbrk_r>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d101      	bne.n	8008ed4 <sbrk_aligned+0x38>
 8008ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	200008d4 	.word	0x200008d4

08008edc <_malloc_r>:
 8008edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee0:	1ccd      	adds	r5, r1, #3
 8008ee2:	f025 0503 	bic.w	r5, r5, #3
 8008ee6:	3508      	adds	r5, #8
 8008ee8:	2d0c      	cmp	r5, #12
 8008eea:	bf38      	it	cc
 8008eec:	250c      	movcc	r5, #12
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	db01      	blt.n	8008ef8 <_malloc_r+0x1c>
 8008ef4:	42a9      	cmp	r1, r5
 8008ef6:	d905      	bls.n	8008f04 <_malloc_r+0x28>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	2600      	movs	r6, #0
 8008efe:	4630      	mov	r0, r6
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	4e2e      	ldr	r6, [pc, #184]	; (8008fc0 <_malloc_r+0xe4>)
 8008f06:	f000 f8a1 	bl	800904c <__malloc_lock>
 8008f0a:	6833      	ldr	r3, [r6, #0]
 8008f0c:	461c      	mov	r4, r3
 8008f0e:	bb34      	cbnz	r4, 8008f5e <_malloc_r+0x82>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4638      	mov	r0, r7
 8008f14:	f7ff ffc2 	bl	8008e9c <sbrk_aligned>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	d14d      	bne.n	8008fba <_malloc_r+0xde>
 8008f1e:	6834      	ldr	r4, [r6, #0]
 8008f20:	4626      	mov	r6, r4
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d140      	bne.n	8008fa8 <_malloc_r+0xcc>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	eb04 0803 	add.w	r8, r4, r3
 8008f30:	f000 f848 	bl	8008fc4 <_sbrk_r>
 8008f34:	4580      	cmp	r8, r0
 8008f36:	d13a      	bne.n	8008fae <_malloc_r+0xd2>
 8008f38:	6821      	ldr	r1, [r4, #0]
 8008f3a:	3503      	adds	r5, #3
 8008f3c:	1a6d      	subs	r5, r5, r1
 8008f3e:	f025 0503 	bic.w	r5, r5, #3
 8008f42:	3508      	adds	r5, #8
 8008f44:	2d0c      	cmp	r5, #12
 8008f46:	bf38      	it	cc
 8008f48:	250c      	movcc	r5, #12
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff ffa5 	bl	8008e9c <sbrk_aligned>
 8008f52:	3001      	adds	r0, #1
 8008f54:	d02b      	beq.n	8008fae <_malloc_r+0xd2>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	442b      	add	r3, r5
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	e00e      	b.n	8008f7c <_malloc_r+0xa0>
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	1b52      	subs	r2, r2, r5
 8008f62:	d41e      	bmi.n	8008fa2 <_malloc_r+0xc6>
 8008f64:	2a0b      	cmp	r2, #11
 8008f66:	d916      	bls.n	8008f96 <_malloc_r+0xba>
 8008f68:	1961      	adds	r1, r4, r5
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6025      	str	r5, [r4, #0]
 8008f6e:	bf18      	it	ne
 8008f70:	6059      	strne	r1, [r3, #4]
 8008f72:	6863      	ldr	r3, [r4, #4]
 8008f74:	bf08      	it	eq
 8008f76:	6031      	streq	r1, [r6, #0]
 8008f78:	5162      	str	r2, [r4, r5]
 8008f7a:	604b      	str	r3, [r1, #4]
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f104 060b 	add.w	r6, r4, #11
 8008f82:	f000 f869 	bl	8009058 <__malloc_unlock>
 8008f86:	f026 0607 	bic.w	r6, r6, #7
 8008f8a:	1d23      	adds	r3, r4, #4
 8008f8c:	1af2      	subs	r2, r6, r3
 8008f8e:	d0b6      	beq.n	8008efe <_malloc_r+0x22>
 8008f90:	1b9b      	subs	r3, r3, r6
 8008f92:	50a3      	str	r3, [r4, r2]
 8008f94:	e7b3      	b.n	8008efe <_malloc_r+0x22>
 8008f96:	6862      	ldr	r2, [r4, #4]
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	bf0c      	ite	eq
 8008f9c:	6032      	streq	r2, [r6, #0]
 8008f9e:	605a      	strne	r2, [r3, #4]
 8008fa0:	e7ec      	b.n	8008f7c <_malloc_r+0xa0>
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	6864      	ldr	r4, [r4, #4]
 8008fa6:	e7b2      	b.n	8008f0e <_malloc_r+0x32>
 8008fa8:	4634      	mov	r4, r6
 8008faa:	6876      	ldr	r6, [r6, #4]
 8008fac:	e7b9      	b.n	8008f22 <_malloc_r+0x46>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	603b      	str	r3, [r7, #0]
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f000 f850 	bl	8009058 <__malloc_unlock>
 8008fb8:	e7a1      	b.n	8008efe <_malloc_r+0x22>
 8008fba:	6025      	str	r5, [r4, #0]
 8008fbc:	e7de      	b.n	8008f7c <_malloc_r+0xa0>
 8008fbe:	bf00      	nop
 8008fc0:	200008d0 	.word	0x200008d0

08008fc4 <_sbrk_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d06      	ldr	r5, [pc, #24]	; (8008fe0 <_sbrk_r+0x1c>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	f7f8 f934 	bl	800123c <_sbrk>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_sbrk_r+0x1a>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_sbrk_r+0x1a>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	200008d8 	.word	0x200008d8

08008fe4 <sniprintf>:
 8008fe4:	b40c      	push	{r2, r3}
 8008fe6:	b530      	push	{r4, r5, lr}
 8008fe8:	4b17      	ldr	r3, [pc, #92]	; (8009048 <sniprintf+0x64>)
 8008fea:	1e0c      	subs	r4, r1, #0
 8008fec:	681d      	ldr	r5, [r3, #0]
 8008fee:	b09d      	sub	sp, #116	; 0x74
 8008ff0:	da08      	bge.n	8009004 <sniprintf+0x20>
 8008ff2:	238b      	movs	r3, #139	; 0x8b
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffa:	b01d      	add	sp, #116	; 0x74
 8008ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009000:	b002      	add	sp, #8
 8009002:	4770      	bx	lr
 8009004:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009008:	f8ad 3014 	strh.w	r3, [sp, #20]
 800900c:	bf14      	ite	ne
 800900e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009012:	4623      	moveq	r3, r4
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800901c:	9002      	str	r0, [sp, #8]
 800901e:	9006      	str	r0, [sp, #24]
 8009020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009026:	ab21      	add	r3, sp, #132	; 0x84
 8009028:	a902      	add	r1, sp, #8
 800902a:	4628      	mov	r0, r5
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	f000 f875 	bl	800911c <_svfiprintf_r>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	bfbc      	itt	lt
 8009036:	238b      	movlt	r3, #139	; 0x8b
 8009038:	602b      	strlt	r3, [r5, #0]
 800903a:	2c00      	cmp	r4, #0
 800903c:	d0dd      	beq.n	8008ffa <sniprintf+0x16>
 800903e:	9b02      	ldr	r3, [sp, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
 8009044:	e7d9      	b.n	8008ffa <sniprintf+0x16>
 8009046:	bf00      	nop
 8009048:	2000002c 	.word	0x2000002c

0800904c <__malloc_lock>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__malloc_lock+0x8>)
 800904e:	f000 baf9 	b.w	8009644 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	200008dc 	.word	0x200008dc

08009058 <__malloc_unlock>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__malloc_unlock+0x8>)
 800905a:	f000 baf4 	b.w	8009646 <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	200008dc 	.word	0x200008dc

08009064 <__ssputs_r>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	688e      	ldr	r6, [r1, #8]
 800906a:	429e      	cmp	r6, r3
 800906c:	4682      	mov	sl, r0
 800906e:	460c      	mov	r4, r1
 8009070:	4690      	mov	r8, r2
 8009072:	461f      	mov	r7, r3
 8009074:	d838      	bhi.n	80090e8 <__ssputs_r+0x84>
 8009076:	898a      	ldrh	r2, [r1, #12]
 8009078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800907c:	d032      	beq.n	80090e4 <__ssputs_r+0x80>
 800907e:	6825      	ldr	r5, [r4, #0]
 8009080:	6909      	ldr	r1, [r1, #16]
 8009082:	eba5 0901 	sub.w	r9, r5, r1
 8009086:	6965      	ldr	r5, [r4, #20]
 8009088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800908c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009090:	3301      	adds	r3, #1
 8009092:	444b      	add	r3, r9
 8009094:	106d      	asrs	r5, r5, #1
 8009096:	429d      	cmp	r5, r3
 8009098:	bf38      	it	cc
 800909a:	461d      	movcc	r5, r3
 800909c:	0553      	lsls	r3, r2, #21
 800909e:	d531      	bpl.n	8009104 <__ssputs_r+0xa0>
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7ff ff1b 	bl	8008edc <_malloc_r>
 80090a6:	4606      	mov	r6, r0
 80090a8:	b950      	cbnz	r0, 80090c0 <__ssputs_r+0x5c>
 80090aa:	230c      	movs	r3, #12
 80090ac:	f8ca 3000 	str.w	r3, [sl]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	6921      	ldr	r1, [r4, #16]
 80090c2:	464a      	mov	r2, r9
 80090c4:	f7ff fe88 	bl	8008dd8 <memcpy>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	6126      	str	r6, [r4, #16]
 80090d6:	6165      	str	r5, [r4, #20]
 80090d8:	444e      	add	r6, r9
 80090da:	eba5 0509 	sub.w	r5, r5, r9
 80090de:	6026      	str	r6, [r4, #0]
 80090e0:	60a5      	str	r5, [r4, #8]
 80090e2:	463e      	mov	r6, r7
 80090e4:	42be      	cmp	r6, r7
 80090e6:	d900      	bls.n	80090ea <__ssputs_r+0x86>
 80090e8:	463e      	mov	r6, r7
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	4632      	mov	r2, r6
 80090ee:	4641      	mov	r1, r8
 80090f0:	f000 faaa 	bl	8009648 <memmove>
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	1b9b      	subs	r3, r3, r6
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	4433      	add	r3, r6
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	e7db      	b.n	80090bc <__ssputs_r+0x58>
 8009104:	462a      	mov	r2, r5
 8009106:	f000 fab9 	bl	800967c <_realloc_r>
 800910a:	4606      	mov	r6, r0
 800910c:	2800      	cmp	r0, #0
 800910e:	d1e1      	bne.n	80090d4 <__ssputs_r+0x70>
 8009110:	6921      	ldr	r1, [r4, #16]
 8009112:	4650      	mov	r0, sl
 8009114:	f7ff fe76 	bl	8008e04 <_free_r>
 8009118:	e7c7      	b.n	80090aa <__ssputs_r+0x46>
	...

0800911c <_svfiprintf_r>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	4698      	mov	r8, r3
 8009122:	898b      	ldrh	r3, [r1, #12]
 8009124:	061b      	lsls	r3, r3, #24
 8009126:	b09d      	sub	sp, #116	; 0x74
 8009128:	4607      	mov	r7, r0
 800912a:	460d      	mov	r5, r1
 800912c:	4614      	mov	r4, r2
 800912e:	d50e      	bpl.n	800914e <_svfiprintf_r+0x32>
 8009130:	690b      	ldr	r3, [r1, #16]
 8009132:	b963      	cbnz	r3, 800914e <_svfiprintf_r+0x32>
 8009134:	2140      	movs	r1, #64	; 0x40
 8009136:	f7ff fed1 	bl	8008edc <_malloc_r>
 800913a:	6028      	str	r0, [r5, #0]
 800913c:	6128      	str	r0, [r5, #16]
 800913e:	b920      	cbnz	r0, 800914a <_svfiprintf_r+0x2e>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e0d1      	b.n	80092ee <_svfiprintf_r+0x1d2>
 800914a:	2340      	movs	r3, #64	; 0x40
 800914c:	616b      	str	r3, [r5, #20]
 800914e:	2300      	movs	r3, #0
 8009150:	9309      	str	r3, [sp, #36]	; 0x24
 8009152:	2320      	movs	r3, #32
 8009154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009158:	f8cd 800c 	str.w	r8, [sp, #12]
 800915c:	2330      	movs	r3, #48	; 0x30
 800915e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009308 <_svfiprintf_r+0x1ec>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	4623      	mov	r3, r4
 800916c:	469a      	mov	sl, r3
 800916e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009172:	b10a      	cbz	r2, 8009178 <_svfiprintf_r+0x5c>
 8009174:	2a25      	cmp	r2, #37	; 0x25
 8009176:	d1f9      	bne.n	800916c <_svfiprintf_r+0x50>
 8009178:	ebba 0b04 	subs.w	fp, sl, r4
 800917c:	d00b      	beq.n	8009196 <_svfiprintf_r+0x7a>
 800917e:	465b      	mov	r3, fp
 8009180:	4622      	mov	r2, r4
 8009182:	4629      	mov	r1, r5
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff6d 	bl	8009064 <__ssputs_r>
 800918a:	3001      	adds	r0, #1
 800918c:	f000 80aa 	beq.w	80092e4 <_svfiprintf_r+0x1c8>
 8009190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009192:	445a      	add	r2, fp
 8009194:	9209      	str	r2, [sp, #36]	; 0x24
 8009196:	f89a 3000 	ldrb.w	r3, [sl]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 80a2 	beq.w	80092e4 <_svfiprintf_r+0x1c8>
 80091a0:	2300      	movs	r3, #0
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295
 80091a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091aa:	f10a 0a01 	add.w	sl, sl, #1
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b6:	931a      	str	r3, [sp, #104]	; 0x68
 80091b8:	4654      	mov	r4, sl
 80091ba:	2205      	movs	r2, #5
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	4851      	ldr	r0, [pc, #324]	; (8009308 <_svfiprintf_r+0x1ec>)
 80091c2:	f7f7 f805 	bl	80001d0 <memchr>
 80091c6:	9a04      	ldr	r2, [sp, #16]
 80091c8:	b9d8      	cbnz	r0, 8009202 <_svfiprintf_r+0xe6>
 80091ca:	06d0      	lsls	r0, r2, #27
 80091cc:	bf44      	itt	mi
 80091ce:	2320      	movmi	r3, #32
 80091d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d4:	0711      	lsls	r1, r2, #28
 80091d6:	bf44      	itt	mi
 80091d8:	232b      	movmi	r3, #43	; 0x2b
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091de:	f89a 3000 	ldrb.w	r3, [sl]
 80091e2:	2b2a      	cmp	r3, #42	; 0x2a
 80091e4:	d015      	beq.n	8009212 <_svfiprintf_r+0xf6>
 80091e6:	9a07      	ldr	r2, [sp, #28]
 80091e8:	4654      	mov	r4, sl
 80091ea:	2000      	movs	r0, #0
 80091ec:	f04f 0c0a 	mov.w	ip, #10
 80091f0:	4621      	mov	r1, r4
 80091f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f6:	3b30      	subs	r3, #48	; 0x30
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	d94e      	bls.n	800929a <_svfiprintf_r+0x17e>
 80091fc:	b1b0      	cbz	r0, 800922c <_svfiprintf_r+0x110>
 80091fe:	9207      	str	r2, [sp, #28]
 8009200:	e014      	b.n	800922c <_svfiprintf_r+0x110>
 8009202:	eba0 0308 	sub.w	r3, r0, r8
 8009206:	fa09 f303 	lsl.w	r3, r9, r3
 800920a:	4313      	orrs	r3, r2
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	46a2      	mov	sl, r4
 8009210:	e7d2      	b.n	80091b8 <_svfiprintf_r+0x9c>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	9103      	str	r1, [sp, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	bfbb      	ittet	lt
 800921e:	425b      	neglt	r3, r3
 8009220:	f042 0202 	orrlt.w	r2, r2, #2
 8009224:	9307      	strge	r3, [sp, #28]
 8009226:	9307      	strlt	r3, [sp, #28]
 8009228:	bfb8      	it	lt
 800922a:	9204      	strlt	r2, [sp, #16]
 800922c:	7823      	ldrb	r3, [r4, #0]
 800922e:	2b2e      	cmp	r3, #46	; 0x2e
 8009230:	d10c      	bne.n	800924c <_svfiprintf_r+0x130>
 8009232:	7863      	ldrb	r3, [r4, #1]
 8009234:	2b2a      	cmp	r3, #42	; 0x2a
 8009236:	d135      	bne.n	80092a4 <_svfiprintf_r+0x188>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	9203      	str	r2, [sp, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb8      	it	lt
 8009244:	f04f 33ff 	movlt.w	r3, #4294967295
 8009248:	3402      	adds	r4, #2
 800924a:	9305      	str	r3, [sp, #20]
 800924c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009318 <_svfiprintf_r+0x1fc>
 8009250:	7821      	ldrb	r1, [r4, #0]
 8009252:	2203      	movs	r2, #3
 8009254:	4650      	mov	r0, sl
 8009256:	f7f6 ffbb 	bl	80001d0 <memchr>
 800925a:	b140      	cbz	r0, 800926e <_svfiprintf_r+0x152>
 800925c:	2340      	movs	r3, #64	; 0x40
 800925e:	eba0 000a 	sub.w	r0, r0, sl
 8009262:	fa03 f000 	lsl.w	r0, r3, r0
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	4303      	orrs	r3, r0
 800926a:	3401      	adds	r4, #1
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009272:	4826      	ldr	r0, [pc, #152]	; (800930c <_svfiprintf_r+0x1f0>)
 8009274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009278:	2206      	movs	r2, #6
 800927a:	f7f6 ffa9 	bl	80001d0 <memchr>
 800927e:	2800      	cmp	r0, #0
 8009280:	d038      	beq.n	80092f4 <_svfiprintf_r+0x1d8>
 8009282:	4b23      	ldr	r3, [pc, #140]	; (8009310 <_svfiprintf_r+0x1f4>)
 8009284:	bb1b      	cbnz	r3, 80092ce <_svfiprintf_r+0x1b2>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	3307      	adds	r3, #7
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	3308      	adds	r3, #8
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009294:	4433      	add	r3, r6
 8009296:	9309      	str	r3, [sp, #36]	; 0x24
 8009298:	e767      	b.n	800916a <_svfiprintf_r+0x4e>
 800929a:	fb0c 3202 	mla	r2, ip, r2, r3
 800929e:	460c      	mov	r4, r1
 80092a0:	2001      	movs	r0, #1
 80092a2:	e7a5      	b.n	80091f0 <_svfiprintf_r+0xd4>
 80092a4:	2300      	movs	r3, #0
 80092a6:	3401      	adds	r4, #1
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	4619      	mov	r1, r3
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4620      	mov	r0, r4
 80092b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b6:	3a30      	subs	r2, #48	; 0x30
 80092b8:	2a09      	cmp	r2, #9
 80092ba:	d903      	bls.n	80092c4 <_svfiprintf_r+0x1a8>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0c5      	beq.n	800924c <_svfiprintf_r+0x130>
 80092c0:	9105      	str	r1, [sp, #20]
 80092c2:	e7c3      	b.n	800924c <_svfiprintf_r+0x130>
 80092c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c8:	4604      	mov	r4, r0
 80092ca:	2301      	movs	r3, #1
 80092cc:	e7f0      	b.n	80092b0 <_svfiprintf_r+0x194>
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	462a      	mov	r2, r5
 80092d4:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <_svfiprintf_r+0x1f8>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	4638      	mov	r0, r7
 80092da:	f3af 8000 	nop.w
 80092de:	1c42      	adds	r2, r0, #1
 80092e0:	4606      	mov	r6, r0
 80092e2:	d1d6      	bne.n	8009292 <_svfiprintf_r+0x176>
 80092e4:	89ab      	ldrh	r3, [r5, #12]
 80092e6:	065b      	lsls	r3, r3, #25
 80092e8:	f53f af2c 	bmi.w	8009144 <_svfiprintf_r+0x28>
 80092ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ee:	b01d      	add	sp, #116	; 0x74
 80092f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <_svfiprintf_r+0x1f8>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4638      	mov	r0, r7
 8009300:	f000 f87a 	bl	80093f8 <_printf_i>
 8009304:	e7eb      	b.n	80092de <_svfiprintf_r+0x1c2>
 8009306:	bf00      	nop
 8009308:	08009740 	.word	0x08009740
 800930c:	0800974a 	.word	0x0800974a
 8009310:	00000000 	.word	0x00000000
 8009314:	08009065 	.word	0x08009065
 8009318:	08009746 	.word	0x08009746

0800931c <_printf_common>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	4616      	mov	r6, r2
 8009322:	4699      	mov	r9, r3
 8009324:	688a      	ldr	r2, [r1, #8]
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800932c:	4293      	cmp	r3, r2
 800932e:	bfb8      	it	lt
 8009330:	4613      	movlt	r3, r2
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009338:	4607      	mov	r7, r0
 800933a:	460c      	mov	r4, r1
 800933c:	b10a      	cbz	r2, 8009342 <_printf_common+0x26>
 800933e:	3301      	adds	r3, #1
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	6833      	ldrmi	r3, [r6, #0]
 800934a:	3302      	addmi	r3, #2
 800934c:	6033      	strmi	r3, [r6, #0]
 800934e:	6825      	ldr	r5, [r4, #0]
 8009350:	f015 0506 	ands.w	r5, r5, #6
 8009354:	d106      	bne.n	8009364 <_printf_common+0x48>
 8009356:	f104 0a19 	add.w	sl, r4, #25
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	6832      	ldr	r2, [r6, #0]
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc26      	bgt.n	80093b2 <_printf_common+0x96>
 8009364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009368:	1e13      	subs	r3, r2, #0
 800936a:	6822      	ldr	r2, [r4, #0]
 800936c:	bf18      	it	ne
 800936e:	2301      	movne	r3, #1
 8009370:	0692      	lsls	r2, r2, #26
 8009372:	d42b      	bmi.n	80093cc <_printf_common+0xb0>
 8009374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009378:	4649      	mov	r1, r9
 800937a:	4638      	mov	r0, r7
 800937c:	47c0      	blx	r8
 800937e:	3001      	adds	r0, #1
 8009380:	d01e      	beq.n	80093c0 <_printf_common+0xa4>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	68e5      	ldr	r5, [r4, #12]
 8009386:	6832      	ldr	r2, [r6, #0]
 8009388:	f003 0306 	and.w	r3, r3, #6
 800938c:	2b04      	cmp	r3, #4
 800938e:	bf08      	it	eq
 8009390:	1aad      	subeq	r5, r5, r2
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	bf0c      	ite	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	2500      	movne	r5, #0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfc4      	itt	gt
 80093a2:	1a9b      	subgt	r3, r3, r2
 80093a4:	18ed      	addgt	r5, r5, r3
 80093a6:	2600      	movs	r6, #0
 80093a8:	341a      	adds	r4, #26
 80093aa:	42b5      	cmp	r5, r6
 80093ac:	d11a      	bne.n	80093e4 <_printf_common+0xc8>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e008      	b.n	80093c4 <_printf_common+0xa8>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4649      	mov	r1, r9
 80093b8:	4638      	mov	r0, r7
 80093ba:	47c0      	blx	r8
 80093bc:	3001      	adds	r0, #1
 80093be:	d103      	bne.n	80093c8 <_printf_common+0xac>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7c6      	b.n	800935a <_printf_common+0x3e>
 80093cc:	18e1      	adds	r1, r4, r3
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	2030      	movs	r0, #48	; 0x30
 80093d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093d6:	4422      	add	r2, r4
 80093d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e0:	3302      	adds	r3, #2
 80093e2:	e7c7      	b.n	8009374 <_printf_common+0x58>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4622      	mov	r2, r4
 80093e8:	4649      	mov	r1, r9
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c0      	blx	r8
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0e6      	beq.n	80093c0 <_printf_common+0xa4>
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7d9      	b.n	80093aa <_printf_common+0x8e>
	...

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	7e0f      	ldrb	r7, [r1, #24]
 80093fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009400:	2f78      	cmp	r7, #120	; 0x78
 8009402:	4691      	mov	r9, r2
 8009404:	4680      	mov	r8, r0
 8009406:	460c      	mov	r4, r1
 8009408:	469a      	mov	sl, r3
 800940a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	; 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d8 	beq.w	80095ca <_printf_i+0x1d2>
 800941a:	2f58      	cmp	r7, #88	; 0x58
 800941c:	f000 80a3 	beq.w	8009566 <_printf_i+0x16e>
 8009420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a101      	add	r1, pc, #4	; (adr r1, 8009438 <_printf_i+0x40>)
 8009434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095b1 	.word	0x080095b1
 8009468:	080094d5 	.word	0x080094d5
 800946c:	08009593 	.word	0x08009593
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095d3 	.word	0x080095d3
 800947c:	08009421 	.word	0x08009421
 8009480:	080094d5 	.word	0x080094d5
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	0800959b 	.word	0x0800959b
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	602a      	str	r2, [r5, #0]
 8009498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0a3      	b.n	80095ec <_printf_i+0x1f4>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	6829      	ldr	r1, [r5, #0]
 80094a8:	0606      	lsls	r6, r0, #24
 80094aa:	f101 0304 	add.w	r3, r1, #4
 80094ae:	d50a      	bpl.n	80094c6 <_printf_i+0xce>
 80094b0:	680e      	ldr	r6, [r1, #0]
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xc8>
 80094b8:	232d      	movs	r3, #45	; 0x2d
 80094ba:	4276      	negs	r6, r6
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	485e      	ldr	r0, [pc, #376]	; (800963c <_printf_i+0x244>)
 80094c2:	230a      	movs	r3, #10
 80094c4:	e019      	b.n	80094fa <_printf_i+0x102>
 80094c6:	680e      	ldr	r6, [r1, #0]
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094ce:	bf18      	it	ne
 80094d0:	b236      	sxthne	r6, r6
 80094d2:	e7ef      	b.n	80094b4 <_printf_i+0xbc>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	1d19      	adds	r1, r3, #4
 80094da:	6029      	str	r1, [r5, #0]
 80094dc:	0601      	lsls	r1, r0, #24
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0xec>
 80094e0:	681e      	ldr	r6, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0xf2>
 80094e4:	0646      	lsls	r6, r0, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0xe8>
 80094e8:	881e      	ldrh	r6, [r3, #0]
 80094ea:	4854      	ldr	r0, [pc, #336]	; (800963c <_printf_i+0x244>)
 80094ec:	2f6f      	cmp	r7, #111	; 0x6f
 80094ee:	bf0c      	ite	eq
 80094f0:	2308      	moveq	r3, #8
 80094f2:	230a      	movne	r3, #10
 80094f4:	2100      	movs	r1, #0
 80094f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094fa:	6865      	ldr	r5, [r4, #4]
 80094fc:	60a5      	str	r5, [r4, #8]
 80094fe:	2d00      	cmp	r5, #0
 8009500:	bfa2      	ittt	ge
 8009502:	6821      	ldrge	r1, [r4, #0]
 8009504:	f021 0104 	bicge.w	r1, r1, #4
 8009508:	6021      	strge	r1, [r4, #0]
 800950a:	b90e      	cbnz	r6, 8009510 <_printf_i+0x118>
 800950c:	2d00      	cmp	r5, #0
 800950e:	d04d      	beq.n	80095ac <_printf_i+0x1b4>
 8009510:	4615      	mov	r5, r2
 8009512:	fbb6 f1f3 	udiv	r1, r6, r3
 8009516:	fb03 6711 	mls	r7, r3, r1, r6
 800951a:	5dc7      	ldrb	r7, [r0, r7]
 800951c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009520:	4637      	mov	r7, r6
 8009522:	42bb      	cmp	r3, r7
 8009524:	460e      	mov	r6, r1
 8009526:	d9f4      	bls.n	8009512 <_printf_i+0x11a>
 8009528:	2b08      	cmp	r3, #8
 800952a:	d10b      	bne.n	8009544 <_printf_i+0x14c>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	07de      	lsls	r6, r3, #31
 8009530:	d508      	bpl.n	8009544 <_printf_i+0x14c>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	4299      	cmp	r1, r3
 8009538:	bfde      	ittt	le
 800953a:	2330      	movle	r3, #48	; 0x30
 800953c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009540:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009544:	1b52      	subs	r2, r2, r5
 8009546:	6122      	str	r2, [r4, #16]
 8009548:	f8cd a000 	str.w	sl, [sp]
 800954c:	464b      	mov	r3, r9
 800954e:	aa03      	add	r2, sp, #12
 8009550:	4621      	mov	r1, r4
 8009552:	4640      	mov	r0, r8
 8009554:	f7ff fee2 	bl	800931c <_printf_common>
 8009558:	3001      	adds	r0, #1
 800955a:	d14c      	bne.n	80095f6 <_printf_i+0x1fe>
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b004      	add	sp, #16
 8009562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009566:	4835      	ldr	r0, [pc, #212]	; (800963c <_printf_i+0x244>)
 8009568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800956c:	6829      	ldr	r1, [r5, #0]
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	f851 6b04 	ldr.w	r6, [r1], #4
 8009574:	6029      	str	r1, [r5, #0]
 8009576:	061d      	lsls	r5, r3, #24
 8009578:	d514      	bpl.n	80095a4 <_printf_i+0x1ac>
 800957a:	07df      	lsls	r7, r3, #31
 800957c:	bf44      	itt	mi
 800957e:	f043 0320 	orrmi.w	r3, r3, #32
 8009582:	6023      	strmi	r3, [r4, #0]
 8009584:	b91e      	cbnz	r6, 800958e <_printf_i+0x196>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f023 0320 	bic.w	r3, r3, #32
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	2310      	movs	r3, #16
 8009590:	e7b0      	b.n	80094f4 <_printf_i+0xfc>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f043 0320 	orr.w	r3, r3, #32
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	2378      	movs	r3, #120	; 0x78
 800959c:	4828      	ldr	r0, [pc, #160]	; (8009640 <_printf_i+0x248>)
 800959e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a2:	e7e3      	b.n	800956c <_printf_i+0x174>
 80095a4:	0659      	lsls	r1, r3, #25
 80095a6:	bf48      	it	mi
 80095a8:	b2b6      	uxthmi	r6, r6
 80095aa:	e7e6      	b.n	800957a <_printf_i+0x182>
 80095ac:	4615      	mov	r5, r2
 80095ae:	e7bb      	b.n	8009528 <_printf_i+0x130>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	6826      	ldr	r6, [r4, #0]
 80095b4:	6961      	ldr	r1, [r4, #20]
 80095b6:	1d18      	adds	r0, r3, #4
 80095b8:	6028      	str	r0, [r5, #0]
 80095ba:	0635      	lsls	r5, r6, #24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0x1cc>
 80095c0:	6019      	str	r1, [r3, #0]
 80095c2:	e002      	b.n	80095ca <_printf_i+0x1d2>
 80095c4:	0670      	lsls	r0, r6, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0x1c8>
 80095c8:	8019      	strh	r1, [r3, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	4615      	mov	r5, r2
 80095d0:	e7ba      	b.n	8009548 <_printf_i+0x150>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	602a      	str	r2, [r5, #0]
 80095d8:	681d      	ldr	r5, [r3, #0]
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	2100      	movs	r1, #0
 80095de:	4628      	mov	r0, r5
 80095e0:	f7f6 fdf6 	bl	80001d0 <memchr>
 80095e4:	b108      	cbz	r0, 80095ea <_printf_i+0x1f2>
 80095e6:	1b40      	subs	r0, r0, r5
 80095e8:	6060      	str	r0, [r4, #4]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	2300      	movs	r3, #0
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f4:	e7a8      	b.n	8009548 <_printf_i+0x150>
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	462a      	mov	r2, r5
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	47d0      	blx	sl
 8009600:	3001      	adds	r0, #1
 8009602:	d0ab      	beq.n	800955c <_printf_i+0x164>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	079b      	lsls	r3, r3, #30
 8009608:	d413      	bmi.n	8009632 <_printf_i+0x23a>
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	4298      	cmp	r0, r3
 8009610:	bfb8      	it	lt
 8009612:	4618      	movlt	r0, r3
 8009614:	e7a4      	b.n	8009560 <_printf_i+0x168>
 8009616:	2301      	movs	r3, #1
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d09b      	beq.n	800955c <_printf_i+0x164>
 8009624:	3501      	adds	r5, #1
 8009626:	68e3      	ldr	r3, [r4, #12]
 8009628:	9903      	ldr	r1, [sp, #12]
 800962a:	1a5b      	subs	r3, r3, r1
 800962c:	42ab      	cmp	r3, r5
 800962e:	dcf2      	bgt.n	8009616 <_printf_i+0x21e>
 8009630:	e7eb      	b.n	800960a <_printf_i+0x212>
 8009632:	2500      	movs	r5, #0
 8009634:	f104 0619 	add.w	r6, r4, #25
 8009638:	e7f5      	b.n	8009626 <_printf_i+0x22e>
 800963a:	bf00      	nop
 800963c:	08009751 	.word	0x08009751
 8009640:	08009762 	.word	0x08009762

08009644 <__retarget_lock_acquire_recursive>:
 8009644:	4770      	bx	lr

08009646 <__retarget_lock_release_recursive>:
 8009646:	4770      	bx	lr

08009648 <memmove>:
 8009648:	4288      	cmp	r0, r1
 800964a:	b510      	push	{r4, lr}
 800964c:	eb01 0402 	add.w	r4, r1, r2
 8009650:	d902      	bls.n	8009658 <memmove+0x10>
 8009652:	4284      	cmp	r4, r0
 8009654:	4623      	mov	r3, r4
 8009656:	d807      	bhi.n	8009668 <memmove+0x20>
 8009658:	1e43      	subs	r3, r0, #1
 800965a:	42a1      	cmp	r1, r4
 800965c:	d008      	beq.n	8009670 <memmove+0x28>
 800965e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009666:	e7f8      	b.n	800965a <memmove+0x12>
 8009668:	4402      	add	r2, r0
 800966a:	4601      	mov	r1, r0
 800966c:	428a      	cmp	r2, r1
 800966e:	d100      	bne.n	8009672 <memmove+0x2a>
 8009670:	bd10      	pop	{r4, pc}
 8009672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800967a:	e7f7      	b.n	800966c <memmove+0x24>

0800967c <_realloc_r>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	4680      	mov	r8, r0
 8009682:	4614      	mov	r4, r2
 8009684:	460e      	mov	r6, r1
 8009686:	b921      	cbnz	r1, 8009692 <_realloc_r+0x16>
 8009688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	4611      	mov	r1, r2
 800968e:	f7ff bc25 	b.w	8008edc <_malloc_r>
 8009692:	b92a      	cbnz	r2, 80096a0 <_realloc_r+0x24>
 8009694:	f7ff fbb6 	bl	8008e04 <_free_r>
 8009698:	4625      	mov	r5, r4
 800969a:	4628      	mov	r0, r5
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	f000 f81b 	bl	80096da <_malloc_usable_size_r>
 80096a4:	4284      	cmp	r4, r0
 80096a6:	4607      	mov	r7, r0
 80096a8:	d802      	bhi.n	80096b0 <_realloc_r+0x34>
 80096aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ae:	d812      	bhi.n	80096d6 <_realloc_r+0x5a>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff fc12 	bl	8008edc <_malloc_r>
 80096b8:	4605      	mov	r5, r0
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0ed      	beq.n	800969a <_realloc_r+0x1e>
 80096be:	42bc      	cmp	r4, r7
 80096c0:	4622      	mov	r2, r4
 80096c2:	4631      	mov	r1, r6
 80096c4:	bf28      	it	cs
 80096c6:	463a      	movcs	r2, r7
 80096c8:	f7ff fb86 	bl	8008dd8 <memcpy>
 80096cc:	4631      	mov	r1, r6
 80096ce:	4640      	mov	r0, r8
 80096d0:	f7ff fb98 	bl	8008e04 <_free_r>
 80096d4:	e7e1      	b.n	800969a <_realloc_r+0x1e>
 80096d6:	4635      	mov	r5, r6
 80096d8:	e7df      	b.n	800969a <_realloc_r+0x1e>

080096da <_malloc_usable_size_r>:
 80096da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096de:	1f18      	subs	r0, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	bfbc      	itt	lt
 80096e4:	580b      	ldrlt	r3, [r1, r0]
 80096e6:	18c0      	addlt	r0, r0, r3
 80096e8:	4770      	bx	lr
	...

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
